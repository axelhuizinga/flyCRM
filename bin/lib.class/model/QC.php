<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \haxe\Log;
use \php\Lib;
use \php\_Boot\HxAnon;

class QC extends Clients {
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		#src/model/QC.hx:28: characters 3-31
		$self = new QC($param);
		#src/model/QC.hx:29: characters 3-31
		$self->table = "vicidial_list";
		#src/model/QC.hx:31: characters 3-84
		return \Reflect::callMethod($self, \Reflect::field($self, ($param->data["action"] ?? null)), \Array_hx::wrap([$param]));
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/QC.hx:21: lines 21-320
		parent::__construct($param);
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doSelectCustom ($q, $sb, $phValues) {
		#src/model/QC.hx:135: characters 3-46
		$fields = ($q->data["fields"] ?? null);
		#src/model/QC.hx:137: characters 22-136
		$tmp = null;
		#src/model/QC.hx:137: characters 22-136
		if ($fields !== null) {
			#src/model/QC.hx:137: characters 53-117
			$result = [];
			#src/model/QC.hx:137: characters 53-117
			$_g1 = 0;
			#src/model/QC.hx:137: characters 53-117
			$_g = $fields->length;
			#src/model/QC.hx:137: characters 53-117
			while ($_g1 < $_g) {
				#src/model/QC.hx:137: characters 53-117
				$_g1 = $_g1 + 1;
				#src/model/QC.hx:137: characters 53-117
				$i = $_g1 - 1;
				#src/model/QC.hx:137: characters 53-117
				$result[] = \S::$my->real_escape_string($fields->arr[$i]);
			}

			#src/model/QC.hx:137: characters 22-136
			$tmp = $this->fieldFormat(\Array_hx::wrap($result)->join(","));
		} else {
			#src/model/QC.hx:137: characters 22-136
			$tmp = "*";
		}
		#src/model/QC.hx:137: characters 3-137
		$sb->add("SELECT " . ($tmp??'null'));
		#src/model/QC.hx:138: characters 3-53
		$entry_list_id = ($q->data["entry_list_id"] ?? null);
		#src/model/QC.hx:139: characters 3-72
		$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
		#src/model/QC.hx:140: characters 3-182
		$sb->add(" FROM " . (\S::$my->real_escape_string($this->table)??'null') . " AS vl INNER JOIN " . (\S::$my->real_escape_string("custom_" . ($entry_list_id??'null'))??'null') . " AS cu ON vl." . ($primary_id??'null') . "=cu." . ($primary_id??'null'));
		#src/model/QC.hx:141: characters 40-44
		$tmp1 = \S::$my;
		#src/model/QC.hx:141: characters 64-90
		$key = ($q->data["primary_id"] ?? null);
		#src/model/QC.hx:141: characters 3-107
		$this->buildCond("vl." . ($primary_id??'null') . "|" . ($tmp1->real_escape_string(($q->data[$key] ?? null))??'null'), $sb, $phValues);
		#src/model/QC.hx:144: characters 3-42
		return $this->execute($sb->b, $phValues);
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function edit ($param) {
		#src/model/QC.hx:36: characters 3-57
		$entry_list_id = ($param->data["entry_list_id"] ?? null);
		#src/model/QC.hx:37: characters 3-68
		$cF = $this->getCustomFields($entry_list_id);
		#src/model/QC.hx:38: characters 31-111
		$result = [];
		#src/model/QC.hx:38: characters 31-111
		$_g1 = 0;
		#src/model/QC.hx:38: characters 31-111
		$_g = $cF->length;
		#src/model/QC.hx:38: characters 31-111
		while ($_g1 < $_g) {
			#src/model/QC.hx:38: characters 31-111
			$_g1 = $_g1 + 1;
			#src/model/QC.hx:38: characters 31-111
			$i = $_g1 - 1;
			#src/model/QC.hx:38: characters 31-111
			$result[] = ($cF->arr[$i]->data["field_label"] ?? null);
		}

		#src/model/QC.hx:38: characters 3-112
		$cFields = \Array_hx::wrap($result);
		#src/model/QC.hx:39: characters 3-8
		(Log::$trace)($cFields->join(","), new HxAnon([
			"fileName" => "src/model/QC.hx",
			"lineNumber" => 39,
			"className" => "model.QC",
			"methodName" => "edit",
		]));
		#src/model/QC.hx:42: characters 3-56
		$fieldDefault = new StringMap();
		#src/model/QC.hx:43: characters 3-54
		$fieldNames = new StringMap();
		#src/model/QC.hx:44: characters 3-55
		$fieldRequired = new StringMap();
		#src/model/QC.hx:45: characters 3-51
		$typeMap = new StringMap();
		#src/model/QC.hx:46: characters 3-54
		$optionsMap = new StringMap();
		#src/model/QC.hx:49: characters 3-76
		$eF = ($this->getEditorFields()->data["vicidial_list"] ?? null);
		#src/model/QC.hx:51: lines 51-64
		$_g2 = 0;
		#src/model/QC.hx:51: lines 51-64
		while ($_g2 < $eF->length) {
			#src/model/QC.hx:51: characters 8-9
			$f = ($eF->arr[$_g2] ?? null);
			#src/model/QC.hx:51: lines 51-64
			$_g2 = $_g2 + 1;
			#src/model/QC.hx:60: characters 4-61
			$key = ($f->data["field_label"] ?? null);
			#src/model/QC.hx:60: characters 4-61
			$value = ($f->data["field_name"] ?? null);
			#src/model/QC.hx:60: characters 4-61
			$fieldNames->data[$key] = $value;

			#src/model/QC.hx:61: lines 61-62
			if (($f->data["field_options"] ?? null) !== null) {
				#src/model/QC.hx:62: characters 5-65
				$key1 = ($f->data["field_label"] ?? null);
				#src/model/QC.hx:62: characters 5-65
				$value1 = ($f->data["field_options"] ?? null);
				#src/model/QC.hx:62: characters 5-65
				$optionsMap->data[$key1] = $value1;
			}
			#src/model/QC.hx:63: characters 4-58
			$key2 = ($f->data["field_label"] ?? null);
			#src/model/QC.hx:63: characters 4-58
			$value2 = ($f->data["field_type"] ?? null);
			#src/model/QC.hx:63: characters 4-58
			$typeMap->data[$key2] = $value2;

		}

		#src/model/QC.hx:69: lines 69-85
		$_g11 = 0;
		#src/model/QC.hx:69: lines 69-85
		$_g3 = $cFields->length;
		#src/model/QC.hx:69: lines 69-85
		while ($_g11 < $_g3) {
			#src/model/QC.hx:69: lines 69-85
			$_g11 = $_g11 + 1;
			#src/model/QC.hx:69: characters 8-9
			$f1 = $_g11 - 1;
			#src/model/QC.hx:71: characters 4-55
			$value3 = (($cF->arr[$f1] ?? null)->data["field_name"] ?? null);
			#src/model/QC.hx:71: characters 4-55
			$fieldNames->data[$cFields[$f1]] = $value3;

			#src/model/QC.hx:72: lines 72-73
			if ((($cF->arr[$f1] ?? null)->data["field_options"] ?? null) !== null) {
				#src/model/QC.hx:73: characters 5-59
				$value4 = (($cF->arr[$f1] ?? null)->data["field_options"] ?? null);
				#src/model/QC.hx:73: characters 5-59
				$optionsMap->data[$cFields[$f1]] = $value4;
			}
			#src/model/QC.hx:74: characters 4-49
			$def = (($cF->arr[$f1] ?? null)->data["field_default"] ?? null);
			#src/model/QC.hx:75: lines 75-81
			if ($def !== null) {
				#src/model/QC.hx:75: characters 12-15
				switch ($def) {
					case "":
					case "NULL":
												break;
					default:
						#src/model/QC.hx:80: characters 5-61
						$value5 = (($cF->arr[$f1] ?? null)->data["field_default"] ?? null);
						#src/model/QC.hx:80: characters 5-61
						$fieldDefault->data[$cFields[$f1]] = $value5;
						break;
				}
			}
			#src/model/QC.hx:82: lines 82-83
			if ((($cF->arr[$f1] ?? null)->data["field_required"] ?? null) === "Y") {
				#src/model/QC.hx:83: characters 5-40
				$fieldRequired->data[$cFields[$f1]] = true;
			}
			#src/model/QC.hx:84: characters 4-52
			$value6 = (($cF->arr[$f1] ?? null)->data["field_type"] ?? null);
			#src/model/QC.hx:84: characters 4-52
			$typeMap->data[$cFields[$f1]] = $value6;

		}

		#src/model/QC.hx:86: characters 3-29
		$cFields->arr[$cFields->length] = "entry_date";
		#src/model/QC.hx:86: characters 3-29
		++$cFields->length;

		#src/model/QC.hx:87: characters 3-31
		$param->data["fields"] = $cFields;
		#src/model/QC.hx:88: characters 3-38
		$sb = new \StringBuf();
		#src/model/QC.hx:89: characters 3-52
		$phValues = new \Array_hx();
		#src/model/QC.hx:93: characters 17-57
		$fieldDefault1 = $fieldDefault->data;
		#src/model/QC.hx:94: characters 15-53
		$fieldNames1 = $fieldNames->data;
		#src/model/QC.hx:95: characters 18-59
		$fieldRequired1 = $fieldRequired->data;
		#src/model/QC.hx:96: characters 10-45
		$tmp = $this->doSelectCustom($param, $sb, $phValues);
		#src/model/QC.hx:97: characters 12-47
		$typeMap1 = $typeMap->data;
		#src/model/QC.hx:98: characters 15-53
		$optionsMap1 = $optionsMap->data;
		#src/model/QC.hx:92: characters 3-7
		$this->data = new HxAnon([
			"fieldDefault" => $fieldDefault1,
			"fieldNames" => $fieldNames1,
			"fieldRequired" => $fieldRequired1,
			"rows" => $tmp,
			"typeMap" => $typeMap1,
			"optionsMap" => $optionsMap1,
			"recordings" => $this->getRecordings(\Std::parseInt(($param->data["lead_id"] ?? null))),
		]);
		#src/model/QC.hx:101: characters 35-50
		$this1 = [];
		#src/model/QC.hx:101: characters 35-50
		$userMap_data = $this1;
		#src/model/QC.hx:102: characters 3-5
		$sb = new \StringBuf();
		#src/model/QC.hx:103: characters 3-11
		$phValues = new \Array_hx();
		#src/model/QC.hx:104: characters 29-44
		$this2 = [];
		#src/model/QC.hx:104: characters 29-44
		$p_data = $this2;
		#src/model/QC.hx:105: characters 3-35
		$p_data["table"] = "vicidial_users";
		#src/model/QC.hx:106: characters 3-36
		$p_data["fields"] = "user,full_name";
		#src/model/QC.hx:107: characters 3-40
		$p_data["where"] = "user_group|AGENTS_A";
		#src/model/QC.hx:109: characters 3-8
		(Log::$trace)(($this->num_rows??'null') . ":" . (\Std::string(($param->data["owner"] ?? null))??'null'), new HxAnon([
			"fileName" => "src/model/QC.hx",
			"lineNumber" => 109,
			"className" => "model.QC",
			"methodName" => "edit",
		]));
		#src/model/QC.hx:110: characters 3-15
		$this->data->userMap = (new Users())->get_info();
		#src/model/QC.hx:113: characters 3-23
		return $this->json_encode();
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function errSale ($q) {
		#src/model/QC.hx:151: characters 3-48
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		#src/model/QC.hx:152: characters 3-28
		$user = \S::$user;
		#src/model/QC.hx:154: lines 154-156
		$sql = "UPDATE vicidial_list SET status='NI', list_id=`entry_list_id` WHERE lead_id=" . ($lead_id??'null');
		#src/model/QC.hx:157: characters 3-13
		$this->query($sql);
		#src/model/QC.hx:158: characters 3-33
		return \S::$my->affected_rows === 1;
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		#src/model/QC.hx:118: characters 3-38
		$sb = new \StringBuf();
		#src/model/QC.hx:119: characters 3-52
		$phValues = new \Array_hx();
		#src/model/QC.hx:120: characters 3-50
		$count = $this->countJoin($param, $sb, $phValues);
		#src/model/QC.hx:121: characters 3-8
		(Log::$trace)($param, new HxAnon([
			"fileName" => "src/model/QC.hx",
			"lineNumber" => 121,
			"className" => "model.QC",
			"methodName" => "find",
		]));
		#src/model/QC.hx:122: characters 3-23
		$sb = new \StringBuf();
		#src/model/QC.hx:123: characters 3-25
		$phValues = new \Array_hx();
		#src/model/QC.hx:124: characters 3-8
		(Log::$trace)("count:" . ($count??'null') . ":" . (($param->data["page"] ?? null)??'null') . ": " . (((array_key_exists("page", $param->data) ? "Y" : "N"))??'null'), new HxAnon([
			"fileName" => "src/model/QC.hx",
			"lineNumber" => 124,
			"className" => "model.QC",
			"methodName" => "find",
		]));
		#src/model/QC.hx:127: characters 9-71
		$tmp = (array_key_exists("page", $param->data) ? \Std::parseInt(($param->data["page"] ?? null)) : 1);
		#src/model/QC.hx:125: lines 125-129
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp,
			"rows" => $this->doJoin($param, $sb, $phValues),
		]);
		#src/model/QC.hx:130: characters 3-23
		return $this->json_encode();
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save ($q) {
		#src/model/QC.hx:164: characters 3-48
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		#src/model/QC.hx:165: characters 3-28
		$user = \S::$user;
		#src/model/QC.hx:167: lines 167-168
		if (array_key_exists("status", $q->data) && (($q->data["status"] ?? null) === "ERRSALE")) {
			#src/model/QC.hx:168: characters 4-21
			return $this->errSale($q);
		}
		#src/model/QC.hx:169: characters 3-47
		$log_id = false;
		#src/model/QC.hx:170: characters 7-27
		$log_id = $this->saveLog($q);
		#src/model/QC.hx:170: lines 170-312
		if ($log_id) {
			#src/model/QC.hx:173: characters 4-59
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			#src/model/QC.hx:174: characters 4-9
			(Log::$trace)(($cTable??'null') . " log_id:" . (\Std::string($log_id)??'null'), new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 174,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			#src/model/QC.hx:175: characters 4-74
			$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
			#src/model/QC.hx:176: characters 4-41
			$sql = new \StringBuf();
			#src/model/QC.hx:177: characters 4-34
			$sql->add("UPDATE " . ($cTable??'null') . " SET ");
			#src/model/QC.hx:178: characters 4-43
			$cFields = \S::tableFields("" . ($cTable??'null'));
			#src/model/QC.hx:179: characters 4-9
			(Log::$trace)("" . ($cTable??'null') . " fields:" . ($cFields->toString()??'null'), new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 179,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			#src/model/QC.hx:180: characters 4-30
			$cFields->remove($primary_id);
			#src/model/QC.hx:181: characters 4-30
			$bindTypes = "";
			#src/model/QC.hx:182: characters 4-39
			$values2bind = null;
			#src/model/QC.hx:183: characters 4-18
			$i = 0;
			#src/model/QC.hx:184: characters 4-126
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			#src/model/QC.hx:185: characters 4-41
			$sets = new \Array_hx();
			#src/model/QC.hx:186: lines 186-198
			$_g = 0;
			#src/model/QC.hx:186: lines 186-198
			while ($_g < $cFields->length) {
				#src/model/QC.hx:186: characters 9-10
				$c = ($cFields->arr[$_g] ?? null);
				#src/model/QC.hx:186: lines 186-198
				$_g = $_g + 1;
				#src/model/QC.hx:188: characters 5-32
				$val = ($q->data[$c] ?? null);
				#src/model/QC.hx:189: lines 189-197
				if ($val !== null) {
					#src/model/QC.hx:192: characters 6-48
					if (($c === "period") && ($val === "")) {
						#src/model/QC.hx:192: characters 38-48
						$val = "''";
					}
					#src/model/QC.hx:193: characters 18-21
					$i = $i + 1;
					#src/model/QC.hx:193: characters 6-60
					$values2bind[$i - 1] = (Boot::is($val, Boot::getClass('String')) ? $val : $val[0]);
					#src/model/QC.hx:194: characters 6-44
					$type = ($dbFieldTypes->data[$c] ?? null);
					#src/model/QC.hx:195: characters 20-35
					$v = $type;
					#src/model/QC.hx:195: characters 6-50
					$bindTypes = ($bindTypes??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? $type : "s"))??'null');
					#src/model/QC.hx:196: characters 6-25
					$sets->arr[$sets->length] = ($c??'null') . "=?";
					#src/model/QC.hx:196: characters 6-25
					++$sets->length;

				}
			}

			#src/model/QC.hx:199: characters 4-27
			$sql->add($sets->join(","));
			#src/model/QC.hx:200: characters 4-38
			$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
			#src/model/QC.hx:201: characters 4-33
			$stmt = \S::$my->stmt_init();
			#src/model/QC.hx:202: characters 4-9
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 202,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			#src/model/QC.hx:203: characters 4-9
			(Log::$trace)($values2bind, new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 203,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			#src/model/QC.hx:204: characters 4-52
			$success = $stmt->prepare($sql->b);
			#src/model/QC.hx:205: lines 205-209
			if (($i > 0) && !$success) {
				#src/model/QC.hx:207: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/model/QC.hx",
					"lineNumber" => 207,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				#src/model/QC.hx:208: characters 5-17
				return false;
			}
			#src/model/QC.hx:211: characters 29-82
			$success = ($i > 0 ? myBindParam($stmt, $values2bind, $bindTypes) : true);
			#src/model/QC.hx:212: characters 4-9
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 212,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			#src/model/QC.hx:213: lines 213-308
			if ($success) {
				#src/model/QC.hx:215: characters 24-38
				$success = ($i === 0) || $stmt->execute();
				#src/model/QC.hx:216: lines 216-220
				if (!$success) {
					#src/model/QC.hx:218: characters 6-11
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "src/model/QC.hx",
						"lineNumber" => 218,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					#src/model/QC.hx:219: characters 6-18
					return false;
				}
				#src/model/QC.hx:222: characters 5-53
				if ($i === 0) {
					#src/model/QC.hx:222: characters 17-22
					(Log::$trace)("i:" . ($i??'null') . " custom fields saved???", new HxAnon([
						"fileName" => "src/model/QC.hx",
						"lineNumber" => 222,
						"className" => "model.QC",
						"methodName" => "save",
					]));
				}
				#src/model/QC.hx:223: characters 5-26
				$sql = new \StringBuf();
				#src/model/QC.hx:224: characters 5-39
				$uFields = QC::$vicdial_list_fields;
				#src/model/QC.hx:225: characters 5-31
				$uFields->remove($primary_id);
				#src/model/QC.hx:226: characters 5-19
				$bindTypes = "";
				#src/model/QC.hx:227: characters 5-23
				$values2bind = null;
				#src/model/QC.hx:228: characters 5-10
				$i = 0;
				#src/model/QC.hx:229: characters 5-41
				$sql->add("UPDATE vicidial_list SET ");
				#src/model/QC.hx:230: characters 5-24
				$sets = new \Array_hx();
				#src/model/QC.hx:231: lines 231-242
				$_g1 = 0;
				#src/model/QC.hx:231: lines 231-242
				while ($_g1 < $uFields->length) {
					#src/model/QC.hx:231: characters 10-11
					$c1 = ($uFields->arr[$_g1] ?? null);
					#src/model/QC.hx:231: lines 231-242
					$_g1 = $_g1 + 1;
					#src/model/QC.hx:233: characters 6-33
					$val1 = ($q->data[$c1] ?? null);
					#src/model/QC.hx:234: lines 234-241
					if ($val1 !== null) {
						#src/model/QC.hx:237: characters 19-22
						$i = $i + 1;
						#src/model/QC.hx:237: characters 7-61
						$values2bind[$i - 1] = (Boot::is($val1, Boot::getClass('String')) ? $val1 : $val1[0]);
						#src/model/QC.hx:238: characters 7-45
						$type1 = ($dbFieldTypes->data[$c1] ?? null);
						#src/model/QC.hx:239: characters 21-36
						$v1 = $type1;
						#src/model/QC.hx:239: characters 7-51
						$bindTypes = ($bindTypes??'null') . (((($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? $type1 : "s"))??'null');
						#src/model/QC.hx:240: characters 7-26
						$sets->arr[$sets->length] = ($c1??'null') . "=?";
						#src/model/QC.hx:240: characters 7-26
						++$sets->length;

					}
				}

				#src/model/QC.hx:243: characters 17-20
				$i = $i + 1;
				#src/model/QC.hx:243: characters 5-30
				$values2bind[$i - 1] = \S::$user;
				#src/model/QC.hx:244: characters 5-21
				$bindTypes = ($bindTypes??'null') . "s";
				#src/model/QC.hx:245: characters 5-35
				$sets->arr[$sets->length] = "security_phrase=?";
				#src/model/QC.hx:245: characters 5-35
				++$sets->length;

				#src/model/QC.hx:246: characters 17-20
				$i = $i + 1;
				#src/model/QC.hx:246: characters 5-28
				$values2bind[$i - 1] = "XX";
				#src/model/QC.hx:247: characters 5-21
				$bindTypes = ($bindTypes??'null') . "s";
				#src/model/QC.hx:248: characters 5-25
				$sets->arr[$sets->length] = "state=?";
				#src/model/QC.hx:248: characters 5-25
				++$sets->length;

				#src/model/QC.hx:249: lines 249-279
				if ((($q->data["status"] ?? null) === "QCOK") || (($q->data["status"] ?? null) === "QCBAD")) {
					#src/model/QC.hx:251: characters 6-30
					$list_id = 10000;
					#src/model/QC.hx:252: lines 252-264
					if (($q->data["status"] ?? null) === "QCOK") {
						#src/model/QC.hx:254: characters 7-61
						$mID = \Std::parseInt(($q->data["vendor_lead_code"] ?? null));
						#src/model/QC.hx:255: lines 255-261
						if ($mID === null) {
							#src/model/QC.hx:257: characters 8-29
							$mID = \S::newMemberID();
							#src/model/QC.hx:258: characters 20-23
							$i = $i + 1;
							#src/model/QC.hx:258: characters 8-30
							$values2bind[$i - 1] = $mID;
							#src/model/QC.hx:259: characters 8-24
							$bindTypes = ($bindTypes??'null') . "s";
							#src/model/QC.hx:260: characters 8-39
							$sets->arr[$sets->length] = "vendor_lead_code=?";
							#src/model/QC.hx:260: characters 8-39
							++$sets->length;

						}
					} else {
						#src/model/QC.hx:264: characters 7-21
						$list_id = 1800;
					}
					#src/model/QC.hx:265: characters 6-11
					(Log::$trace)("list_id:" . ($list_id??'null'), new HxAnon([
						"fileName" => "src/model/QC.hx",
						"lineNumber" => 265,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					#src/model/QC.hx:266: characters 6-56
					$entry_list_id = ($q->data["entry_list_id"] ?? null);
					#src/model/QC.hx:267: characters 18-21
					$i = $i + 1;
					#src/model/QC.hx:267: characters 6-40
					$values2bind[$i - 1] = ($q->data["status"] ?? null);
					#src/model/QC.hx:268: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/QC.hx:269: characters 6-29
					$sets->arr[$sets->length] = "`status`=?";
					#src/model/QC.hx:269: characters 6-29
					++$sets->length;

					#src/model/QC.hx:270: characters 18-21
					$i = $i + 1;
					#src/model/QC.hx:270: characters 6-32
					$values2bind[$i - 1] = $list_id;
					#src/model/QC.hx:271: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/QC.hx:272: characters 6-28
					$sets->arr[$sets->length] = "list_id=?";
					#src/model/QC.hx:272: characters 6-28
					++$sets->length;

					#src/model/QC.hx:273: characters 18-21
					$i = $i + 1;
					#src/model/QC.hx:273: characters 6-38
					$values2bind[$i - 1] = $entry_list_id;
					#src/model/QC.hx:274: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/QC.hx:275: characters 6-34
					$sets->arr[$sets->length] = "entry_list_id=?";
					#src/model/QC.hx:275: characters 6-34
					++$sets->length;

					#src/model/QC.hx:276: characters 18-21
					$i = $i + 1;
					#src/model/QC.hx:276: characters 6-39
					$values2bind[$i - 1] = ($q->data["owner"] ?? null);
					#src/model/QC.hx:277: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/QC.hx:278: characters 6-26
					$sets->arr[$sets->length] = "owner=?";
					#src/model/QC.hx:278: characters 6-26
					++$sets->length;

				}
				#src/model/QC.hx:280: characters 5-28
				$sql->add($sets->join(","));
				#src/model/QC.hx:281: characters 5-39
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				#src/model/QC.hx:282: characters 5-34
				$stmt1 = \S::$my->stmt_init();
				#src/model/QC.hx:283: characters 5-10
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "src/model/QC.hx",
					"lineNumber" => 283,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				#src/model/QC.hx:284: characters 5-53
				$success1 = $stmt1->prepare($sql->b);
				#src/model/QC.hx:285: lines 285-289
				if (!$success1) {
					#src/model/QC.hx:287: characters 6-11
					(Log::$trace)($stmt1->error, new HxAnon([
						"fileName" => "src/model/QC.hx",
						"lineNumber" => 287,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					#src/model/QC.hx:288: characters 6-18
					return false;
				}
				#src/model/QC.hx:290: characters 5-10
				(Log::$trace)("" . ($i??'null') . " values:", new HxAnon([
					"fileName" => "src/model/QC.hx",
					"lineNumber" => 290,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				#src/model/QC.hx:291: characters 5-10
				(Log::$trace)($values2bind, new HxAnon([
					"fileName" => "src/model/QC.hx",
					"lineNumber" => 291,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				#src/model/QC.hx:292: characters 5-76
				$success1 = myBindParam($stmt1, $values2bind, $bindTypes);
				#src/model/QC.hx:293: characters 5-10
				(Log::$trace)("success:" . (\Std::string($success1)??'null'), new HxAnon([
					"fileName" => "src/model/QC.hx",
					"lineNumber" => 293,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				#src/model/QC.hx:294: lines 294-306
				if ($success1) {
					#src/model/QC.hx:296: characters 6-30
					$success1 = $stmt1->execute();
					#src/model/QC.hx:297: lines 297-305
					if (!$success1) {
						#src/model/QC.hx:299: characters 7-12
						(Log::$trace)($stmt1->error, new HxAnon([
							"fileName" => "src/model/QC.hx",
							"lineNumber" => 299,
							"className" => "model.QC",
							"methodName" => "save",
						]));
						#src/model/QC.hx:300: characters 7-19
						return false;
					} else {
						#src/model/QC.hx:304: characters 7-41
						return $this->saveLog($q, $log_id) !== false;
					}
				}
				#src/model/QC.hx:307: characters 5-17
				return false;
			}
		} else {
			#src/model/QC.hx:312: characters 4-9
			(Log::$trace)("oops", new HxAnon([
				"fileName" => "src/model/QC.hx",
				"lineNumber" => 312,
				"className" => "model.QC",
				"methodName" => "save",
			]));
		}
		#src/model/QC.hx:316: characters 3-15
		return false;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$vicdial_list_fields = \Array_hx::wrap(explode(",", "lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id"));
	}
}

Boot::registerClass(QC::class, 'model.QC');
QC::__hx__init();
