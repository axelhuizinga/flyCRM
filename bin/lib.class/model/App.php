<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\_Boot\HxAnon;

class App extends \Model {
	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		#src/model/App.hx:17: characters 3-83
		return json_encode((new App($param))->getGlobals($param), 320);
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/App.hx:12: lines 12-64
		parent::__construct($param);
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function getGlobals ($param) {
		#src/model/App.hx:22: characters 3-54
		$fieldNames = new StringMap();
		#src/model/App.hx:23: characters 3-51
		$typeMap = new StringMap();
		#src/model/App.hx:24: characters 3-54
		$optionsMap = new StringMap();
		#src/model/App.hx:26: characters 3-66
		$eF = $this->getEditorFields();
		#src/model/App.hx:28: characters 3-41
		$keys = new NativeArrayIterator(array_map("strval", array_keys($eF->data)));
		#src/model/App.hx:29: characters 3-46
		$tableNames = new \Array_hx();
		#src/model/App.hx:30: characters 46-61
		$this1 = [];
		#src/model/App.hx:30: characters 46-61
		$tableFields_data = $this1;
		#src/model/App.hx:32: characters 3-8
		(Log::$trace)($param, new HxAnon([
			"fileName" => "src/model/App.hx",
			"lineNumber" => 32,
			"className" => "model.App",
			"methodName" => "getGlobals",
		]));
		#src/model/App.hx:33: lines 33-50
		while ($keys->hasNext()) {
			#src/model/App.hx:35: characters 4-31
			$k = $keys->next();
			#src/model/App.hx:37: characters 4-22
			$tableNames->arr[$tableNames->length] = $k;
			#src/model/App.hx:37: characters 4-22
			++$tableNames->length;

			#src/model/App.hx:38: characters 4-53
			$aFields = ($eF->data[$k] ?? null);
			#src/model/App.hx:40: characters 32-117
			$result = [];
			#src/model/App.hx:40: characters 32-117
			$_g1 = 0;
			#src/model/App.hx:40: characters 32-117
			$_g = $aFields->length;
			#src/model/App.hx:40: characters 32-117
			while ($_g1 < $_g) {
				#src/model/App.hx:40: characters 32-117
				$_g1 = $_g1 + 1;
				#src/model/App.hx:40: characters 32-117
				$i = $_g1 - 1;
				#src/model/App.hx:40: characters 32-117
				$result[] = ($aFields->arr[$i]->data["field_label"] ?? null);
			}

			#src/model/App.hx:40: characters 4-118
			$cFields = \Array_hx::wrap($result);
			#src/model/App.hx:42: characters 4-31
			$tableFields_data[$k] = $cFields;
			#src/model/App.hx:43: lines 43-49
			$_g11 = 0;
			#src/model/App.hx:43: lines 43-49
			$_g2 = $cFields->length;
			#src/model/App.hx:43: lines 43-49
			while ($_g11 < $_g2) {
				#src/model/App.hx:43: lines 43-49
				$_g11 = $_g11 + 1;
				#src/model/App.hx:43: characters 9-10
				$f = $_g11 - 1;
				#src/model/App.hx:45: characters 5-61
				$value = (($aFields->arr[$f] ?? null)->data["field_name"] ?? null);
				#src/model/App.hx:45: characters 5-61
				$fieldNames->data[$cFields[$f]] = $value;

				#src/model/App.hx:46: lines 46-47
				if ((($aFields->arr[$f] ?? null)->data["field_options"] ?? null) !== null) {
					#src/model/App.hx:47: characters 6-65
					$value1 = (($aFields->arr[$f] ?? null)->data["field_options"] ?? null);
					#src/model/App.hx:47: characters 6-65
					$optionsMap->data[$cFields[$f]] = $value1;
				}
				#src/model/App.hx:48: characters 5-58
				$value2 = (($aFields->arr[$f] ?? null)->data["field_type"] ?? null);
				#src/model/App.hx:48: characters 5-58
				$typeMap->data[$cFields[$f]] = $value2;

			}

		}
		#src/model/App.hx:51: characters 3-35
		$me = new Users($param);
		#src/model/App.hx:52: characters 3-16
		$me->get_info();
		#src/model/App.hx:55: characters 15-53
		$fieldNames1 = $fieldNames->data;
		#src/model/App.hx:56: characters 13-23
		$me1 = $me->globals;
		#src/model/App.hx:53: lines 53-60
		$data = new HxAnon([
			"fieldNames" => $fieldNames1,
			"userMap" => $me1,
			"optionsMap" => $optionsMap,
			"typeMap" => $typeMap,
			"limit" => (\S::$conf->data["sql"] ?? null)["LIMIT"],
		]);
		#src/model/App.hx:61: characters 3-14
		return $data;
	}
}

Boot::registerClass(App::class, 'model.App');
