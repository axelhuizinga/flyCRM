<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\_Boot\HxString;
use \php\Lib;
use \php\_Boot\HxAnon;

class Clients extends \Model {
	/**
	 * @var \Array_hx
	 */
	static public $booking_fields;
	/**
	 * @var \Array_hx
	 */
	static public $clients_fields;
	/**
	 * @var StringMap
	 */
	static public $custom_fields_map;
	/**
	 * @var \Array_hx
	 */
	static public $pay_history_fields;
	/**
	 * @var \Array_hx
	 */
	static public $pay_plan_fields;
	/**
	 * @var \Array_hx
	 */
	static public $pay_source_fields;
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		#src/model/Clients.hx:101: characters 3-41
		$self = new Clients($param);
		#src/model/Clients.hx:102: characters 3-31
		$self->table = "vicidial_list";
		#src/model/Clients.hx:105: characters 3-84
		return \Reflect::callMethod($self, \Reflect::field($self, ($param->data["action"] ?? null)), \Array_hx::wrap([$param]));
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/Clients.hx:30: lines 30-776
		parent::__construct($param);
	}

	/**
	 * @param string $srcTable
	 * @param string $suffix
	 * 
	 * @return bool
	 */
	public function checkOrCreateCustomTable ($srcTable, $suffix = "log") {
		#src/model/Clients.hx:755: lines 755-774
		if ($suffix === null) {
			#src/model/Clients.hx:755: lines 755-774
			$suffix = "log";
		}
		#src/model/Clients.hx:756: characters 3-74
		$newTable = \S::$my->real_escape_string(($srcTable??'null') . "_" . ($suffix??'null'));
		#src/model/Clients.hx:758: characters 3-71
		$res = \S::$my->query("SHOW TABLES LIKE  \"" . ($newTable??'null') . "\"");
		#src/model/Clients.hx:759: characters 7-21
		$v = $res;
		#src/model/Clients.hx:759: lines 759-772
		if (($v !== null) && !Boot::equal($v, 0) && ($v !== "") && ($res->num_rows === 0)) {
			#src/model/Clients.hx:761: characters 4-9
			(Log::$trace)("CREATE TABLE `" . ($newTable??'null') . "` like `" . ($srcTable??'null') . "`", new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 761,
				"className" => "model.Clients",
				"methodName" => "checkOrCreateCustomTable",
			]));
			#src/model/Clients.hx:762: characters 4-105
			$res1 = \S::$my->query("CREATE TABLE `" . ($newTable??'null') . "` like `" . ($srcTable??'null') . "`");
			#src/model/Clients.hx:763: lines 763-770
			if (\S::$my->error === "") {
				#src/model/Clients.hx:765: characters 5-130
				$res1 = \S::$my->query("ALTER TABLE " . ($newTable??'null') . " DROP PRIMARY KEY, ADD `log_id` INT(9) NOT NULL  FIRST,  ADD  PRIMARY KEY (`log_id`)");
				#src/model/Clients.hx:766: lines 766-767
				if (\S::$my->error !== "") {
					#src/model/Clients.hx:767: characters 6-24
					\S::exit(\S::$my->error);
				}
				#src/model/Clients.hx:768: characters 5-16
				return true;
			} else {
				#src/model/Clients.hx:770: characters 9-27
				\S::exit(\S::$my->error);
			}
		} else {
			#src/model/Clients.hx:772: characters 8-13
			(Log::$trace)("num_rows:" . ($res->num_rows??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 772,
				"className" => "model.Clients",
				"methodName" => "checkOrCreateCustomTable",
			]));
		}
		#src/model/Clients.hx:773: characters 3-14
		return true;
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doJoin ($q, $sb, $phValues) {
		#src/model/Clients.hx:48: characters 3-39
		$fields = ($q->data["fields"] ?? null);
		#src/model/Clients.hx:51: characters 22-147
		$tmp = null;
		#src/model/Clients.hx:51: characters 22-147
		if ($fields !== null) {
			#src/model/Clients.hx:51: characters 53-128
			$_this = \Array_hx::wrap(explode(",", $fields));
			#src/model/Clients.hx:51: characters 53-128
			$result = [];
			#src/model/Clients.hx:51: characters 53-128
			$_g1 = 0;
			#src/model/Clients.hx:51: characters 53-128
			$_g = $_this->length;
			#src/model/Clients.hx:51: characters 53-128
			while ($_g1 < $_g) {
				#src/model/Clients.hx:51: characters 53-128
				$_g1 = $_g1 + 1;
				#src/model/Clients.hx:51: characters 53-128
				$i = $_g1 - 1;
				#src/model/Clients.hx:51: characters 53-128
				$result[] = \S::$my->real_escape_string($_this->arr[$i]);
			}

			#src/model/Clients.hx:51: characters 22-147
			$tmp = $this->fieldFormat(\Array_hx::wrap($result)->join(","));
		} else {
			#src/model/Clients.hx:51: characters 22-147
			$tmp = "*";
		}
		#src/model/Clients.hx:51: characters 3-148
		$sb->add("SELECT " . ($tmp??'null'));
		#src/model/Clients.hx:52: characters 24-49
		$v = ($q->data["table"] ?? null);
		#src/model/Clients.hx:52: characters 3-76
		$qTable = (($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? ($q->data["table"] ?? null) : $this->table);
		#src/model/Clients.hx:53: characters 26-54
		$v1 = ($q->data["joincond"] ?? null);
		#src/model/Clients.hx:53: characters 3-83
		$joinCond = (($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? ($q->data["joincond"] ?? null) : null);
		#src/model/Clients.hx:54: characters 27-56
		$v2 = ($q->data["jointable"] ?? null);
		#src/model/Clients.hx:54: characters 3-86
		$joinTable = (($v2 !== null) && !Boot::equal($v2, 0) && ($v2 !== "") ? ($q->data["jointable"] ?? null) : null);
		#src/model/Clients.hx:57: characters 3-32
		$filterTables = "";
		#src/model/Clients.hx:58: characters 7-33
		$v3 = ($q->data["filter"] ?? null);
		#src/model/Clients.hx:58: lines 58-64
		if (($v3 !== null) && !Boot::equal($v3, 0) && ($v3 !== "")) {
			#src/model/Clients.hx:60: characters 19-52
			$_this1 = ($q->data["filter_tables"] ?? null);
			#src/model/Clients.hx:60: characters 19-123
			$_this2 = \Array_hx::wrap(explode(",", $_this1));
			#src/model/Clients.hx:60: characters 19-123
			$result1 = [];
			#src/model/Clients.hx:60: characters 19-123
			$_g11 = 0;
			#src/model/Clients.hx:60: characters 19-123
			$_g2 = $_this2->length;
			#src/model/Clients.hx:60: characters 19-123
			while ($_g11 < $_g2) {
				#src/model/Clients.hx:60: characters 19-123
				$_g11 = $_g11 + 1;
				#src/model/Clients.hx:60: characters 19-123
				$i1 = $_g11 - 1;
				#src/model/Clients.hx:60: characters 19-123
				$result1[] = "fly_crm." . (\S::$my->real_escape_string($_this2->arr[$i1])??'null');
			}

			#src/model/Clients.hx:60: characters 4-133
			$filterTables = \Array_hx::wrap($result1)->join(",");
			#src/model/Clients.hx:61: characters 4-68
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			#src/model/Clients.hx:64: characters 4-54
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		#src/model/Clients.hx:66: lines 66-67
		if ($joinTable !== null) {
			#src/model/Clients.hx:67: characters 4-36
			$sb->add(" INNER JOIN " . ($joinTable??'null'));
		}
		#src/model/Clients.hx:68: lines 68-69
		if ($joinCond !== null) {
			#src/model/Clients.hx:69: characters 4-27
			$sb->add(" ON " . ($joinCond??'null'));
		}
		#src/model/Clients.hx:70: characters 3-37
		$where = ($q->data["where"] ?? null);
		#src/model/Clients.hx:71: lines 71-72
		if ($where !== null) {
			#src/model/Clients.hx:72: characters 4-34
			$this->buildCond($where, $sb, $phValues);
		}
		#src/model/Clients.hx:74: characters 7-33
		$v4 = ($q->data["filter"] ?? null);
		#src/model/Clients.hx:74: lines 74-84
		if (($v4 !== null) && !Boot::equal($v4, 0) && ($v4 !== "")) {
			#src/model/Clients.hx:76: characters 14-40
			$_this3 = ($q->data["filter"] ?? null);
			#src/model/Clients.hx:76: lines 76-77
			$_this4 = \Array_hx::wrap(explode(",", $_this3));
			#src/model/Clients.hx:76: lines 76-77
			$result2 = [];
			#src/model/Clients.hx:76: lines 76-77
			$_g12 = 0;
			#src/model/Clients.hx:76: lines 76-77
			$_g3 = $_this4->length;
			#src/model/Clients.hx:76: lines 76-77
			while ($_g12 < $_g3) {
				#src/model/Clients.hx:76: lines 76-77
				$_g12 = $_g12 + 1;
				#src/model/Clients.hx:76: lines 76-77
				$i2 = $_g12 - 1;
				#src/model/Clients.hx:76: lines 76-77
				$result2[] = "fly_crm." . (\S::$my->real_escape_string($_this4->arr[$i2])??'null');
			}

			#src/model/Clients.hx:76: lines 76-77
			$this->buildCond(\Array_hx::wrap($result2)->join(","), $sb, $phValues, false);
			#src/model/Clients.hx:79: lines 79-82
			if ($joinTable === "vicidial_users") {
				#src/model/Clients.hx:80: characters 18-122
				$_this5 = \Array_hx::wrap(explode(",", $filterTables));
				#src/model/Clients.hx:80: characters 18-122
				$result3 = [];
				#src/model/Clients.hx:80: characters 18-122
				$_g13 = 0;
				#src/model/Clients.hx:80: characters 18-122
				$_g4 = $_this5->length;
				#src/model/Clients.hx:80: characters 18-122
				while ($_g13 < $_g4) {
					#src/model/Clients.hx:80: characters 18-122
					$_g13 = $_g13 + 1;
					#src/model/Clients.hx:80: characters 18-122
					$i3 = $_g13 - 1;
					#src/model/Clients.hx:80: characters 18-122
					$result3[] = "AND " . ($_this5->arr[$i3]??'null') . ".client_id=vicidial_list.vendor_lead_code";
				}

				#src/model/Clients.hx:80: characters 5-133
				$sb->add(" " . (\Array_hx::wrap($result3)->join(" ")??'null'));
			} else {
				#src/model/Clients.hx:82: characters 18-109
				$_this6 = \Array_hx::wrap(explode(",", $filterTables));
				#src/model/Clients.hx:82: characters 18-109
				$result4 = [];
				#src/model/Clients.hx:82: characters 18-109
				$_g14 = 0;
				#src/model/Clients.hx:82: characters 18-109
				$_g5 = $_this6->length;
				#src/model/Clients.hx:82: characters 18-109
				while ($_g14 < $_g5) {
					#src/model/Clients.hx:82: characters 18-109
					$_g14 = $_g14 + 1;
					#src/model/Clients.hx:82: characters 18-109
					$i4 = $_g14 - 1;
					#src/model/Clients.hx:82: characters 18-109
					$result4[] = "AND " . ($_this6->arr[$i4]??'null') . ".client_id=clients.client_id";
				}

				#src/model/Clients.hx:82: characters 5-120
				$sb->add(" " . (\Array_hx::wrap($result4)->join(" ")??'null'));
			}
		}
		#src/model/Clients.hx:86: characters 3-42
		$groupParam = ($q->data["group"] ?? null);
		#src/model/Clients.hx:87: lines 87-88
		if ($groupParam !== null) {
			#src/model/Clients.hx:88: characters 4-30
			$this->buildGroup($groupParam, $sb);
		}
		#src/model/Clients.hx:90: characters 3-37
		$order = ($q->data["order"] ?? null);
		#src/model/Clients.hx:91: lines 91-92
		if ($order !== null) {
			#src/model/Clients.hx:92: characters 4-25
			$this->buildOrder($order, $sb);
		}
		#src/model/Clients.hx:93: characters 3-37
		$limit = ($q->data["limit"] ?? null);
		#src/model/Clients.hx:94: characters 3-45
		$this->buildLimit(($limit === null ? "15" : $limit), $sb);
		#src/model/Clients.hx:95: characters 3-42
		return $this->execute($sb->b, $phValues);
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function edit ($param) {
		#src/model/Clients.hx:128: characters 3-82
		$entry_list_id = \S::$my->real_escape_string(($param->data["entry_list_id"] ?? null));
		#src/model/Clients.hx:129: characters 3-54
		$fieldNames = new StringMap();
		#src/model/Clients.hx:131: characters 35-124
		$_g = new StringMap();
		#src/model/Clients.hx:131: characters 35-124
		$_g->data["buchungsanforderungID"] = "HIDDEN";
		#src/model/Clients.hx:131: characters 35-124
		$_g->data["Mandat-ID"] = "TEXT";
		#src/model/Clients.hx:131: characters 35-124
		$_g->data["Betrag"] = "TEXT";
		#src/model/Clients.hx:131: characters 35-124
		$_g->data["Termin"] = "TEXT";
		#src/model/Clients.hx:131: characters 3-125
		$typeMap = $_g;
		#src/model/Clients.hx:132: characters 38-110
		$_g1 = new StringMap();
		#src/model/Clients.hx:132: characters 38-110
		$_g1->data["anrede"] = "Frau,Frau\x0D\x0AHerr,Herr\x0D\x0AFamilie,Familie\x0D\x0AFirma,Firma";
		#src/model/Clients.hx:132: characters 3-111
		$optionsMap = $_g1;
		#src/model/Clients.hx:133: characters 3-66
		$eF = $this->getEditorFields();
		#src/model/Clients.hx:135: characters 3-41
		$keys = new NativeArrayIterator(array_map("strval", array_keys($eF->data)));
		#src/model/Clients.hx:136: characters 3-46
		$tableNames = new \Array_hx();
		#src/model/Clients.hx:137: characters 46-61
		$this1 = [];
		#src/model/Clients.hx:137: characters 46-61
		$tableFields_data = $this1;
		#src/model/Clients.hx:139: characters 3-8
		(Log::$trace)($param, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 139,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		#src/model/Clients.hx:140: lines 140-157
		while ($keys->hasNext()) {
			#src/model/Clients.hx:142: characters 4-31
			$k = $keys->next();
			#src/model/Clients.hx:144: characters 4-22
			$tableNames->arr[$tableNames->length] = $k;
			#src/model/Clients.hx:144: characters 4-22
			++$tableNames->length;

			#src/model/Clients.hx:145: characters 4-53
			$aFields = ($eF->data[$k] ?? null);
			#src/model/Clients.hx:147: characters 32-117
			$result = [];
			#src/model/Clients.hx:147: characters 32-117
			$_g11 = 0;
			#src/model/Clients.hx:147: characters 32-117
			$_g2 = $aFields->length;
			#src/model/Clients.hx:147: characters 32-117
			while ($_g11 < $_g2) {
				#src/model/Clients.hx:147: characters 32-117
				$_g11 = $_g11 + 1;
				#src/model/Clients.hx:147: characters 32-117
				$i = $_g11 - 1;
				#src/model/Clients.hx:147: characters 32-117
				$result[] = ($aFields->arr[$i]->data["field_label"] ?? null);
			}

			#src/model/Clients.hx:147: characters 4-118
			$cFields = \Array_hx::wrap($result);
			#src/model/Clients.hx:149: characters 4-31
			$tableFields_data[$k] = $cFields;
			#src/model/Clients.hx:150: lines 150-156
			$_g3 = 0;
			#src/model/Clients.hx:150: lines 150-156
			$_g21 = $cFields->length;
			#src/model/Clients.hx:150: lines 150-156
			while ($_g3 < $_g21) {
				#src/model/Clients.hx:150: lines 150-156
				$_g3 = $_g3 + 1;
				#src/model/Clients.hx:150: characters 9-10
				$f = $_g3 - 1;
				#src/model/Clients.hx:152: characters 5-61
				$value = (($aFields->arr[$f] ?? null)->data["field_name"] ?? null);
				#src/model/Clients.hx:152: characters 5-61
				$fieldNames->data[$cFields[$f]] = $value;

				#src/model/Clients.hx:153: lines 153-154
				if ((($aFields->arr[$f] ?? null)->data["field_options"] ?? null) !== null) {
					#src/model/Clients.hx:154: characters 6-65
					$value1 = (($aFields->arr[$f] ?? null)->data["field_options"] ?? null);
					#src/model/Clients.hx:154: characters 6-65
					$optionsMap->data[$cFields[$f]] = $value1;
				}
				#src/model/Clients.hx:155: characters 5-58
				$value2 = (($aFields->arr[$f] ?? null)->data["field_type"] ?? null);
				#src/model/Clients.hx:155: characters 5-58
				$typeMap->data[$cFields[$f]] = $value2;

			}

		}
		#src/model/Clients.hx:158: characters 3-8
		(Log::$trace)($tableNames, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 158,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		#src/model/Clients.hx:160: characters 3-65
		$editTables = new StringMap();
		#src/model/Clients.hx:161: characters 3-18
		$ti = 0;
		#src/model/Clients.hx:162: characters 3-37
		$tableNames->remove("vicidial_list");
		#src/model/Clients.hx:163: characters 3-44
		$tableNames->arr[$tableNames->length] = "buchungs_anforderungen";
		#src/model/Clients.hx:163: characters 3-44
		++$tableNames->length;

		#src/model/Clients.hx:164: lines 164-204
		$_g22 = 0;
		#src/model/Clients.hx:164: lines 164-204
		while ($_g22 < $tableNames->length) {
			#src/model/Clients.hx:164: characters 8-13
			$table = ($tableNames->arr[$_g22] ?? null);
			#src/model/Clients.hx:164: lines 164-204
			$_g22 = $_g22 + 1;
			#src/model/Clients.hx:166: characters 4-46
			$p = new StringMap();
			#src/model/Clients.hx:167: characters 4-39
			$sb = new \StringBuf();
			#src/model/Clients.hx:168: characters 4-53
			$phValues = new \Array_hx();
			#src/model/Clients.hx:169: characters 4-48
			$value3 = ($param->data["primary_id"] ?? null);
			#src/model/Clients.hx:169: characters 4-48
			$p->data["primary_id"] = $value3;

			#src/model/Clients.hx:171: lines 171-203
			switch ($table) {
				case "buchungs_anforderungen":
					#src/model/Clients.hx:183: characters 5-38
					$p->data["table"] = "fly_crm." . ($table??'null');
					#src/model/Clients.hx:184: characters 21-79
					$_this = Clients::$pay_history_fields;
					#src/model/Clients.hx:184: characters 21-79
					$result1 = [];
					#src/model/Clients.hx:184: characters 21-79
					$_g12 = 0;
					#src/model/Clients.hx:184: characters 21-79
					$_g4 = $_this->length;
					#src/model/Clients.hx:184: characters 21-79
					while ($_g12 < $_g4) {
						#src/model/Clients.hx:184: characters 21-79
						$_g12 = $_g12 + 1;
						#src/model/Clients.hx:184: characters 21-79
						$i1 = $_g12 - 1;
						#src/model/Clients.hx:184: characters 21-79
						$result1[] = "`" . ($_this->arr[$i1]??'null') . "`";
					}

					#src/model/Clients.hx:184: characters 5-90
					$value4 = \Array_hx::wrap($result1)->join(",");
					#src/model/Clients.hx:184: characters 5-90
					$p->data["fields"] = $value4;

					#src/model/Clients.hx:185: characters 5-87
					$value5 = "`Mandat-ID`|LIKE|" . (\Std::parseInt(($param->data["client_id"] ?? null))??'null') . "_1";
					#src/model/Clients.hx:185: characters 5-87
					$p->data["where"] = $value5;

					#src/model/Clients.hx:187: characters 5-27
					$p->data["limit"] = "2400";
					#src/model/Clients.hx:188: characters 5-89
					$value6 = Lib::hashOfAssociativeArray($this->doSelect($p, $sb, $phValues));
					#src/model/Clients.hx:188: characters 5-89
					$editTables->data["pay_history"] = $value6;

					break;
				case "clients":
					#src/model/Clients.hx:173: characters 5-36
					$p->data["table"] = "vicidial_list";
					#src/model/Clients.hx:174: characters 5-43
					$p->data["jointable"] = "fly_crm." . ($table??'null');
					#src/model/Clients.hx:176: characters 5-45
					$value7 = ($param->data["joincond"] ?? null);
					#src/model/Clients.hx:176: characters 5-45
					$p->data["joincond"] = $value7;

					#src/model/Clients.hx:177: lines 177-178
					$value8 = (\Std::string(HxDynamicStr::wrap(($param->data["fields"] ?? null))->split(",")->map(function ($f1) {
						#src/model/Clients.hx:177: characters 82-140
						if (HxString::indexOf($f1, "vicidial_list.") !== 0) {
							#src/model/Clients.hx:177: characters 117-137
							return "vicidial_list." . ($f1??'null');
						} else {
							#src/model/Clients.hx:177: characters 138-139
							return $f1;
						}
					})->join(","))??'null') . ",";
					#src/model/Clients.hx:178: characters 14-83
					$_this1 = ($tableFields_data[$table] ?? null);
					#src/model/Clients.hx:178: characters 14-83
					$result2 = [];
					#src/model/Clients.hx:178: characters 14-83
					$_g13 = 0;
					#src/model/Clients.hx:178: characters 14-83
					$_g5 = $_this1->length;
					#src/model/Clients.hx:178: characters 14-83
					while ($_g13 < $_g5) {
						#src/model/Clients.hx:178: characters 14-83
						$_g13 = $_g13 + 1;
						#src/model/Clients.hx:178: characters 14-83
						$i2 = $_g13 - 1;
						#src/model/Clients.hx:178: characters 14-83
						$result2[] = ($table??'null') . "." . ($_this1->arr[$i2]??'null');
					}

					#src/model/Clients.hx:177: lines 177-178
					$value9 = ($value8??'null') . (\Array_hx::wrap($result2)->join(",")??'null');
					#src/model/Clients.hx:177: lines 177-178
					$p->data["fields"] = $value9;

					#src/model/Clients.hx:179: characters 5-82
					$value10 = "vicidial_list.lead_id|" . (\Std::parseInt(($param->data["lead_id"] ?? null))??'null');
					#src/model/Clients.hx:179: characters 5-82
					$p->data["where"] = $value10;

					#src/model/Clients.hx:180: characters 5-79
					$value11 = Lib::hashOfAssociativeArray($this->doJoin($p, $sb, $phValues));
					#src/model/Clients.hx:180: characters 5-79
					$editTables->data[$table] = $value11;

					#src/model/Clients.hx:181: characters 5-10
					(Log::$trace)($editTables, new HxAnon([
						"fileName" => "src/model/Clients.hx",
						"lineNumber" => 181,
						"className" => "model.Clients",
						"methodName" => "edit",
					]));
					break;
				default:
					#src/model/Clients.hx:192: characters 5-71
					$p->data["table"] = ($table === "vicidial_list" ? $table : "fly_crm." . ($table??'null'));
					#src/model/Clients.hx:193: characters 5-54
					$value12 = ($tableFields_data[$table] ?? null)->join(",");
					#src/model/Clients.hx:193: characters 5-54
					$p->data["fields"] = $value12;

					#src/model/Clients.hx:194: lines 194-197
					if ($table === "vicidial_list") {
						#src/model/Clients.hx:195: characters 5-80
						$value13 = "vendor_lead_code|" . (\Std::parseInt(($param->data["client_id"] ?? null))??'null');
						#src/model/Clients.hx:195: characters 5-80
						$p->data["where"] = $value13;
					} else {
						#src/model/Clients.hx:197: characters 5-73
						$value14 = "client_id|" . (\Std::parseInt(($param->data["client_id"] ?? null))??'null');
						#src/model/Clients.hx:197: characters 5-73
						$p->data["where"] = $value14;
					}
					#src/model/Clients.hx:198: characters 5-81
					$value15 = Lib::hashOfAssociativeArray($this->doSelect($p, $sb, $phValues));
					#src/model/Clients.hx:198: characters 5-81
					$editTables->data[$table] = $value15;

					#src/model/Clients.hx:201: lines 201-202
					if ($table === "pay_source") {
						#src/model/Clients.hx:202: characters 5-10
						(Log::$trace)(($tableFields_data[$table] ?? null), new HxAnon([
							"fileName" => "src/model/Clients.hx",
							"lineNumber" => 202,
							"className" => "model.Clients",
							"methodName" => "edit",
						]));
					}
					break;
			}
		}

		#src/model/Clients.hx:205: characters 3-82
		$recordings = $this->getRecordings(\Std::parseInt(($param->data["lead_id"] ?? null)));
		#src/model/Clients.hx:206: characters 67-86
		$value16 = new ClientHistory();
		#src/model/Clients.hx:207: characters 4-109
		$_g23 = new StringMap();
		#src/model/Clients.hx:207: characters 4-109
		$value17 = "reason|AC01 AC04 AC06 MD06 MS03,m_ID|" . (\Std::parseInt(($param->data["client_id"] ?? null))??'null');
		#src/model/Clients.hx:207: characters 4-109
		$_g23->data["where"] = $value17;

		#src/model/Clients.hx:207: characters 4-109
		$_g23->data["limit"] = 150;
		#src/model/Clients.hx:206: lines 206-207
		$value18 = Lib::hashOfAssociativeArray(Boot::typedCast(Boot::getClass('Dynamic'), $value16->findClient($_g23, true)));
		#src/model/Clients.hx:206: lines 206-207
		$editTables->data["konto_auszug"] = $value18;

		#src/model/Clients.hx:209: characters 3-7
		$this->data = new HxAnon([
			"fieldNames" => $fieldNames->data,
			"editData" => $editTables->data,
			"typeMap" => $typeMap->data,
			"optionsMap" => $optionsMap->data,
			"recordings" => $recordings,
		]);
		#src/model/Clients.hx:216: characters 35-50
		$this2 = [];
		#src/model/Clients.hx:216: characters 35-50
		$userMap_data = $this2;
		#src/model/Clients.hx:217: characters 3-38
		$sb1 = new \StringBuf();
		#src/model/Clients.hx:218: characters 3-52
		$phValues1 = new \Array_hx();
		#src/model/Clients.hx:219: characters 29-44
		$this3 = [];
		#src/model/Clients.hx:219: characters 29-44
		$p_data = $this3;
		#src/model/Clients.hx:220: characters 3-44
		$p_data["table"] = "asterisk.vicidial_users";
		#src/model/Clients.hx:221: characters 3-36
		$p_data["fields"] = "user,full_name";
		#src/model/Clients.hx:222: characters 3-40
		$p_data["where"] = "user_group|AGENTS_A";
		#src/model/Clients.hx:223: characters 3-117
		$owner = \Std::parseInt((Lib::hashOfAssociativeArray((($editTables->data["clients"] ?? null)->data["0"] ?? null))->data["owner"] ?? null));
		#src/model/Clients.hx:224: characters 3-8
		(Log::$trace)($owner, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 224,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		#src/model/Clients.hx:226: characters 3-15
		$this->data->userMap = (new Users())->get_info();
		#src/model/Clients.hx:228: characters 3-23
		return $this->json_encode();
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		#src/model/Clients.hx:110: characters 3-38
		$sb = new \StringBuf();
		#src/model/Clients.hx:111: characters 3-52
		$phValues = new \Array_hx();
		#src/model/Clients.hx:112: characters 3-8
		(Log::$trace)($param, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 112,
			"className" => "model.Clients",
			"methodName" => "find",
		]));
		#src/model/Clients.hx:113: characters 3-50
		$count = $this->countJoin($param, $sb, $phValues);
		#src/model/Clients.hx:115: characters 3-23
		$sb = new \StringBuf();
		#src/model/Clients.hx:116: characters 3-25
		$phValues = new \Array_hx();
		#src/model/Clients.hx:117: characters 3-8
		(Log::$trace)((($param->data["joincond"] ?? null)??'null') . " count:" . ($count??'null') . ":" . (($param->data["page"] ?? null)??'null') . ": " . (((array_key_exists("page", $param->data) ? "Y" : "N"))??'null'), new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 117,
			"className" => "model.Clients",
			"methodName" => "find",
		]));
		#src/model/Clients.hx:120: characters 9-71
		$tmp = (array_key_exists("page", $param->data) ? \Std::parseInt(($param->data["page"] ?? null)) : 1);
		#src/model/Clients.hx:118: lines 118-122
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp,
			"rows" => $this->doJoin($param, $sb, $phValues),
		]);
		#src/model/Clients.hx:123: characters 3-23
		return $this->json_encode();
	}

	/**
	 * @param string $list_id
	 * 
	 * @return \Array_hx
	 */
	public function getCustomFields ($list_id) {
		#src/model/Clients.hx:233: characters 3-38
		$sb = new \StringBuf();
		#src/model/Clients.hx:234: characters 3-52
		$phValues = new \Array_hx();
		#src/model/Clients.hx:235: characters 3-49
		$param = new StringMap();
		#src/model/Clients.hx:236: characters 3-46
		$param->data["table"] = "vicidial_lists_fields";
		#src/model/Clients.hx:237: characters 3-68
		$value = "list_id|" . (\S::$my->real_escape_string($list_id)??'null');
		#src/model/Clients.hx:237: characters 3-68
		$param->data["where"] = $value;

		#src/model/Clients.hx:238: characters 3-102
		$param->data["fields"] = "field_name,field_label,field_type,field_options,field_required,field_default";
		#src/model/Clients.hx:239: characters 3-47
		$param->data["order"] = "field_rank,field_order";
		#src/model/Clients.hx:240: characters 3-28
		$param->data["limit"] = "100";
		#src/model/Clients.hx:242: characters 3-80
		$cFields = \Array_hx::wrap($this->doSelect($param, $sb, $phValues));
		#src/model/Clients.hx:243: characters 3-8
		(Log::$trace)($cFields->length, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 243,
			"className" => "model.Clients",
			"methodName" => "getCustomFields",
		]));
		#src/model/Clients.hx:244: characters 3-50
		$ret = new \Array_hx();
		#src/model/Clients.hx:245: lines 245-251
		$_g = 0;
		#src/model/Clients.hx:245: lines 245-251
		while ($_g < $cFields->length) {
			#src/model/Clients.hx:245: characters 8-10
			$cf = ($cFields->arr[$_g] ?? null);
			#src/model/Clients.hx:245: lines 245-251
			$_g = $_g + 1;
			#src/model/Clients.hx:248: characters 4-65
			$field = Lib::hashOfAssociativeArray($cf);
			#src/model/Clients.hx:250: characters 4-19
			$ret->arr[$ret->length] = $field;
			#src/model/Clients.hx:250: characters 4-19
			++$ret->length;

		}

		#src/model/Clients.hx:253: characters 3-13
		return $ret;
	}

	/**
	 * @param int $lead_id
	 * 
	 * @return mixed
	 */
	public function getRecordings ($lead_id) {
		#src/model/Clients.hx:258: lines 258-259
		$records = \Array_hx::wrap($this->query("SELECT location ,  start_time, length_in_sec FROM recording_log WHERE lead_id = " . (\Std::string($lead_id)??'null') . " ORDER BY start_time DESC"));
		#src/model/Clients.hx:260: characters 3-25
		$rc = $this->num_rows;
		#src/model/Clients.hx:261: characters 3-8
		(Log::$trace)("" . ($rc??'null') . " == " . ($records->length??'null'), new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 261,
			"className" => "model.Clients",
			"methodName" => "getRecordings",
		]));
		#src/model/Clients.hx:263: characters 25-126
		$result = [];
		#src/model/Clients.hx:263: characters 25-126
		$_g1 = 0;
		#src/model/Clients.hx:263: characters 25-126
		$_g = $records->length;
		#src/model/Clients.hx:263: characters 25-126
		while ($_g1 < $_g) {
			#src/model/Clients.hx:263: characters 25-126
			$_g1 = $_g1 + 1;
			#src/model/Clients.hx:263: characters 25-126
			$i = $_g1 - 1;
			#src/model/Clients.hx:263: characters 25-126
			if (Boot::dynamicField(Lib::objectOfAssociativeArray($records->arr[$i]), 'length_in_sec') > 60) {
				#src/model/Clients.hx:263: characters 25-126
				$result[] = $records->arr[$i];
			}
		}

		#src/model/Clients.hx:263: characters 10-127
		return \Array_hx::wrap($result)->arr;
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save ($q) {
		#src/model/Clients.hx:326: characters 3-48
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		#src/model/Clients.hx:330: characters 3-47
		$ref_id = false;
		#src/model/Clients.hx:331: characters 7-26
		$ref_id = $this->saveLog($q);
		#src/model/Clients.hx:331: lines 331-487
		if ($ref_id) {
			#src/model/Clients.hx:333: characters 4-59
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			#src/model/Clients.hx:336: characters 4-74
			$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
			#src/model/Clients.hx:337: characters 4-41
			$sql = new \StringBuf();
			#src/model/Clients.hx:338: characters 4-34
			$sql->add("UPDATE " . ($cTable??'null') . " SET ");
			#src/model/Clients.hx:339: characters 4-43
			$cFields = \S::tableFields("" . ($cTable??'null'));
			#src/model/Clients.hx:340: characters 4-9
			(Log::$trace)("" . ($cTable??'null') . " fields:" . ($cFields->toString()??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 340,
				"className" => "model.Clients",
				"methodName" => "save",
			]));
			#src/model/Clients.hx:341: characters 4-29
			$cFields->remove("lead_id");
			#src/model/Clients.hx:342: characters 4-30
			$cFields->remove($primary_id);
			#src/model/Clients.hx:343: characters 4-30
			$bindTypes = "";
			#src/model/Clients.hx:344: characters 4-39
			$values2bind = null;
			#src/model/Clients.hx:345: characters 4-18
			$i = 0;
			#src/model/Clients.hx:346: characters 4-126
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			#src/model/Clients.hx:347: characters 4-41
			$sets = new \Array_hx();
			#src/model/Clients.hx:348: lines 348-361
			$_g = 0;
			#src/model/Clients.hx:348: lines 348-361
			while ($_g < $cFields->length) {
				#src/model/Clients.hx:348: characters 9-10
				$c = ($cFields->arr[$_g] ?? null);
				#src/model/Clients.hx:348: lines 348-361
				$_g = $_g + 1;
				#src/model/Clients.hx:350: characters 5-32
				$val = ($q->data[$c] ?? null);
				#src/model/Clients.hx:351: characters 5-10
				$tmp = Log::$trace;
				#src/model/Clients.hx:351: characters 11-56
				$tmp1 = ($c??'null') . ":" . ((Clients::$custom_fields_map->data[$c] ?? null)??'null') . ((":" . (\Std::string($val)??'null') . " ")??'null');
				#src/model/Clients.hx:351: characters 59-94
				$v = (Clients::$custom_fields_map->data[$c] ?? null);
				#src/model/Clients.hx:351: characters 5-10
				$tmp(($tmp1??'null') . (\Std::string(($v !== null) && !Boot::equal($v, 0) && ($v !== ""))??'null'), new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 351,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				#src/model/Clients.hx:353: lines 353-360
				if ($val !== null) {
					#src/model/Clients.hx:356: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:356: characters 6-60
					$values2bind[$i - 1] = (Boot::is($val, Boot::getClass('String')) ? $val : $val[0]);
					#src/model/Clients.hx:357: characters 6-44
					$type = ($dbFieldTypes->data[$c] ?? null);
					#src/model/Clients.hx:358: characters 20-35
					$v1 = $type;
					#src/model/Clients.hx:358: characters 6-50
					$bindTypes = ($bindTypes??'null') . (((($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? $type : "s"))??'null');
					#src/model/Clients.hx:359: characters 18-53
					$v2 = (Clients::$custom_fields_map->data[$c] ?? null);
					#src/model/Clients.hx:359: characters 17-86
					$x = (($v2 !== null) && !Boot::equal($v2, 0) && ($v2 !== "") ? (Clients::$custom_fields_map->data[$c] ?? null) : $c);
					#src/model/Clients.hx:359: characters 6-94
					$sets->arr[$sets->length] = ($x??'null') . "=?";
					#src/model/Clients.hx:359: characters 6-94
					++$sets->length;

				}
			}

			#src/model/Clients.hx:362: characters 4-39
			$customFields2Save = false;
			#src/model/Clients.hx:363: characters 4-29
			$success = false;
			#src/model/Clients.hx:364: characters 4-33
			$stmt = \S::$my->stmt_init();
			#src/model/Clients.hx:365: lines 365-373
			if ($sets->length > 0) {
				#src/model/Clients.hx:367: characters 5-29
				$customFields2Save = true;
				#src/model/Clients.hx:368: characters 5-28
				$sql->add($sets->join(","));
				#src/model/Clients.hx:369: characters 5-39
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				#src/model/Clients.hx:370: characters 5-10
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 370,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				#src/model/Clients.hx:371: characters 5-43
				$success = $stmt->prepare($sql->b);
			} else {
				#src/model/Clients.hx:373: characters 9-23
				$success = true;
			}
			#src/model/Clients.hx:374: lines 374-378
			if (!$success) {
				#src/model/Clients.hx:376: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 376,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				#src/model/Clients.hx:377: characters 5-17
				return false;
			}
			#src/model/Clients.hx:379: lines 379-384
			if ($customFields2Save) {
				#src/model/Clients.hx:381: characters 5-76
				$success = myBindParam($stmt, $values2bind, $bindTypes);
			} else {
				#src/model/Clients.hx:384: characters 5-19
				$success = true;
			}
			#src/model/Clients.hx:386: lines 386-485
			if ($success) {
				#src/model/Clients.hx:388: lines 388-397
				if ($customFields2Save) {
					#src/model/Clients.hx:390: characters 6-30
					$success = $stmt->execute();
					#src/model/Clients.hx:391: lines 391-395
					if (!$success) {
						#src/model/Clients.hx:393: characters 7-12
						(Log::$trace)($stmt->error, new HxAnon([
							"fileName" => "src/model/Clients.hx",
							"lineNumber" => 393,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
						#src/model/Clients.hx:394: characters 7-19
						return false;
					}
				}
				#src/model/Clients.hx:398: characters 5-26
				$sql = new \StringBuf();
				#src/model/Clients.hx:399: characters 5-39
				$uFields = Clients::$vicdial_list_fields;
				#src/model/Clients.hx:400: characters 5-31
				$uFields->remove($primary_id);
				#src/model/Clients.hx:401: characters 5-19
				$bindTypes = "";
				#src/model/Clients.hx:402: characters 5-23
				$values2bind = null;
				#src/model/Clients.hx:403: characters 5-10
				$i = 0;
				#src/model/Clients.hx:404: characters 5-41
				$sql->add("UPDATE vicidial_list SET ");
				#src/model/Clients.hx:405: characters 5-24
				$sets = new \Array_hx();
				#src/model/Clients.hx:406: lines 406-417
				$_g1 = 0;
				#src/model/Clients.hx:406: lines 406-417
				while ($_g1 < $uFields->length) {
					#src/model/Clients.hx:406: characters 10-11
					$c1 = ($uFields->arr[$_g1] ?? null);
					#src/model/Clients.hx:406: lines 406-417
					$_g1 = $_g1 + 1;
					#src/model/Clients.hx:408: characters 6-33
					$val1 = ($q->data[$c1] ?? null);
					#src/model/Clients.hx:409: lines 409-416
					if ($val1 !== null) {
						#src/model/Clients.hx:412: characters 19-22
						$i = $i + 1;
						#src/model/Clients.hx:412: characters 7-61
						$values2bind[$i - 1] = (Boot::is($val1, Boot::getClass('String')) ? $val1 : $val1[0]);
						#src/model/Clients.hx:413: characters 7-45
						$type1 = ($dbFieldTypes->data[$c1] ?? null);
						#src/model/Clients.hx:414: characters 21-36
						$v3 = $type1;
						#src/model/Clients.hx:414: characters 7-51
						$bindTypes = ($bindTypes??'null') . (((($v3 !== null) && !Boot::equal($v3, 0) && ($v3 !== "") ? $type1 : "s"))??'null');
						#src/model/Clients.hx:415: characters 7-26
						$sets->arr[$sets->length] = ($c1??'null') . "=?";
						#src/model/Clients.hx:415: characters 7-26
						++$sets->length;

					}
				}

				#src/model/Clients.hx:418: characters 17-20
				$i = $i + 1;
				#src/model/Clients.hx:418: characters 5-28
				$values2bind[$i - 1] = "XX";
				#src/model/Clients.hx:419: characters 5-21
				$bindTypes = ($bindTypes??'null') . "s";
				#src/model/Clients.hx:420: characters 5-25
				$sets->arr[$sets->length] = "state=?";
				#src/model/Clients.hx:420: characters 5-25
				++$sets->length;

				#src/model/Clients.hx:421: lines 421-451
				if ((($q->data["status"] ?? null) === "QCOK") || (($q->data["status"] ?? null) === "QCBAD")) {
					#src/model/Clients.hx:423: characters 6-30
					$list_id = 10000;
					#src/model/Clients.hx:424: lines 424-436
					if (($q->data["status"] ?? null) === "QCOK") {
						#src/model/Clients.hx:426: characters 7-61
						$mID = \Std::parseInt(($q->data["vendor_lead_code"] ?? null));
						#src/model/Clients.hx:427: lines 427-433
						if ($mID === null) {
							#src/model/Clients.hx:429: characters 8-29
							$mID = \S::newMemberID();
							#src/model/Clients.hx:430: characters 20-23
							$i = $i + 1;
							#src/model/Clients.hx:430: characters 8-30
							$values2bind[$i - 1] = $mID;
							#src/model/Clients.hx:431: characters 8-24
							$bindTypes = ($bindTypes??'null') . "s";
							#src/model/Clients.hx:432: characters 8-39
							$sets->arr[$sets->length] = "vendor_lead_code=?";
							#src/model/Clients.hx:432: characters 8-39
							++$sets->length;

						}
					} else {
						#src/model/Clients.hx:436: characters 7-21
						$list_id = 1800;
					}
					#src/model/Clients.hx:438: characters 6-56
					$entry_list_id = ($q->data["entry_list_id"] ?? null);
					#src/model/Clients.hx:439: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:439: characters 6-40
					$values2bind[$i - 1] = ($q->data["status"] ?? null);
					#src/model/Clients.hx:440: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/Clients.hx:441: characters 6-29
					$sets->arr[$sets->length] = "`status`=?";
					#src/model/Clients.hx:441: characters 6-29
					++$sets->length;

					#src/model/Clients.hx:442: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:442: characters 6-32
					$values2bind[$i - 1] = $list_id;
					#src/model/Clients.hx:443: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/Clients.hx:444: characters 6-28
					$sets->arr[$sets->length] = "list_id=?";
					#src/model/Clients.hx:444: characters 6-28
					++$sets->length;

					#src/model/Clients.hx:445: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:445: characters 6-38
					$values2bind[$i - 1] = $entry_list_id;
					#src/model/Clients.hx:446: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/Clients.hx:447: characters 6-34
					$sets->arr[$sets->length] = "entry_list_id=?";
					#src/model/Clients.hx:447: characters 6-34
					++$sets->length;

					#src/model/Clients.hx:448: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:448: characters 6-39
					$values2bind[$i - 1] = ($q->data["owner"] ?? null);
					#src/model/Clients.hx:449: characters 6-22
					$bindTypes = ($bindTypes??'null') . "s";
					#src/model/Clients.hx:450: characters 6-26
					$sets->arr[$sets->length] = "owner=?";
					#src/model/Clients.hx:450: characters 6-26
					++$sets->length;

				}
				#src/model/Clients.hx:452: characters 5-28
				$sql->add($sets->join(","));
				#src/model/Clients.hx:453: characters 5-39
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				#src/model/Clients.hx:454: characters 5-34
				$stmt1 = \S::$my->stmt_init();
				#src/model/Clients.hx:455: characters 5-10
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 455,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				#src/model/Clients.hx:456: characters 5-53
				$success1 = $stmt1->prepare($sql->b);
				#src/model/Clients.hx:457: lines 457-461
				if (!$success1) {
					#src/model/Clients.hx:459: characters 6-11
					(Log::$trace)($stmt1->error, new HxAnon([
						"fileName" => "src/model/Clients.hx",
						"lineNumber" => 459,
						"className" => "model.Clients",
						"methodName" => "save",
					]));
					#src/model/Clients.hx:460: characters 6-18
					return false;
				}
				#src/model/Clients.hx:464: characters 5-76
				$success1 = myBindParam($stmt1, $values2bind, $bindTypes);
				#src/model/Clients.hx:465: characters 5-10
				(Log::$trace)("success:" . (\Std::string($success1)??'null'), new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 465,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				#src/model/Clients.hx:466: lines 466-484
				if ($success1) {
					#src/model/Clients.hx:468: characters 6-30
					$success1 = $stmt1->execute();
					#src/model/Clients.hx:469: lines 469-473
					if (!$success1) {
						#src/model/Clients.hx:471: characters 7-12
						(Log::$trace)($stmt1->error, new HxAnon([
							"fileName" => "src/model/Clients.hx",
							"lineNumber" => 471,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
						#src/model/Clients.hx:472: characters 7-19
						return false;
					}
					#src/model/Clients.hx:474: lines 474-481
					if (!$this->saveClientData($q)) {
						#src/model/Clients.hx:476: characters 7-12
						(Log::$trace)("oops:" . (\S::$my->error??'null'), new HxAnon([
							"fileName" => "src/model/Clients.hx",
							"lineNumber" => 476,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
					} else {
						#src/model/Clients.hx:480: characters 7-41
						return $this->saveLog($q, $ref_id) !== false;
					}
				} else {
					#src/model/Clients.hx:484: characters 6-11
					(Log::$trace)("oops:" . (\S::$my->error??'null'), new HxAnon([
						"fileName" => "src/model/Clients.hx",
						"lineNumber" => 484,
						"className" => "model.Clients",
						"methodName" => "save",
					]));
				}
			}
		}
		#src/model/Clients.hx:488: characters 3-15
		return false;
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function saveClientData ($q) {
		#src/model/Clients.hx:506: characters 3-37
		$clientID = ($q->data["client_id"] ?? null);
		#src/model/Clients.hx:507: characters 3-62
		$log_id = $this->saveClientDataLog($q);
		#src/model/Clients.hx:508: lines 508-509
		if (($clientID === null) || !$log_id) {
			#src/model/Clients.hx:509: characters 4-16
			return false;
		}
		#src/model/Clients.hx:512: characters 3-39
		$sql = new \StringBuf();
		#src/model/Clients.hx:513: characters 3-46
		$uFields = Clients::$clients_fields;
		#src/model/Clients.hx:514: characters 3-30
		$uFields->remove("client_id");
		#src/model/Clients.hx:515: characters 3-29
		$bindTypes = "";
		#src/model/Clients.hx:516: characters 3-38
		$values2bind = null;
		#src/model/Clients.hx:517: characters 3-17
		$i = 0;
		#src/model/Clients.hx:518: characters 3-125
		$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
		#src/model/Clients.hx:519: characters 3-40
		$sets = new \Array_hx();
		#src/model/Clients.hx:520: characters 3-41
		$sql->add("UPDATE fly_crm.clients SET ");
		#src/model/Clients.hx:521: lines 521-532
		$_g = 0;
		#src/model/Clients.hx:521: lines 521-532
		while ($_g < $uFields->length) {
			#src/model/Clients.hx:521: characters 8-9
			$c = ($uFields->arr[$_g] ?? null);
			#src/model/Clients.hx:521: lines 521-532
			$_g = $_g + 1;
			#src/model/Clients.hx:523: characters 4-31
			$val = ($q->data[$c] ?? null);
			#src/model/Clients.hx:524: lines 524-531
			if ($val !== null) {
				#src/model/Clients.hx:527: characters 17-20
				$i = $i + 1;
				#src/model/Clients.hx:527: characters 5-59
				$values2bind[$i - 1] = (Boot::is($val, Boot::getClass('String')) ? $val : $val[0]);
				#src/model/Clients.hx:528: characters 5-43
				$type = ($dbFieldTypes->data[$c] ?? null);
				#src/model/Clients.hx:529: characters 19-34
				$v = $type;
				#src/model/Clients.hx:529: characters 5-49
				$bindTypes = ($bindTypes??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? $type : "s"))??'null');
				#src/model/Clients.hx:530: characters 5-24
				$sets->arr[$sets->length] = ($c??'null') . "=?";
				#src/model/Clients.hx:530: characters 5-24
				++$sets->length;

			}
		}

		#src/model/Clients.hx:533: lines 533-536
		if ($sets->length === 0) {
			#src/model/Clients.hx:535: characters 4-15
			return true;
		}
		#src/model/Clients.hx:537: characters 3-26
		$sql->add($sets->join(","));
		#src/model/Clients.hx:538: characters 3-40
		$sql->add(" WHERE client_id=" . ($clientID??'null'));
		#src/model/Clients.hx:539: characters 3-32
		$stmt = \S::$my->stmt_init();
		#src/model/Clients.hx:540: characters 3-8
		(Log::$trace)($sql->b, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 540,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		#src/model/Clients.hx:541: characters 3-51
		$success = $stmt->prepare($sql->b);
		#src/model/Clients.hx:542: lines 542-546
		if (!$success) {
			#src/model/Clients.hx:544: characters 4-9
			(Log::$trace)($stmt->error, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 544,
				"className" => "model.Clients",
				"methodName" => "saveClientData",
			]));
			#src/model/Clients.hx:545: characters 4-16
			return false;
		}
		#src/model/Clients.hx:548: characters 3-8
		(Log::$trace)($values2bind, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 548,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		#src/model/Clients.hx:549: characters 3-74
		$success = myBindParam($stmt, $values2bind, $bindTypes);
		#src/model/Clients.hx:550: characters 3-8
		(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 550,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		#src/model/Clients.hx:551: lines 551-560
		if ($success) {
			#src/model/Clients.hx:553: characters 4-28
			$success = $stmt->execute();
			#src/model/Clients.hx:554: lines 554-558
			if (!$success) {
				#src/model/Clients.hx:556: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 556,
					"className" => "model.Clients",
					"methodName" => "saveClientData",
				]));
				#src/model/Clients.hx:557: characters 5-17
				return false;
			}
			#src/model/Clients.hx:559: characters 4-46
			return $this->saveClientDataLog($q, $log_id) !== false;
		}
		#src/model/Clients.hx:561: characters 3-15
		return false;
	}

	/**
	 * @param StringMap $q
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function saveClientDataLog ($q, $ref_id = 0) {
		#src/model/Clients.hx:492: lines 492-502
		if ($ref_id === null) {
			#src/model/Clients.hx:492: lines 492-502
			$ref_id = 0;
		}
		#src/model/Clients.hx:493: characters 3-37
		$clientID = ($q->data["client_id"] ?? null);
		#src/model/Clients.hx:494: characters 3-28
		$user = \S::$user;
		#src/model/Clients.hx:495: characters 3-407
		$res = \S::$my->query("INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,anrede,namenszusatz,co_field,storno_grund,birth_date,old_active," . ($user??'null') . " AS log_user,NULL AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . ($clientID??'null'));
		#src/model/Clients.hx:496: characters 8-22
		$v = $res;
		#src/model/Clients.hx:496: lines 496-500
		if (!(($v !== null) && !Boot::equal($v, 0) && ($v !== ""))) {
			#src/model/Clients.hx:498: characters 4-9
			(Log::$trace)("failed to: INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active," . ($user??'null') . " AS log_user,NULL AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . ($clientID??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 498,
				"className" => "model.Clients",
				"methodName" => "saveClientDataLog",
			]));
			#src/model/Clients.hx:499: characters 4-16
			return false;
		}
		#src/model/Clients.hx:501: characters 3-29
		return \S::$my->insert_id;
	}

	/**
	 * @param StringMap $q
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function saveLog ($q, $ref_id = 0) {
		#src/model/Clients.hx:267: lines 267-290
		if ($ref_id === null) {
			#src/model/Clients.hx:267: lines 267-290
			$ref_id = 0;
		}
		#src/model/Clients.hx:268: characters 3-48
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		#src/model/Clients.hx:269: characters 3-28
		$user = \S::$user;
		#src/model/Clients.hx:271: lines 271-288
		if (\S::$my->query("INSERT INTO vicidial_lead_log SELECT * FROM (SELECT NULL AS log_id," . ($lead_id??'null') . " AS lead_id,NOW() AS entry_date) AS ll JOIN (SELECT modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id," . ($user??'null') . " AS log_user," . ($ref_id??'null') . " as ref_id FROM `vicidial_list` WHERE `lead_id`=" . ($lead_id??'null') . ")AS vl")) {
			#src/model/Clients.hx:275: characters 4-59
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			#src/model/Clients.hx:276: characters 4-36
			$log_id = \S::$my->insert_id;
			#src/model/Clients.hx:278: lines 278-287
			if ($this->checkOrCreateCustomTable($cTable)) {
				#src/model/Clients.hx:280: characters 5-38
				$cLogTable = ($cTable??'null') . "_log";
				#src/model/Clients.hx:281: lines 281-283
				\S::$my->query("INSERT INTO " . ($cLogTable??'null') . " SELECT * FROM (SELECT " . ($log_id??'null') . " AS log_id) AS ll JOIN (SELECT * FROM `" . ($cTable??'null') . "` WHERE `lead_id`=" . ($lead_id??'null') . ")AS cl");
				#src/model/Clients.hx:284: characters 5-10
				(Log::$trace)("INSERT INTO " . ($cLogTable??'null') . " ..." . (\S::$my->error??'null') . "<", new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 284,
					"className" => "model.Clients",
					"methodName" => "saveLog",
				]));
				#src/model/Clients.hx:285: lines 285-286
				if (\S::$my->error === "") {
					#src/model/Clients.hx:286: characters 6-19
					return $log_id;
				}
			}
		}
		#src/model/Clients.hx:289: characters 3-15
		return false;
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return mixed
	 */
	public function savePayBack ($q) {
		#src/model/Clients.hx:294: characters 3-8
		(Log::$trace)($q, new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 294,
			"className" => "model.Clients",
			"methodName" => "savePayBack",
		]));
		#src/model/Clients.hx:295: characters 3-71
		$client_id = \S::$my->real_escape_string(($q->data["client_id"] ?? null));
		#src/model/Clients.hx:296: characters 3-50
		$amount = \Std::parseInt(($q->data["Betrag"] ?? null));
		#src/model/Clients.hx:297: characters 3-73
		$buchungs_datum = \S::$my->real_escape_string(($q->data["buchungs_datum"] ?? null));
		#src/model/Clients.hx:298: characters 3-84
		$verwendungszweck = \S::$my->real_escape_string(($q->data["verwendungszweck"] ?? null));
		#src/model/Clients.hx:299: characters 3-99
		$crm_db = (array_key_exists("crm_db", $q->data) ? \S::$my->real_escape_string(($q->data["crm_db"] ?? null)) : "fly_crm");
		#src/model/Clients.hx:317: lines 317-320
		if (\S::$my->error === "") {
			#src/model/Clients.hx:319: characters 4-30
			return $this->json_response("OK");
		}
		#src/model/Clients.hx:321: characters 3-15
		return false;
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save_pay_plan ($q) {
		#src/model/Clients.hx:579: characters 3-81
		$product = Lib::hashOfAssociativeArray(($q->data["product"] ?? null));
		#src/model/Clients.hx:580: characters 3-28
		$user = \S::$user;
		#src/model/Clients.hx:582: characters 3-8
		(Log::$trace)((\Std::string($product)??'null') . ":" . (\Lambda::count($product)??'null') . ":" . (\Std::string((new NativeArrayIterator(array_map("strval", array_keys($product->data))))->hasNext())??'null'), new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 582,
			"className" => "model.Clients",
			"methodName" => "save_pay_plan",
		]));
		#src/model/Clients.hx:585: characters 3-46
		$pIt = new NativeArrayIterator(array_map("strval", array_keys($product->data)));
		#src/model/Clients.hx:586: lines 586-656
		while ($pIt->hasNext()) {
			#src/model/Clients.hx:588: characters 4-33
			$pay_plan_id = $pIt->next();
			#src/model/Clients.hx:589: characters 4-73
			$log_id = $this->save_pay_plan_log($pay_plan_id);
			#src/model/Clients.hx:590: characters 4-9
			(Log::$trace)($log_id, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 590,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			#src/model/Clients.hx:592: lines 592-593
			if (!$log_id) {
				#src/model/Clients.hx:593: characters 5-17
				return false;
			}
			#src/model/Clients.hx:594: characters 4-40
			$sql = new \StringBuf();
			#src/model/Clients.hx:595: characters 4-48
			$uFields = Clients::$pay_plan_fields;
			#src/model/Clients.hx:596: characters 4-33
			$uFields->remove("pay_plan_id");
			#src/model/Clients.hx:597: characters 4-30
			$bindTypes = "";
			#src/model/Clients.hx:598: characters 4-39
			$values2bind = null;
			#src/model/Clients.hx:599: characters 4-18
			$i = 0;
			#src/model/Clients.hx:600: characters 4-126
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			#src/model/Clients.hx:601: characters 4-41
			$sets = new \Array_hx();
			#src/model/Clients.hx:602: characters 4-43
			$sql->add("UPDATE fly_crm.pay_plan SET ");
			#src/model/Clients.hx:603: lines 603-625
			$_g = 0;
			#src/model/Clients.hx:603: lines 603-625
			while ($_g < $uFields->length) {
				#src/model/Clients.hx:603: characters 9-10
				$c = ($uFields->arr[$_g] ?? null);
				#src/model/Clients.hx:603: lines 603-625
				$_g = $_g + 1;
				#src/model/Clients.hx:605: characters 5-10
				(Log::$trace)(($c??'null') . ":" . (\Std::string(\Type::typeof(($q->data[$c] ?? null)))??'null'), new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 605,
					"className" => "model.Clients",
					"methodName" => "save_pay_plan",
				]));
				#src/model/Clients.hx:606: characters 5-22
				$p = ($q->data[$c] ?? null);
				#src/model/Clients.hx:607: characters 5-28
				$val = null;
				#src/model/Clients.hx:608: lines 608-624
				if ($p !== null) {
					#src/model/Clients.hx:610: lines 610-618
					if (!Boot::is($p, Boot::getClass('String'))) {
						#src/model/Clients.hx:612: characters 7-76
						$valMap = Lib::hashOfAssociativeArray(($q->data[$c] ?? null));
						#src/model/Clients.hx:613: characters 14-49
						$key = \Std::string($pay_plan_id);
						#src/model/Clients.hx:613: characters 14-49
						$val = ($valMap->data[$key] ?? null);
					} else {
						#src/model/Clients.hx:617: characters 7-14
						$val = $p;
					}
					#src/model/Clients.hx:620: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:620: characters 6-28
					$values2bind[$i - 1] = $val;
					#src/model/Clients.hx:621: characters 6-44
					$type = ($dbFieldTypes->data[$c] ?? null);
					#src/model/Clients.hx:622: characters 20-35
					$v = $type;
					#src/model/Clients.hx:622: characters 6-50
					$bindTypes = ($bindTypes??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? $type : "s"))??'null');
					#src/model/Clients.hx:623: characters 6-25
					$sets->arr[$sets->length] = ($c??'null') . "=?";
					#src/model/Clients.hx:623: characters 6-25
					++$sets->length;

				}
			}

			#src/model/Clients.hx:626: lines 626-629
			if ($sets->length === 0) {
				#src/model/Clients.hx:628: characters 5-13
				continue;
			}
			#src/model/Clients.hx:630: characters 4-27
			$sql->add($sets->join(","));
			#src/model/Clients.hx:631: characters 4-46
			$sql->add(" WHERE pay_plan_id=" . ($pay_plan_id??'null'));
			#src/model/Clients.hx:632: characters 4-33
			$stmt = \S::$my->stmt_init();
			#src/model/Clients.hx:633: characters 4-9
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 633,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			#src/model/Clients.hx:634: characters 4-52
			$success = $stmt->prepare($sql->b);
			#src/model/Clients.hx:635: lines 635-639
			if (!$success) {
				#src/model/Clients.hx:637: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 637,
					"className" => "model.Clients",
					"methodName" => "save_pay_plan",
				]));
				#src/model/Clients.hx:638: characters 5-17
				return false;
			}
			#src/model/Clients.hx:641: characters 4-9
			(Log::$trace)($values2bind, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 641,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			#src/model/Clients.hx:642: characters 4-75
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			#src/model/Clients.hx:643: characters 4-9
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 643,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			#src/model/Clients.hx:644: lines 644-655
			if ($success) {
				#src/model/Clients.hx:646: characters 5-29
				$success = $stmt->execute();
				#src/model/Clients.hx:647: lines 647-651
				if (!$success) {
					#src/model/Clients.hx:649: characters 6-11
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "src/model/Clients.hx",
						"lineNumber" => 649,
						"className" => "model.Clients",
						"methodName" => "save_pay_plan",
					]));
					#src/model/Clients.hx:650: characters 6-18
					return false;
				}
				#src/model/Clients.hx:652: characters 5-43
				$this->save_pay_plan_log($pay_plan_id, $log_id);
				#src/model/Clients.hx:653: lines 653-654
				if (!$pIt->hasNext()) {
					#src/model/Clients.hx:654: characters 6-17
					return true;
				}
			}
		}
		#src/model/Clients.hx:657: characters 3-15
		return false;
	}

	/**
	 * @param int $pay_plan_id
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function save_pay_plan_log ($pay_plan_id, $ref_id = 0) {
		#src/model/Clients.hx:565: lines 565-574
		if ($ref_id === null) {
			#src/model/Clients.hx:565: lines 565-574
			$ref_id = 0;
		}
		#src/model/Clients.hx:566: characters 3-21
		$user = \S::$user;
		#src/model/Clients.hx:567: characters 3-419
		$res = \S::$my->query("INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,agency_project,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . ($pay_plan_id??'null'));
		#src/model/Clients.hx:568: characters 8-22
		$v = $res;
		#src/model/Clients.hx:568: lines 568-572
		if (!(($v !== null) && !Boot::equal($v, 0) && ($v !== ""))) {
			#src/model/Clients.hx:570: characters 4-9
			(Log::$trace)("Failed to:  INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . ($pay_plan_id??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 570,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan_log",
			]));
			#src/model/Clients.hx:571: characters 4-16
			return false;
		}
		#src/model/Clients.hx:573: characters 3-29
		return \S::$my->insert_id;
	}

	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save_pay_source ($q) {
		#src/model/Clients.hx:674: characters 3-81
		$account = Lib::hashOfAssociativeArray(($q->data["account"] ?? null));
		#src/model/Clients.hx:676: characters 25-38
		$_e = $account;
		#src/model/Clients.hx:676: characters 3-8
		(Log::$trace)((\Std::string($account)??'null') . ":" . (\Std::string(function ($pred = null)  use (&$_e) {
			#src/model/Clients.hx:676: characters 25-38
			return \Lambda::count($_e, $pred);
		})??'null'), new HxAnon([
			"fileName" => "src/model/Clients.hx",
			"lineNumber" => 676,
			"className" => "model.Clients",
			"methodName" => "save_pay_source",
		]));
		#src/model/Clients.hx:679: characters 3-46
		$pIt = new NativeArrayIterator(array_map("strval", array_keys($account->data)));
		#src/model/Clients.hx:680: characters 3-28
		$user = \S::$user;
		#src/model/Clients.hx:681: lines 681-750
		while ($pIt->hasNext()) {
			#src/model/Clients.hx:683: characters 4-35
			$pay_source_id = $pIt->next();
			#src/model/Clients.hx:685: characters 4-77
			$log_id = $this->save_pay_source_log($pay_source_id);
			#src/model/Clients.hx:686: lines 686-687
			if (!$log_id) {
				#src/model/Clients.hx:687: characters 5-17
				return false;
			}
			#src/model/Clients.hx:688: characters 4-40
			$sql = new \StringBuf();
			#src/model/Clients.hx:689: characters 4-50
			$uFields = Clients::$pay_source_fields;
			#src/model/Clients.hx:690: characters 4-35
			$uFields->remove("pay_source_id");
			#src/model/Clients.hx:691: characters 4-30
			$bindTypes = "";
			#src/model/Clients.hx:692: characters 4-39
			$values2bind = null;
			#src/model/Clients.hx:693: characters 4-18
			$i = 0;
			#src/model/Clients.hx:694: characters 4-126
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			#src/model/Clients.hx:695: characters 4-41
			$sets = new \Array_hx();
			#src/model/Clients.hx:696: characters 4-45
			$sql->add("UPDATE fly_crm.pay_source SET ");
			#src/model/Clients.hx:697: lines 697-719
			$_g = 0;
			#src/model/Clients.hx:697: lines 697-719
			while ($_g < $uFields->length) {
				#src/model/Clients.hx:697: characters 9-10
				$c = ($uFields->arr[$_g] ?? null);
				#src/model/Clients.hx:697: lines 697-719
				$_g = $_g + 1;
				#src/model/Clients.hx:699: characters 5-10
				(Log::$trace)(($c??'null') . ":" . (\Std::string(\Type::typeof(($q->data[$c] ?? null)))??'null'), new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 699,
					"className" => "model.Clients",
					"methodName" => "save_pay_source",
				]));
				#src/model/Clients.hx:700: characters 5-22
				$p = ($q->data[$c] ?? null);
				#src/model/Clients.hx:701: characters 5-28
				$val = null;
				#src/model/Clients.hx:702: lines 702-718
				if ($p !== null) {
					#src/model/Clients.hx:704: lines 704-712
					if (!Boot::is($p, Boot::getClass('String'))) {
						#src/model/Clients.hx:706: characters 7-76
						$valMap = Lib::hashOfAssociativeArray(($q->data[$c] ?? null));
						#src/model/Clients.hx:707: characters 14-51
						$key = \Std::string($pay_source_id);
						#src/model/Clients.hx:707: characters 14-51
						$val = ($valMap->data[$key] ?? null);
					} else {
						#src/model/Clients.hx:711: characters 7-14
						$val = $p;
					}
					#src/model/Clients.hx:714: characters 18-21
					$i = $i + 1;
					#src/model/Clients.hx:714: characters 6-28
					$values2bind[$i - 1] = $val;
					#src/model/Clients.hx:715: characters 6-44
					$type = ($dbFieldTypes->data[$c] ?? null);
					#src/model/Clients.hx:716: characters 20-35
					$v = $type;
					#src/model/Clients.hx:716: characters 6-50
					$bindTypes = ($bindTypes??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? $type : "s"))??'null');
					#src/model/Clients.hx:717: characters 6-25
					$sets->arr[$sets->length] = ($c??'null') . "=?";
					#src/model/Clients.hx:717: characters 6-25
					++$sets->length;

				}
			}

			#src/model/Clients.hx:720: lines 720-723
			if ($sets->length === 0) {
				#src/model/Clients.hx:722: characters 5-13
				continue;
			}
			#src/model/Clients.hx:724: characters 4-27
			$sql->add($sets->join(","));
			#src/model/Clients.hx:725: characters 4-50
			$sql->add(" WHERE pay_source_id=" . ($pay_source_id??'null'));
			#src/model/Clients.hx:726: characters 4-33
			$stmt = \S::$my->stmt_init();
			#src/model/Clients.hx:727: characters 4-9
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 727,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			#src/model/Clients.hx:728: characters 4-52
			$success = $stmt->prepare($sql->b);
			#src/model/Clients.hx:729: lines 729-733
			if (!$success) {
				#src/model/Clients.hx:731: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/model/Clients.hx",
					"lineNumber" => 731,
					"className" => "model.Clients",
					"methodName" => "save_pay_source",
				]));
				#src/model/Clients.hx:732: characters 5-17
				return false;
			}
			#src/model/Clients.hx:735: characters 4-9
			(Log::$trace)($values2bind, new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 735,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			#src/model/Clients.hx:736: characters 4-75
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			#src/model/Clients.hx:737: characters 4-9
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 737,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			#src/model/Clients.hx:738: lines 738-749
			if ($success) {
				#src/model/Clients.hx:740: characters 5-29
				$success = $stmt->execute();
				#src/model/Clients.hx:741: lines 741-745
				if (!$success) {
					#src/model/Clients.hx:743: characters 6-11
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "src/model/Clients.hx",
						"lineNumber" => 743,
						"className" => "model.Clients",
						"methodName" => "save_pay_source",
					]));
					#src/model/Clients.hx:744: characters 6-18
					return false;
				}
				#src/model/Clients.hx:746: characters 5-47
				$this->save_pay_source_log($pay_source_id, $log_id);
				#src/model/Clients.hx:747: lines 747-748
				if (!$pIt->hasNext()) {
					#src/model/Clients.hx:748: characters 6-17
					return true;
				}
			}
		}
		#src/model/Clients.hx:751: characters 3-15
		return false;
	}

	/**
	 * @param int $pay_source_id
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function save_pay_source_log ($pay_source_id, $ref_id = 0) {
		#src/model/Clients.hx:661: lines 661-670
		if ($ref_id === null) {
			#src/model/Clients.hx:661: lines 661-670
			$ref_id = 0;
		}
		#src/model/Clients.hx:662: characters 3-21
		$user = \S::$user;
		#src/model/Clients.hx:663: characters 3-341
		$res = \S::$my->query("INSERT INTO fly_crm.pay_source_log SELECT  pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . ($pay_source_id??'null'));
		#src/model/Clients.hx:664: characters 8-22
		$v = $res;
		#src/model/Clients.hx:664: lines 664-668
		if (!(($v !== null) && !Boot::equal($v, 0) && ($v !== ""))) {
			#src/model/Clients.hx:666: characters 4-9
			(Log::$trace)("Failed to:  INSERT INTO fly_crm.pay_source_log SELECT pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . ($pay_source_id??'null'), new HxAnon([
				"fileName" => "src/model/Clients.hx",
				"lineNumber" => 666,
				"className" => "model.Clients",
				"methodName" => "save_pay_source_log",
			]));
			#src/model/Clients.hx:667: characters 4-16
			return false;
		}
		#src/model/Clients.hx:669: characters 3-29
		return \S::$my->insert_id;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$vicdial_list_fields = \Array_hx::wrap(explode(",", "lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id"));
		self::$clients_fields = \Array_hx::wrap(explode(",", "client_id,lead_id,creation_date,state,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,anrede,namenszusatz,co_field,storno_grund,birth_date,old_active"));
		self::$pay_history_fields = \Array_hx::wrap(explode(",", "buchungsanforderungID,Mandat-ID,Betrag,Termin,tracking_status,Textschlüssel bzw. Zahlart"));
		self::$pay_source_fields = \Array_hx::wrap(explode(",", "pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date"));
		self::$pay_plan_fields = \Array_hx::wrap(explode(",", "pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason"));
		self::$booking_fields = \Array_hx::wrap(explode(",", ""));
		$_g = new StringMap();
		$_g->data["title"] = "anrede";
		$_g->data["geburts_datum"] = "birth_date";
		self::$custom_fields_map = $_g;
	}
}

Boot::registerClass(Clients::class, 'model.Clients');
Clients::__hx__init();
