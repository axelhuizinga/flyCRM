<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \php\Boot;

class Std {
	/**
	 * @param string $x
	 * 
	 * @return float
	 */
	static public function parseFloat ($x) {
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:67: characters 3-35
		$result = floatval($x);
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:68: characters 3-33
		if (!Boot::equal($result, 0)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:68: characters 20-33
			return $result;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:70: characters 3-22
		$x = ltrim($x);
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:71: characters 3-53
		$firstCharIndex = (((0 >= strlen($x) ? "" : $x[0])) === "-" ? 1 : 0);
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:72: characters 3-47
		$charCode = (($firstCharIndex < 0) || ($firstCharIndex >= strlen($x)) ? null : ord($x[$firstCharIndex]));
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:74: lines 74-76
		if ($charCode === 46) {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:75: characters 15-47
			$index = $firstCharIndex + 1;
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:75: characters 15-47
			$charCode = (($index < 0) || ($index >= strlen($x)) ? null : ord($x[$index]));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:78: lines 78-82
		if (($charCode !== null) && ($charCode >= 48) && ($charCode <= 57)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:79: characters 4-14
			return 0.0;
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:81: characters 4-20
			return NAN;
		}
	}

	/**
	 * @param string $x
	 * 
	 * @return int
	 */
	static public function parseInt ($x) {
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:48: lines 48-63
		if (is_numeric($x)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:49: characters 4-31
			return intval($x, 10);
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:51: characters 4-23
			$x = ltrim($x);
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:52: characters 4-54
			$firstCharIndex = (((0 >= strlen($x) ? "" : $x[0])) === "-" ? 1 : 0);
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:53: characters 4-53
			$firstCharCode = (($firstCharIndex < 0) || ($firstCharIndex >= strlen($x)) ? null : ord($x[$firstCharIndex]));
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:54: lines 54-56
			if (!(($firstCharCode !== null) && ($firstCharCode >= 48) && ($firstCharCode <= 57))) {
				#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:55: characters 5-16
				return null;
			}
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:57: characters 21-49
			$index = $firstCharIndex + 1;
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:57: characters 4-50
			$secondChar = (($index < 0) || ($index >= strlen($x)) ? "" : $x[$index]);
			#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:58: lines 58-62
			if (($secondChar === "x") || ($secondChar === "X")) {
				#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:59: characters 5-31
				return intval($x, 0);
			} else {
				#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:61: characters 5-32
				return intval($x, 10);
			}
		}
	}

	/**
	 * @param mixed $s
	 * 
	 * @return string
	 */
	static public function string ($s) {
		#C:\HaxeToolkit\haxe\std/php/_std/Std.hx:40: characters 3-27
		return Boot::stringify($s);
	}
}

Boot::registerClass(Std::class, 'Std');
