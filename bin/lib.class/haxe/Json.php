<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace haxe;

use \php\_Boot\HxException;
use \php\Boot;
use \haxe\format\JsonPrinter;
use \php\_Boot\HxAnon;

class Json {
	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function convertBeforeEncode ($value) {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:90: lines 90-97
		if (($value instanceof \Array_hx)) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:91: characters 17-41
			$this1 = [];
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:91: characters 4-42
			$result = $this1;
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:92: lines 92-94
			foreach ((Boot::dynamicField($value, 'arr')) as $index => $item) {
				#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:93: characters 5-46
				$val = Json::convertBeforeEncode($item);
				#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:93: characters 5-46
				$result[$index] = $val;
			};
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:96: characters 4-17
			return $result;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:99: lines 99-106
		if (is_object($value)) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:100: characters 4-20
			$result1 = new HxAnon();
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:101: lines 101-103
			foreach ($value as $fieldName => $fieldValue) {
				#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:102: characters 21-27
				$tmp = $result1;
				#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:102: characters 29-38
				$tmp1 = $fieldName;
				#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:102: characters 5-72
				$tmp->{$tmp1} = Json::convertBeforeEncode($fieldValue);
			};
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:105: characters 4-17
			return $result1;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:108: lines 108-110
		if (is_float($value) && !is_finite($value)) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:109: characters 4-15
			return null;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:112: characters 3-15
		return $value;
	}

	/**
	 * @param mixed $value
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return string
	 */
	static public function phpJsonEncode ($value, $replacer = null, $space = null) {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:78: lines 78-80
		if ((null !== $replacer) || (null !== $space)) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:79: characters 4-52
			return JsonPrinter::print($value, $replacer, $space);
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:82: characters 3-61
		$json = json_encode(Json::convertBeforeEncode($value));
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:83: lines 83-85
		if (json_last_error() !== JSON_ERROR_NONE) {
			#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:84: characters 11-16
			throw (is_object($__hx__throw = json_last_error_msg()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/Json.hx:86: characters 3-14
		return $json;
	}
}

Boot::registerClass(Json::class, 'haxe.Json');
