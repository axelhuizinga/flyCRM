<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace haxe\io;

use \php\Boot;
use \haxe\io\_BytesData\Container;

class BytesBuffer {
	/**
	 * @var string
	 */
	public $b;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/BytesBuffer.hx:33: characters 3-9
		$this->b = "";
	}

	/**
	 * @return Bytes
	 */
	public function getBytes () {
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/BytesBuffer.hx:81: characters 25-33
		$bytes = strlen($this->b);
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/BytesBuffer.hx:81: characters 3-38
		$bytes1 = new Bytes($bytes, new Container($this->b));
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/BytesBuffer.hx:82: characters 3-11
		$this->b = null;
		#C:\HaxeToolkit\haxe\std/php/_std/haxe/io/BytesBuffer.hx:83: characters 3-15
		return $bytes1;
	}
}

Boot::registerClass(BytesBuffer::class, 'haxe.io.BytesBuffer');
