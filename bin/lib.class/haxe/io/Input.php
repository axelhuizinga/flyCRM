<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxException;

class Input {
	/**
	 * @return void
	 */
	public function close () {
	}

	/**
	 * @return int
	 */
	public function readByte () {
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:53: characters 10-15
		throw new HxException("Not implemented");
	}

	/**
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:68: characters 4-9
			throw new HxException(Error::OutsideBounds());
		}
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:69: lines 69-83
		try {
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:74: characters 6-28
				$val = $this->readByte();
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:74: characters 6-28
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:80: characters 5-10
				$pos = $pos + 1;
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:81: characters 5-8
				$k = $k - 1;
			}
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:84: characters 3-15
		return $len - $k;
	}
}

Boot::registerClass(Input::class, 'haxe.io.Input');
