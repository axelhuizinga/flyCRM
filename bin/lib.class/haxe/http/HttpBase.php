<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace haxe\http;

use \php\_Boot\HxClosure;
use \php\Boot;
use \php\_Boot\HxAnon;

class HttpBase {
	/**
	 * @var \Array_hx
	 */
	public $headers;
	/**
	 * @var \Closure
	 */
	public $onData;
	/**
	 * @var \Closure
	 */
	public $onError;
	/**
	 * @var \Closure
	 */
	public $onStatus;
	/**
	 * @var \Array_hx
	 */
	public $params;
	/**
	 * @var string
	 */
	public $postData;
	/**
	 * @var string
	 */
	public $responseData;
	/**
	 * @var string
	 */
	public $url;

	/**
	 * @param string $url
	 * 
	 * @return void
	 */
	public function __construct ($url) {
		if (!$this->__hx__default__onData) {
			$this->__hx__default__onData = new HxClosure($this, 'onData');
			if ($this->onData === null) $this->onData = $this->__hx__default__onData;
		}
		if (!$this->__hx__default__onError) {
			$this->__hx__default__onError = new HxClosure($this, 'onError');
			if ($this->onError === null) $this->onError = $this->__hx__default__onError;
		}
		if (!$this->__hx__default__onStatus) {
			$this->__hx__default__onStatus = new HxClosure($this, 'onStatus');
			if ($this->onStatus === null) $this->onStatus = $this->__hx__default__onStatus;
		}
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:63: characters 3-17
		$this->url = $url;
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:64: characters 3-15
		$this->headers = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:65: characters 3-14
		$this->params = new \Array_hx();
	}

	/**
	 * @param string $data
	 * 
	 * @return void
	 */
	public function onData ($data)
	{
		if ($this->onData !== $this->__hx__default__onData) return call_user_func_array($this->onData, func_get_args());
			}
	protected $__hx__default__onData;

	/**
	 * @param string $msg
	 * 
	 * @return void
	 */
	public function onError ($msg)
	{
		if ($this->onError !== $this->__hx__default__onError) return call_user_func_array($this->onError, func_get_args());
			}
	protected $__hx__default__onError;

	/**
	 * @param int $status
	 * 
	 * @return void
	 */
	public function onStatus ($status)
	{
		if ($this->onStatus !== $this->__hx__default__onStatus) return call_user_func_array($this->onStatus, func_get_args());
			}
	protected $__hx__default__onStatus;

	/**
	 * @param string $name
	 * @param string $value
	 * 
	 * @return void
	 */
	public function setParameter ($name, $value) {
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:99: lines 99-104
		$_g1 = 0;
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:99: lines 99-104
		$_g = $this->params->length;
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:99: lines 99-104
		while ($_g1 < $_g) {
			#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:99: lines 99-104
			$_g1 = $_g1 + 1;
			#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:99: characters 8-9
			$i = $_g1 - 1;
			#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:100: lines 100-103
			if (($this->params->arr[$i] ?? null)->name === $name) {
				#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:101: characters 5-45
				$this->params[$i] = new HxAnon([
					"name" => $name,
					"value" => $value,
				]);
				#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:102: characters 5-11
				return;
			}
		}

		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:105: characters 3-44
		$_this = $this->params;
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:105: characters 3-44
		$_this->arr[$_this->length] = new HxAnon([
			"name" => $name,
			"value" => $value,
		]);
		#C:\HaxeToolkit\haxe\std/haxe/http/HttpBase.hx:105: characters 3-44
		++$_this->length;

	}
}

Boot::registerClass(HttpBase::class, 'haxe.http.HttpBase');
