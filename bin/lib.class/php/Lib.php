<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace php;

use \haxe\ds\StringMap;
use \php\_Boot\HxAnon;

class Lib {
	/**
	 * @param mixed $arr
	 * 
	 * @return StringMap
	 */
	static public function hashOfAssociativeArray ($arr) {
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:101: characters 3-32
		$result = new StringMap();
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:102: characters 19-36
		$result->data = $arr;
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:103: characters 3-16
		return $result;
	}

	/**
	 * @param mixed $arr
	 * 
	 * @return mixed
	 */
	static public function objectOfAssociativeArray ($arr) {
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:111: lines 111-115
		foreach ($arr as $key => $value) {
			#C:\HaxeToolkit\haxe\std/php/Lib.hx:112: lines 112-114
			if (is_array($value)) {
				#C:\HaxeToolkit\haxe\std/php/Lib.hx:113: characters 16-47
				$tmp = Lib::objectOfAssociativeArray($value);
				#C:\HaxeToolkit\haxe\std/php/Lib.hx:113: characters 5-47
				$arr[$key] = $tmp;
			}
		};
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:116: characters 3-30
		return new HxAnon($arr);
	}

	/**
	 * @param mixed $v
	 * 
	 * @return void
	 */
	static public function println ($v) {
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:46: characters 3-11
		echo(\Std::string($v));
		#C:\HaxeToolkit\haxe\std/php/Lib.hx:47: characters 3-14
		echo("\x0A");
	}
}

Boot::registerClass(Lib::class, 'php.Lib');
