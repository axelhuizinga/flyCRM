<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace php\net;

use \php\Boot;
use \sys\net\Host;
use \sys\net\Socket as NetSocket;

class Socket extends NetSocket {
	/**
	 * @param bool $r
	 * @param int $code
	 * @param string $msg
	 * 
	 * @return void
	 */
	static public function checkError ($r, $code, $msg) {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:142: characters 10-49
		NetSocket::checkError($r, $code, $msg);
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:142: characters 3-49
		return;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:34: characters 3-10
		parent::__construct();
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:35: characters 3-19
		$this->protocol = "tcp";
	}

	/**
	 * @return void
	 */
	public function assignHandler () {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:39: characters 19-51
		$this->input->__f = $this->__s;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:40: characters 19-53
		$this->output->__f = $this->__s;
	}

	/**
	 * @return void
	 */
	public function close () {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:44: characters 3-14
		fclose($this->__s);
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:45: characters 19-52
		$this->input->__f = null;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:46: characters 19-54
		$this->output->__f = null;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:47: characters 3-16
		$this->input->close();
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:48: characters 3-17
		$this->output->close();
	}

	/**
	 * @param Host $host
	 * @param int $port
	 * 
	 * @return void
	 */
	public function connect ($host, $port) {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:62: characters 3-19
		$errs = null;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:63: characters 3-19
		$errn = null;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:64: characters 3-87
		$r = stream_socket_client(($this->protocol??'null') . "://" . ($host->host??'null') . ":" . ($port??'null'), $errn, $errs);
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:65: characters 3-28
		NetSocket::checkError($r, $errn, $errs);
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:66: characters 3-10
		$this->__s = $r;
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:67: characters 3-18
		$this->assignHandler();
	}

	/**
	 * @param bool $read
	 * @param bool $write
	 * 
	 * @return void
	 */
	public function shutdown ($read, $write) {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:79: characters 3-61
		$rw = ($read && $write ? 2 : ($write ? 1 : ($read ? 0 : 2)));
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:80: characters 3-43
		$r = stream_socket_shutdown($this->__s, $rw);
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:81: characters 3-41
		NetSocket::checkError($r, 0, "Unable to Shutdown");
	}

	/**
	 * @param string $content
	 * 
	 * @return void
	 */
	public function write ($content) {
		#C:\HaxeToolkit\haxe\std/php/net/Socket.hx:58: characters 3-23
		fwrite($this->__s, $content);
	}
}

Boot::registerClass(Socket::class, 'php.net.Socket');
