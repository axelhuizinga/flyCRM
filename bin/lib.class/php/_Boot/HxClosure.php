<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace php\_Boot;

use \php\Boot;

class HxClosure {
	/**
	 * @var string
	 */
	public $func;
	/**
	 * @var mixed
	 */
	public $target;

	/**
	 * @param mixed $target
	 * @param string $func
	 * 
	 * @return void
	 */
	public function __construct ($target, $func) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:834: characters 3-23
		$this->target = $target;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:835: characters 3-19
		$this->func = $func;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:837: lines 837-839
		if (is_null($target)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:838: characters 4-9
			throw new HxException("Unable to create closure on `null`");
		}
	}

	/**
	 * @return mixed
	 */
	public function __invoke () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:847: characters 3-76
		return call_user_func_array($this->getCallback(), func_get_args());
	}

	/**
	 * @param mixed $newThis
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function callWith ($newThis, $args) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:876: characters 3-65
		return call_user_func_array($this->getCallback($newThis), $args);
	}

	/**
	 * @param HxClosure $closure
	 * 
	 * @return bool
	 */
	public function equals ($closure) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:869: characters 10-60
		if (Boot::equal($this->target, $closure->target)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:869: characters 39-59
			return $this->func === $closure->func;
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:869: characters 10-60
			return false;
		}
	}

	/**
	 * @param mixed $eThis
	 * 
	 * @return mixed
	 */
	public function getCallback ($eThis = null) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:854: lines 854-856
		if ($eThis === null) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:855: characters 4-18
			$eThis = $this->target;
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:857: lines 857-861
		if (($eThis instanceof \StdClass)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:858: lines 858-860
			if (($eThis instanceof HxAnon)) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:859: characters 25-30
				$tmp = $eThis;
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:859: characters 32-36
				$tmp1 = $this->func;
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:859: characters 5-37
				return $tmp->{$tmp1};
			}
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:862: characters 3-39
		return [$eThis, $this->func];
	}
}

Boot::registerClass(HxClosure::class, 'php._Boot.HxClosure');
