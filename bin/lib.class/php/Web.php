<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace php;

use \haxe\ds\StringMap;

class Web {
	/**
	 * @var bool
	 */
	static public $isModNeko;

	/**
	 * @return StringMap
	 */
	static public function getParams () {
		#C:\HaxeToolkit\haxe\std/php/Web.hx:51: characters 3-62
		return Lib::hashOfAssociativeArray(array_merge($_GET, $_POST));
	}

	/**
	 * @return string
	 */
	static public function getPostData () {
		#C:\HaxeToolkit\haxe\std/php/Web.hx:269: characters 3-37
		$h = fopen("php://input", "r");
		#C:\HaxeToolkit\haxe\std/php/Web.hx:270: characters 3-20
		$bsize = 8192;
		#C:\HaxeToolkit\haxe\std/php/Web.hx:271: characters 3-16
		$max = 32;
		#C:\HaxeToolkit\haxe\std/php/Web.hx:272: characters 3-28
		$data = null;
		#C:\HaxeToolkit\haxe\std/php/Web.hx:273: characters 3-19
		$counter = 0;
		#C:\HaxeToolkit\haxe\std/php/Web.hx:274: lines 274-277
		while (!feof($h) && ($counter < $max)) {
			#C:\HaxeToolkit\haxe\std/php/Web.hx:275: characters 11-47
			$data = ($data . fread($h, $bsize));
			#C:\HaxeToolkit\haxe\std/php/Web.hx:276: characters 4-13
			$counter = $counter + 1;
		}
		#C:\HaxeToolkit\haxe\std/php/Web.hx:278: characters 3-12
		fclose($h);
		#C:\HaxeToolkit\haxe\std/php/Web.hx:279: characters 3-14
		return $data;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		#C:\HaxeToolkit\haxe\std/php/Web.hx:420: characters 3-27
		Web::$isModNeko = 0 !== strncasecmp(PHP_SAPI, "cli", 3);

	}
}

Boot::registerClass(Web::class, 'php.Web');
Web::__hx__init();
