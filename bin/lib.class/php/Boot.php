<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace php;

use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxString;
use \php\_Boot\HxClass;
use \php\_Boot\HxEnum;
use \php\_Boot\HxAnon;

class Boot {
	const PHP_PREFIX = "";

	/**
	 * @var mixed
	 */
	static protected $aliases;
	/**
	 * @var mixed
	 */
	static protected $classes;
	/**
	 * @var mixed
	 */
	static protected $getters;
	/**
	 * @var mixed
	 */
	static protected $meta;
	/**
	 * @var mixed
	 */
	static protected $setters;

	/**
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return mixed
	 */
	static public function addOrConcat ($left, $right) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:397: lines 397-399
		if (is_string($left) || is_string($right)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:398: characters 4-41
			return ($left??'null') . ($right??'null');
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:400: characters 3-33
		return ($left + $right);
	}

	/**
	 * @param Class $cls
	 * 
	 * @return HxClass
	 */
	static public function castClass ($cls) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:278: characters 3-18
		return $cls;
	}

	/**
	 * @param mixed $value
	 * 
	 * @return HxClosure
	 */
	static public function castClosure ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:271: characters 3-15
		return $value;
	}

	/**
	 * @param mixed $target
	 * @param mixed $func
	 * 
	 * @return HxClosure
	 */
	static public function closure ($target, $func) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:264: characters 3-37
		return new HxClosure($target, $func);
	}

	/**
	 * @return HxClass
	 */
	static public function closureHxClass () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:285: characters 3-24
		return Boot::getClass(HxClosure::class);
	}

	/**
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	static public function createAnon ($data) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:502: characters 3-26
		return new HxAnon($data);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function deref ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:495: characters 3-15
		return $value;
	}

	/**
	 * @param mixed $value
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function dynamicField ($value, $field) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:516: lines 516-518
		if (method_exists($value, $field)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:517: characters 4-32
			return new HxClosure($value, $field);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:519: lines 519-521
		if (is_string($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:520: characters 4-51
			$value = new HxDynamicStr($value);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:522: characters 23-28
		$tmp = $value;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:522: characters 30-35
		$tmp1 = $field;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:522: characters 3-36
		return $tmp->{$tmp1};
	}

	/**
	 * @param string $str
	 * 
	 * @return HxDynamicStr
	 */
	static public function dynamicString ($str) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:526: characters 3-47
		return new HxDynamicStr($str);
	}

	/**
	 * @param string $phpClassName
	 * 
	 * @return bool
	 */
	static public function ensureLoaded ($phpClassName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:509: characters 10-84
		if (!class_exists($phpClassName)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:509: characters 47-84
			return interface_exists($phpClassName);
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:509: characters 10-84
			return true;
		}
	}

	/**
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return bool
	 */
	static public function equal ($left, $right) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:383: lines 383-385
		if ((is_int($left) || is_float($left)) && (is_int($right) || is_float($right))) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:384: characters 4-36
			return ($left == $right);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:386: lines 386-388
		if (($left instanceof HxClosure) && ($right instanceof HxClosure)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:387: characters 4-41
			return $left->equals($right);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:389: characters 3-41
		return ($left === $right);
	}

	/**
	 * @param string $phpClassName
	 * 
	 * @return HxClass
	 */
	static public function getClass ($phpClassName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:168: lines 168-170
		if (((0 >= strlen($phpClassName) ? "" : $phpClassName[0])) === "\\") {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:169: characters 4-41
			$phpClassName = HxString::substr($phpClassName, 1);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:171: lines 171-173
		if (!isset(Boot::$classes[$phpClassName])) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:172: characters 4-53
			Boot::$classes[$phpClassName] = new HxClass($phpClassName);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:175: characters 3-31
		return Boot::$classes[$phpClassName];
	}

	/**
	 * @param string $phpClassName
	 * 
	 * @return string
	 */
	static public function getClassName ($phpClassName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:196: characters 3-40
		$hxClass = Boot::getClass($phpClassName);
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:197: characters 3-35
		$name = Boot::getHaxeName($hxClass);
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:198: characters 10-54
		if ($name === null) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:198: characters 26-46
			return $hxClass->phpClassName;
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:198: characters 49-53
			return $name;
		}
	}

	/**
	 * @param HxClass $hxClass
	 * 
	 * @return string
	 */
	static public function getHaxeName ($hxClass) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:205: characters 11-31
		$_g = $hxClass->phpClassName;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:205: characters 11-31
		switch ($_g) {
			case "Bool":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:208: characters 17-30
				return "Bool";
				break;
			case "Class":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:210: characters 18-32
				return "Class";
				break;
			case "Dynamic":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:212: characters 20-36
				return "Dynamic";
				break;
			case "Enum":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:211: characters 17-30
				return "Enum";
				break;
			case "Float":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:209: characters 18-32
				return "Float";
				break;
			case "Int":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:206: characters 16-28
				return "Int";
				break;
			case "String":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:207: characters 19-34
				return "String";
				break;
			default:
								break;
		}

		#C:\HaxeToolkit\haxe\std/php/Boot.hx:218: lines 218-224
		if (isset(Boot::$aliases[$hxClass->phpClassName])) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:219: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (class_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:221: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (interface_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:223: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:226: characters 3-14
		return null;
	}

	/**
	 * @return HxClass
	 */
	static public function getHxAnon () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:182: characters 3-21
		return Boot::getClass(HxAnon::class);
	}

	/**
	 * @return HxClass
	 */
	static public function getHxClass () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:189: characters 3-22
		return Boot::getClass(HxClass::class);
	}

	/**
	 * @param string $phpClassName
	 * 
	 * @return mixed
	 */
	static public function getMeta ($phpClassName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:134: characters 3-29
		if (!class_exists($phpClassName)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:134: characters 3-29
			interface_exists($phpClassName);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:135: characters 10-70
		if (isset(Boot::$meta[$phpClassName])) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:135: characters 45-63
			return Boot::$meta[$phpClassName];
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:135: characters 66-70
			return null;
		}
	}

	/**
	 * @param string $haxeName
	 * 
	 * @return string
	 */
	static public function getPhpName ($haxeName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:234: characters 3-28
		$prefix = Boot::getPrefix();
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:235: characters 3-55
		$phpParts = (strlen($prefix) === 0 ? new \Array_hx() : \Array_hx::wrap([$prefix]));
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:237: characters 3-39
		$haxeParts = \Array_hx::wrap(explode(".", $haxeName));
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:238: lines 238-253
		$_g = 0;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:238: lines 238-253
		while ($_g < $haxeParts->length) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:238: characters 8-12
			$part = ($haxeParts->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:238: lines 238-253
			$_g = $_g + 1;
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:239: characters 12-30
			$_g1 = strtolower($part);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:239: characters 12-30
			switch ($_g1) {
				case "__class__":
				case "__dir__":
				case "__file__":
				case "__function__":
				case "__halt_compiler":
				case "__line__":
				case "__method__":
				case "__namespace__":
				case "__trait__":
				case "abstract":
				case "and":
				case "array":
				case "as":
				case "bool":
				case "break":
				case "callable":
				case "case":
				case "catch":
				case "class":
				case "clone":
				case "const":
				case "continue":
				case "declare":
				case "default":
				case "die":
				case "do":
				case "echo":
				case "else":
				case "elseif":
				case "empty":
				case "enddeclare":
				case "endfor":
				case "endforeach":
				case "endif":
				case "endswitch":
				case "endwhile":
				case "eval":
				case "exit":
				case "extends":
				case "false":
				case "final":
				case "finally":
				case "float":
				case "for":
				case "foreach":
				case "function":
				case "global":
				case "goto":
				case "if":
				case "implements":
				case "include":
				case "include_once":
				case "instanceof":
				case "insteadof":
				case "int":
				case "interface":
				case "isset":
				case "iterable":
				case "list":
				case "namespace":
				case "new":
				case "null":
				case "object":
				case "or":
				case "parent":
				case "print":
				case "private":
				case "protected":
				case "public":
				case "require":
				case "require_once":
				case "return":
				case "static":
				case "string":
				case "switch":
				case "throw":
				case "trait":
				case "true":
				case "try":
				case "unset":
				case "use":
				case "var":
				case "void":
				case "while":
				case "xor":
				case "yield":
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:249: characters 7-20
					$part = ($part??'null') . "_hx";
					break;
				default:
										break;
			}

			#C:\HaxeToolkit\haxe\std/php/Boot.hx:252: characters 4-23
			$phpParts->arr[$phpParts->length] = $part;
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:252: characters 4-23
			++$phpParts->length;

		}

		#C:\HaxeToolkit\haxe\std/php/Boot.hx:255: characters 3-29
		return $phpParts->join("\\");
	}

	/**
	 * @return string
	 */
	static public function getPrefix () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:74: characters 3-41
		return self::PHP_PREFIX;
	}

	/**
	 * @return mixed
	 */
	static public function getRegisteredAliases () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:160: characters 3-17
		return Boot::$aliases;
	}

	/**
	 * @return \Array_hx
	 */
	static public function getRegisteredClasses () {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:149: characters 3-19
		$result = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:150: lines 150-152
		foreach ((Boot::$aliases) as $phpName => $haxeName) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:151: characters 4-39
			$x = Boot::getClass($phpName);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:151: characters 4-39
			$result->arr[$result->length] = $x;
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:151: characters 4-39
			++$result->length;
		};
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:153: characters 3-16
		return $result;
	}

	/**
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasGetter ($phpClassName, $property) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:95: characters 3-29
		if (!class_exists($phpClassName)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:95: characters 3-29
			interface_exists($phpClassName);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:97: characters 3-19
		$has = false;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:98: characters 3-71
		$phpClassName1 = $phpClassName;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:99: lines 99-102
		while (true) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:100: characters 4-55
			$has = isset(Boot::$getters[$phpClassName1][$property]);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:101: characters 4-56
			$phpClassName1 = get_parent_class($phpClassName1);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:99: lines 99-102
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:99: lines 99-102
				break;
			}
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:104: characters 3-13
		return $has;
	}

	/**
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasSetter ($phpClassName, $property) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:111: characters 3-29
		if (!class_exists($phpClassName)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:111: characters 3-29
			interface_exists($phpClassName);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:113: characters 3-19
		$has = false;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:114: characters 3-71
		$phpClassName1 = $phpClassName;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:115: lines 115-118
		while (true) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:116: characters 4-55
			$has = isset(Boot::$setters[$phpClassName1][$property]);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:117: characters 4-56
			$phpClassName1 = get_parent_class($phpClassName1);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:115: lines 115-118
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:115: lines 115-118
				break;
			}
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:120: characters 3-13
		return $has;
	}

	/**
	 * @param mixed $value
	 * @param HxClass $type
	 * 
	 * @return bool
	 */
	static public function is ($value, $type) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:407: characters 3-33
		if ($type === null) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:407: characters 21-33
			return false;
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:409: characters 3-35
		$phpType = $type->phpClassName;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:410: lines 410-443
		switch ($phpType) {
			case "Bool":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:426: characters 5-27
				return is_bool($value);
				break;
			case "Dynamic":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:412: characters 5-16
				return true;
				break;
			case "Class":
			case "Enum":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:432: lines 432-437
				if (($value instanceof HxClass)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:433: characters 6-60
					$valuePhpClass = $value->phpClassName;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:434: characters 6-60
					$enumPhpClass = Boot::getClass(HxEnum::class)->phpClassName;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:435: characters 6-74
					$isEnumType = is_subclass_of($valuePhpClass, $enumPhpClass);
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:436: characters 13-59
					if ($phpType === "Enum") {
						#C:\HaxeToolkit\haxe\std/php/Boot.hx:436: characters 34-44
						return $isEnumType;
					} else {
						#C:\HaxeToolkit\haxe\std/php/Boot.hx:436: characters 47-58
						return !$isEnumType;
					}
				}
				break;
			case "Float":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:424: characters 12-46
				if (!is_float($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:424: characters 32-46
					return is_int($value);
				} else {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:424: characters 12-46
					return true;
				}
				break;
			case "Int":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:414: lines 414-422
				if (is_int($value) || (is_float($value) && ((int)($value) == $value) && !is_nan($value))) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:422: characters 9-40
					return abs($value) <= 2147483648;
				} else {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:414: lines 414-422
					return false;
				}
				break;
			case "String":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:428: characters 5-29
				return is_string($value);
				break;
			case "php\\NativeArray":
			case "php\\_NativeArray\\NativeArray_Impl_":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:430: characters 5-28
				return is_array($value);
				break;
			default:
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:439: lines 439-442
				if (is_object($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:440: characters 6-42
					$type1 = $type;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:441: characters 31-36
					$tmp = $value;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:441: characters 38-42
					$tmp1 = $type1;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:441: characters 6-43
					return ($tmp instanceof $tmp1->phpClassName);
				}
				break;
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:444: characters 3-15
		return false;
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isClass ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:451: characters 3-32
		return ($value instanceof HxClass);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isEnumValue ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:458: characters 3-31
		return ($value instanceof HxEnum);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isFunction ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:465: characters 10-60
		if (!($value instanceof \Closure)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:465: characters 36-60
			return ($value instanceof HxClosure);
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:465: characters 10-60
			return true;
		}
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isHxClosure ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:472: characters 3-34
		return ($value instanceof HxClosure);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isNumber ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:376: characters 10-44
		if (!is_int($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:376: characters 28-44
			return is_float($value);
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:376: characters 10-44
			return true;
		}
	}

	/**
	 * @param string $phpClassName
	 * @param string $haxeClassName
	 * 
	 * @return void
	 */
	static public function registerClass ($phpClassName, $haxeClassName) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:142: characters 3-40
		Boot::$aliases[$phpClassName] = $haxeClassName;
	}

	/**
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerGetters ($phpClassName, $list) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:81: characters 3-31
		Boot::$getters[$phpClassName] = $list;
	}

	/**
	 * @param string $phpClassName
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function registerMeta ($phpClassName, $data) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:127: characters 3-28
		Boot::$meta[$phpClassName] = $data;
	}

	/**
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerSetters ($phpClassName, $list) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:88: characters 3-31
		Boot::$setters[$phpClassName] = $list;
	}

	/**
	 * @param int $left
	 * @param int $right
	 * 
	 * @return int
	 */
	static public function shiftRightUnsigned ($left, $right) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:479: lines 479-485
		if ($right === 0) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:480: characters 4-15
			return $left;
		} else if ($left >= 0) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:482: characters 4-26
			return $left >> $right;
		} else {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:484: characters 4-56
			return ($left >> $right) & (2147483647 >> ($right - 1));
		}
	}

	/**
	 * @param mixed $value
	 * 
	 * @return string
	 */
	static public function stringify ($value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:326: lines 326-328
		if ($value === null) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:327: characters 4-17
			return "null";
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:329: lines 329-331
		if (is_string($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:330: characters 4-16
			return $value;
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:332: lines 332-334
		if (is_int($value) || is_float($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:333: characters 4-31
			return (string)($value);
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:335: lines 335-337
		if (is_bool($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:336: characters 11-35
			if ($value) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:336: characters 20-24
				return "true";
			} else {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:336: characters 29-34
				return "false";
			}
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:338: lines 338-344
		if (is_array($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:339: characters 4-37
			$strings = [];
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:340: lines 340-342
			foreach ($value as $key => $item) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:341: characters 32-71
				$tmp = ($key??'null') . " => " . (Boot::stringify($item)??'null');
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:341: characters 5-72
				array_push($strings, $tmp);
			};
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:343: characters 4-52
			return "[" . (implode(", ", $strings)??'null') . "]";
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:345: lines 345-371
		if (is_object($value)) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:346: lines 346-348
			if (method_exists($value, "toString")) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:347: characters 5-28
				return HxDynamicStr::wrap($value)->toString();
			}
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:349: lines 349-351
			if (method_exists($value, "__toString")) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:350: characters 5-30
				return $value->__toString();
			}
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:352: lines 352-362
			if (($value instanceof \StdClass)) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:353: characters 35-40
				$tmp1 = $value;
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:353: characters 43-51
				$tmp2 = "toString";
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:353: lines 353-355
				if (isset($tmp1->{$tmp2}) && is_callable(Boot::dynamicField($value, 'toString'))) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:354: characters 6-29
					return HxDynamicStr::wrap($value)->toString();
				}
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:356: characters 18-50
				$this1 = [];
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:356: characters 5-51
				$result = $this1;
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:357: characters 5-46
				$data = get_object_vars($value);
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: characters 17-34
				$_g_arr = array_keys($data);
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: characters 17-34
				$_g_hasMore = reset($_g_arr) !== false;
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: lines 358-360
				while ($_g_hasMore) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: lines 358-360
					$result1 = current($_g_arr);
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: lines 358-360
					$_g_hasMore = next($_g_arr) !== false;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:358: lines 358-360
					$key1 = $result1;
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:359: characters 24-56
					$tmp3 = "" . ($key1??'null') . " : " . (Boot::stringify($data[$key1])??'null');
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:359: characters 6-57
					array_push($result, $tmp3);
				}

				#C:\HaxeToolkit\haxe\std/php/Boot.hx:361: characters 5-54
				return "{ " . (implode(", ", $result)??'null') . " }";
			}
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:363: lines 363-365
			if (($value instanceof \Closure) || ($value instanceof HxClosure)) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:364: characters 5-24
				return "<function>";
			}
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:366: lines 366-370
			if (($value instanceof HxClass)) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:367: characters 5-72
				return "[class " . (Boot::getClassName($value->phpClassName)??'null') . "]";
			} else {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:369: characters 5-68
				return "[object " . (Boot::getClassName(get_class($value))??'null') . "]";
			}
		}
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:372: characters 3-8
		throw new HxException("Unable to stringify value");
	}

	/**
	 * @param HxClass $hxClass
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function typedCast ($hxClass, $value) {
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:293: characters 11-31
		$_g = $hxClass->phpClassName;
		#C:\HaxeToolkit\haxe\std/php/Boot.hx:293: characters 11-31
		switch ($_g) {
			case "Bool":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:303: lines 303-305
				if (is_bool($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:304: characters 6-18
					return $value;
				}
				break;
			case "Float":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:299: lines 299-301
				if (is_int($value) || is_float($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:300: characters 6-29
					return floatval($value);
				}
				break;
			case "Int":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:295: lines 295-297
				if (is_int($value) || is_float($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:296: characters 6-33
					return intval($value);
				}
				break;
			case "String":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:307: lines 307-309
				if (is_string($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:308: characters 6-18
					return $value;
				}
				break;
			case "php\\NativeArray":
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:311: lines 311-313
				if (is_array($value)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:312: characters 6-18
					return $value;
				}
				break;
			default:
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:315: lines 315-317
				if (is_object($value) && Boot::is($value, $hxClass)) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:316: characters 6-18
					return $value;
				}
				break;
		}

		#C:\HaxeToolkit\haxe\std/php/Boot.hx:319: characters 3-8
		throw new HxException("Cannot cast " . (\Std::string($value)??'null') . " to " . (Boot::getClassName($hxClass->phpClassName)??'null'));
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		#C:\HaxeToolkit\haxe\std/php/Boot.hx:51: lines 51-66
		if (!defined("HAXE_CUSTOM_ERROR_HANDLER") || !HAXE_CUSTOM_ERROR_HANDLER) {
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:52: characters 4-60
			$previousLevel = error_reporting(E_ALL);
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:53: lines 53-60
			$previousHandler = set_error_handler(function ($errno, $errstr, $errfile, $errline) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:55: lines 55-57
				if ((error_reporting() & $errno) === 0) {
					#C:\HaxeToolkit\haxe\std/php/Boot.hx:56: characters 7-19
					return false;
				}
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:58: characters 6-11
				throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
			});
			#C:\HaxeToolkit\haxe\std/php/Boot.hx:62: lines 62-65
			if ($previousHandler !== null) {
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:63: characters 5-42
				error_reporting($previousLevel);
				#C:\HaxeToolkit\haxe\std/php/Boot.hx:64: characters 5-46
				set_error_handler($previousHandler);
			}
		}

		$this1 = [];
		self::$aliases = $this1;
		$this1 = [];
		self::$classes = $this1;
		$this1 = [];
		self::$getters = $this1;
		$this1 = [];
		self::$setters = $this1;
		$this1 = [];
		self::$meta = $this1;
	}
}

require_once __DIR__.'/_polyfills.php';
Boot::__hx__init();
Boot::registerClass(Boot::class, 'php.Boot');
\php\Web::__hx__init();
\php\Session::__hx__init();
\me\cunity\php\_Services_JSON\_extern_Services_JSON::__hx__init();
\S::__hx__init();
