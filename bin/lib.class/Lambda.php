<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \php\Boot;
use \haxe\ds\List_hx;

class Lambda {
	/**
	 * @param object $it
	 * 
	 * @return \Array_hx
	 */
	static public function array ($it) {
		#lib/Lambda.hx:43: characters 3-26
		$a = new \Array_hx();
		#lib/Lambda.hx:44: characters 12-14
		$i = $it->iterator();
		#lib/Lambda.hx:44: characters 12-14
		while ($i->hasNext()) {
			#lib/Lambda.hx:44: lines 44-45
			$i1 = $i->next();
			#lib/Lambda.hx:45: characters 4-13
			$a->arr[$a->length] = $i1;
			#lib/Lambda.hx:45: characters 4-13
			++$a->length;
		}

		#lib/Lambda.hx:46: characters 3-11
		return $a;
	}

	/**
	 * @param object $a
	 * @param object $b
	 * 
	 * @return List_hx
	 */
	static public function concat ($a, $b) {
		#lib/Lambda.hx:271: characters 3-22
		$l = new List_hx();
		#lib/Lambda.hx:272: characters 13-14
		$x = $a->iterator();
		#lib/Lambda.hx:272: characters 13-14
		while ($x->hasNext()) {
			#lib/Lambda.hx:272: lines 272-273
			$x1 = $x->next();
			#lib/Lambda.hx:273: characters 4-12
			$l->add($x1);
		}

		#lib/Lambda.hx:274: characters 13-14
		$x2 = $b->iterator();
		#lib/Lambda.hx:274: characters 13-14
		while ($x2->hasNext()) {
			#lib/Lambda.hx:274: lines 274-275
			$x3 = $x2->next();
			#lib/Lambda.hx:275: characters 4-12
			$l->add($x3);
		}

		#lib/Lambda.hx:276: characters 3-11
		return $l;
	}

	/**
	 * @param object $it
	 * @param \Closure $pred
	 * 
	 * @return int
	 */
	static public function count ($it, $pred = null) {
		#lib/Lambda.hx:212: characters 3-13
		$n = 0;
		#lib/Lambda.hx:213: lines 213-219
		if ($pred === null) {
			#lib/Lambda.hx:214: characters 14-16
			$_ = $it->iterator();
			#lib/Lambda.hx:214: characters 14-16
			while ($_->hasNext()) {
				#lib/Lambda.hx:214: lines 214-215
				$_1 = $_->next();
				#lib/Lambda.hx:215: characters 5-8
				$n = $n + 1;
			}
		} else {
			#lib/Lambda.hx:217: characters 14-16
			$x = $it->iterator();
			#lib/Lambda.hx:217: characters 14-16
			while ($x->hasNext()) {
				#lib/Lambda.hx:217: lines 217-219
				$x1 = $x->next();
				#lib/Lambda.hx:218: lines 218-219
				if ($pred($x1)) {
					#lib/Lambda.hx:219: characters 6-9
					$n = $n + 1;
				}
			}
		}
		#lib/Lambda.hx:220: characters 3-11
		return $n;
	}

	/**
	 * @param object $it
	 * 
	 * @return bool
	 */
	static public function empty ($it) {
		#lib/Lambda.hx:227: characters 3-34
		return !$it->iterator()->hasNext();
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function exists ($it, $f) {
		#lib/Lambda.hx:116: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:116: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:116: lines 116-118
			$x1 = $x->next();
			#lib/Lambda.hx:117: lines 117-118
			if ($f($x1)) {
				#lib/Lambda.hx:118: characters 5-16
				return true;
			}
		}

		#lib/Lambda.hx:119: characters 3-15
		return false;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function filter ($it, $f) {
		#lib/Lambda.hx:180: characters 3-25
		$l = new List_hx();
		#lib/Lambda.hx:181: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:181: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:181: lines 181-183
			$x1 = $x->next();
			#lib/Lambda.hx:182: lines 182-183
			if ($f($x1)) {
				#lib/Lambda.hx:183: characters 5-13
				$l->add($x1);
			}
		}

		#lib/Lambda.hx:184: characters 3-11
		return $l;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return mixed
	 */
	static public function find ($it, $f) {
		#lib/Lambda.hx:258: characters 13-15
		$v = $it->iterator();
		#lib/Lambda.hx:258: characters 13-15
		while ($v->hasNext()) {
			#lib/Lambda.hx:258: lines 258-260
			$v1 = $v->next();
			#lib/Lambda.hx:259: characters 4-21
			if ($f($v1)) {
				#lib/Lambda.hx:259: characters 13-21
				return $v1;
			}
		}

		#lib/Lambda.hx:261: characters 3-14
		return null;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * @param mixed $first
	 * 
	 * @return mixed
	 */
	static public function fold ($it, $f, $first) {
		#lib/Lambda.hx:200: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:200: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:200: lines 200-201
			$x1 = $x->next();
			#lib/Lambda.hx:201: characters 4-22
			$first = $f($x1, $first);
		}

		#lib/Lambda.hx:202: characters 3-15
		return $first;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function foreach ($it, $f) {
		#lib/Lambda.hx:135: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:135: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:135: lines 135-137
			$x1 = $x->next();
			#lib/Lambda.hx:136: lines 136-137
			if (!$f($x1)) {
				#lib/Lambda.hx:137: characters 5-17
				return false;
			}
		}

		#lib/Lambda.hx:138: characters 3-14
		return true;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function forone ($it, $f) {
		#lib/Lambda.hx:154: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:154: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:154: lines 154-156
			$x1 = $x->next();
			#lib/Lambda.hx:155: lines 155-156
			if ($f($x1)) {
				#lib/Lambda.hx:156: characters 5-16
				return true;
			}
		}

		#lib/Lambda.hx:157: characters 3-15
		return false;
	}

	/**
	 * @param object $it
	 * @param mixed $elt
	 * 
	 * @return bool
	 */
	static public function has ($it, $elt) {
		#lib/Lambda.hx:99: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:99: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:99: lines 99-101
			$x1 = $x->next();
			#lib/Lambda.hx:100: lines 100-101
			if (Boot::equal($x1, $elt)) {
				#lib/Lambda.hx:101: characters 5-16
				return true;
			}
		}

		#lib/Lambda.hx:102: characters 3-15
		return false;
	}

	/**
	 * @param object $it
	 * @param mixed $v
	 * 
	 * @return int
	 */
	static public function indexOf ($it, $v) {
		#lib/Lambda.hx:238: characters 3-13
		$i = 0;
		#lib/Lambda.hx:239: characters 14-16
		$v2 = $it->iterator();
		#lib/Lambda.hx:239: characters 14-16
		while ($v2->hasNext()) {
			#lib/Lambda.hx:239: lines 239-243
			$v21 = $v2->next();
			#lib/Lambda.hx:240: lines 240-241
			if (Boot::equal($v, $v21)) {
				#lib/Lambda.hx:241: characters 5-13
				return $i;
			}
			#lib/Lambda.hx:242: characters 4-7
			$i = $i + 1;
		}

		#lib/Lambda.hx:244: characters 3-12
		return -1;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function iter ($it, $f) {
		#lib/Lambda.hx:167: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:167: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:167: lines 167-168
			$x1 = $x->next();
			#lib/Lambda.hx:168: characters 4-8
			$f($x1);
		}
	}

	/**
	 * @param object $it
	 * 
	 * @return List_hx
	 */
	static public function list ($it) {
		#lib/Lambda.hx:55: characters 3-25
		$l = new List_hx();
		#lib/Lambda.hx:56: characters 12-14
		$i = $it->iterator();
		#lib/Lambda.hx:56: characters 12-14
		while ($i->hasNext()) {
			#lib/Lambda.hx:56: lines 56-57
			$i1 = $i->next();
			#lib/Lambda.hx:57: characters 4-12
			$l->add($i1);
		}

		#lib/Lambda.hx:58: characters 3-11
		return $l;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function map ($it, $f) {
		#lib/Lambda.hx:69: characters 3-25
		$l = new List_hx();
		#lib/Lambda.hx:70: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:70: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:70: lines 70-71
			$x1 = $x->next();
			#lib/Lambda.hx:71: characters 4-15
			$l->add($f($x1));
		}

		#lib/Lambda.hx:72: characters 3-11
		return $l;
	}

	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function mapi ($it, $f) {
		#lib/Lambda.hx:83: characters 3-25
		$l = new List_hx();
		#lib/Lambda.hx:84: characters 3-13
		$i = 0;
		#lib/Lambda.hx:85: characters 13-15
		$x = $it->iterator();
		#lib/Lambda.hx:85: characters 13-15
		while ($x->hasNext()) {
			#lib/Lambda.hx:85: lines 85-86
			$x1 = $x->next();
			#lib/Lambda.hx:86: characters 12-15
			$i = $i + 1;
			#lib/Lambda.hx:86: characters 4-19
			$l->add($f($i - 1, $x1));
		}

		#lib/Lambda.hx:87: characters 3-11
		return $l;
	}
}

Boot::registerClass(Lambda::class, 'Lambda');
