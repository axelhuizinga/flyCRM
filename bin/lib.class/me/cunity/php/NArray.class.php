<?php

// Generated by Haxe 3.4.4
class me_cunity_php_NArray {
	public function __construct(){}
	static function narray($init = null) {
		$arr = array();
		if($init !== null) {
			if(_hx_field($init, "pop") !== null) {
				$_g1 = 0;
				$_g = _hx_field($init, "length");
				while($_g1 < $_g) {
					$_g1 = $_g1 + 1;
					$i = $_g1 - 1;
					array_push($arr, $init[$i]);
					unset($i);
				}
			} else {
				array_push($arr, $init);
			}
		}
		return $arr;
	}
	static function get($arr, $key) {
		return $arr['$key'];
	}
	static function set($arr, $key, $value) {
		$arr['$key']=$value;
		$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		$tmp1 = "" . _hx_string_or_null($key) . "=>" . Std::string($value) . ":";
		call_user_func_array($tmp, array($tmp1, _hx_anonymous(array("fileName" => "NArray.hx", "lineNumber" => 53, "className" => "me.cunity.php.NArray", "methodName" => "set"))));
	}
	static function push($arr, $els) {
		if(_hx_field($els, "pop") !== null) {
			$_g1 = 0;
			$_g = _hx_field($els, "length");
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				array_push($arr, $els[$i]);
				unset($i);
			}
		} else {
			array_push($arr, $els);
		}
		return call_user_func_array($__php__, array("count(" . Std::string($arr) . ")"));
	}
	static function remove($arr, $x) {
		return call_user_func_array($__php__, array("\x0D\x0A\x09\x09function(" . Std::string($arr) . ", " . Std::string($x) . "){\x0D\x0A\x09\x09for(" . _hx_string_or_null($i) . "=0;" . _hx_string_or_null($i) . "<count(" . Std::string($arr) . ");" . _hx_string_or_null($i) . "++)\x0D\x0A\x09\x09\x09if(" . Std::string($arr) . "[" . _hx_string_or_null($i) . "] === " . Std::string($x) . ") {\x0D\x0A\x09\x09\x09\x09array_splice(" . Std::string($arr) . ", " . _hx_string_or_null($i) . ", 1);\x0D\x0A\x09\x09\x09\x09return true;\x0D\x0A\x09\x09\x09}\x0D\x0A\x09\x09return false; }; "));
	}
	static function array_shift($arr) {
		return array_shift($arr);
	}
	static function toString($arr) {
		$s = "";
		
		$a = array();
		foreach($arr as $k => $v )
			array_push($a,'$k:$v');
		$s = implode(',', $a); 
		return "{" . _hx_string_or_null($s) . "}";
	}
	function __toString() { return 'me.cunity.php.NArray'; }
}
