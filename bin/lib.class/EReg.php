<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

final class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var string
	 */
	public $re;

	/**
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:37: characters 3-19
		$this->pattern = $r;
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:38: characters 3-26
		$a = \Array_hx::wrap(explode("g", $opt));
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:39: characters 3-24
		$this->global = $a->length > 1;
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:40: lines 40-42
		if ($this->global) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:41: characters 4-20
			$opt = $a->join("");
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:43: characters 3-21
		$this->options = $opt;
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:44: characters 3-64
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($opt??'null');
	}

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:48: characters 3-78
		$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:50: lines 50-54
		if ($p > 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:51: characters 4-12
			$this->last = $s;
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:53: characters 4-15
			$this->last = null;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:55: characters 3-15
		return $p > 0;
	}

	/**
	 * @param int $n
	 * 
	 * @return string
	 */
	public function matched ($n) {
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:59: characters 3-39
		if (($this->matches === null) || ($n < 0)) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:59: characters 34-39
			throw new HxException("EReg::matched");
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:62: characters 3-46
		if ($n >= count($this->matches)) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:62: characters 35-46
			return null;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:63: characters 3-43
		if ($this->matches[$n][1] < 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:63: characters 32-43
			return null;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:64: characters 3-23
		return $this->matches[$n][0];
	}

	/**
	 * @return object
	 */
	public function matchedPos () {
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:80: characters 10-23
		$tmp = $this->matches[0][1];
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:79: lines 79-82
		return new HxAnon([
			"pos" => $tmp,
			"len" => strlen($this->matches[0][0]),
		]);
	}

	/**
	 * @return string
	 */
	public function matchedRight () {
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:73: characters 3-40
		if (count($this->matches) === 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:73: characters 35-40
			throw new HxException("No string matched");
		}
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:74: characters 3-68
		$x = $this->matches[0][1] + strlen($this->matches[0][0]);
		#C:\HaxeToolkit\haxe\std/php/_std/EReg.hx:75: characters 3-24
		return HxString::substr($this->last, $x);
	}
}

Boot::registerClass(EReg::class, 'EReg');
