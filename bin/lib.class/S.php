<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \php\_Boot\HxClosure;
use \me\cunity\php\Debug;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxDynamicStr;
use \haxe\Log;
use \php\_Boot\HxString;
use \php\Lib;
use \php\Web;
use \haxe\Json;
use \php\_Boot\HxAnon;
use \php\Session;

class S {
	/**
	 * @var bool
	 */
	const debug = true;

	/**
	 * @var StringMap
	 */
	static public $conf;
	/**
	 * @var string
	 */
	static public $db;
	/**
	 * @var string
	 */
	static public $dbHost;
	/**
	 * @var string
	 */
	static public $dbPass;
	/**
	 * @var string
	 */
	static public $dbUser;
	/**
	 * @var bool
	 */
	static public $headerSent = false;
	/**
	 * @var string
	 */
	static public $host;
	/**
	 * @var \mysqli
	 */
	static public $my;
	/**
	 * @var string
	 */
	static public $request_scheme;
	/**
	 * @var string
	 */
	static public $user;
	/**
	 * @var string
	 */
	static public $vicidialPass;
	/**
	 * @var string
	 */
	static public $vicidialUser;

	/**
	 * @return bool
	 */
	static public function checkAuth () {
		#src/S.hx:101: characters 3-38
		S::$user = Session::get("PHP_AUTH_USER");
		#src/S.hx:102: characters 3-8
		(Log::$trace)(S::$user, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 102,
			"className" => "S",
			"methodName" => "checkAuth",
		]));
		#src/S.hx:103: lines 103-104
		if (S::$user === null) {
			#src/S.hx:104: characters 4-16
			return false;
		}
		#src/S.hx:105: characters 3-48
		$pass = Session::get("PHP_AUTH_PW");
		#src/S.hx:106: lines 106-107
		if ($pass === null) {
			#src/S.hx:107: characters 4-16
			return false;
		}
		#src/S.hx:109: lines 109-111
		$res = Lib::hashOfAssociativeArray((new \Model())->query("SELECT use_non_latin,webroot_writable,pass_hash_enabled,pass_key,pass_cost,hosted_settings FROM system_settings"));
		#src/S.hx:118: characters 4-25
		$auth = "";
		#src/S.hx:119: lines 119-126
		try {
			#src/S.hx:120: characters 5-78
			$auth = user_authorization(S::$user, $pass, "", 1, -1, 1, 0);
			#src/S.hx:121: characters 5-10
			(Log::$trace)($auth, new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 121,
				"className" => "S",
				"methodName" => "checkAuth",
			]));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$ex = $__hx__real_e;
			#src/S.hx:125: characters 5-10
			(Log::$trace)($ex, new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 125,
				"className" => "S",
				"methodName" => "checkAuth",
			]));
		}
		#src/S.hx:127: characters 4-36
		return HxString::indexOf($auth, "GOOD") === 0;
	}

	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function dump ($d) {
		#src/S.hx:152: lines 152-156
		if (!S::$headerSent) {
			#src/S.hx:154: characters 4-53
			header("Content-Type" . ": " . "application/json");
			#src/S.hx:155: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:158: characters 3-33
		Lib::println(Json::phpJsonEncode($d, null, null));
	}

	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function edump ($d) {
		#src/S.hx:163: characters 11-31
		edump($d);
	}

	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function exit ($d) {
		#src/S.hx:141: lines 141-145
		if (!S::$headerSent) {
			#src/S.hx:143: characters 4-53
			header("Content-Type" . ": " . "application/json");
			#src/S.hx:144: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:146: characters 3-66
		$exitValue = json_encode(new HxAnon(["ERROR" => $d]));
		#src/S.hx:147: characters 18-45
		exit($exitValue);
		#src/S.hx:147: characters 3-45
		return;
	}

	/**
	 * @return void
	 */
	static public function main () {
		#src/S.hx:50: characters 3-32
		Log::$trace = new HxClosure(Debug::class, '_trace');
		#src/S.hx:51: characters 3-36
		S::$conf = \Config::load("appData.js");
		#src/S.hx:53: characters 3-18
		Session::start();
		#src/S.hx:55: characters 3-38
		$pd = Web::getPostData();
		#src/S.hx:56: characters 3-70
		$now = \DateTools::format(\Date::now(), "%d.%m.%y %H:%M:%S");
		#src/S.hx:57: characters 3-8
		(Log::$trace)($pd, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 57,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:58: characters 3-50
		$params = Web::getParams();
		#src/S.hx:59: lines 59-65
		if (($params->data["debug"] ?? null) === "1") {
			#src/S.hx:61: characters 4-61
			header("Content-Type" . ": " . "text/html; charset=utf-8");
			#src/S.hx:62: characters 4-21
			S::$headerSent = true;
			#src/S.hx:63: characters 4-29
			Lib::println("<div><pre>");
			#src/S.hx:64: characters 4-23
			Lib::println($params);
		}
		#src/S.hx:66: characters 3-8
		(Log::$trace)(\Date::now()->toString(), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 66,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:67: characters 3-8
		(Log::$trace)($params, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 67,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:69: characters 3-44
		$action = ($params->data["action"] ?? null);
		#src/S.hx:70: lines 70-74
		if ((strlen($action) === 0) || (($params->data["className"] ?? null) === null)) {
			#src/S.hx:72: characters 4-47
			S::dump(new HxAnon(["error" => "required params missing"]));
			#src/S.hx:73: characters 4-10
			return;
		}
		#src/S.hx:76: characters 3-46
		S::$my = new \mysqli(S::$dbHost, S::$dbUser, S::$dbPass, S::$db);
		#src/S.hx:77: characters 3-25
		S::$my->set_charset("utf8");
		#src/S.hx:79: characters 3-31
		$auth = S::checkAuth();
		#src/S.hx:81: characters 3-8
		(Log::$trace)(($action??'null') . ":" . (\Std::string($auth)??'null'), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 81,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:82: lines 82-86
		if (!$auth) {
			#src/S.hx:84: characters 4-24
			S::exit("AUTH FAILURE");
			#src/S.hx:85: characters 4-10
			return;
		}
		#src/S.hx:87: characters 3-63
		$result = \Model::dispatch($params);
		#src/S.hx:89: characters 3-8
		(Log::$trace)($result, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 89,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:90: lines 90-94
		if (!S::$headerSent) {
			#src/S.hx:92: characters 4-53
			header("Content-Type" . ": " . "application/json");
			#src/S.hx:93: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:95: characters 3-23
		Lib::println($result);
	}

	/**
	 * @return int
	 */
	static public function newMemberID () {
		#src/S.hx:167: lines 167-169
		$res = S::$my->query("SELECT  MAX(CAST(vendor_lead_code AS UNSIGNED)) FROM vicidial_list WHERE list_id=10000");
		#src/S.hx:170: characters 10-87
		if ($res->num_rows === 0) {
			#src/S.hx:170: characters 29-30
			return 1;
		} else {
			#src/S.hx:170: characters 33-86
			return \Std::parseInt($res->fetch_array(2)[0]) + 1;
		}
	}

	/**
	 * @param string $table
	 * @param string $db
	 * 
	 * @return \Array_hx
	 */
	static public function tableFields ($table, $db = "asterisk") {
		#src/S.hx:174: lines 174-184
		if ($db === null) {
			#src/S.hx:174: lines 174-184
			$db = "asterisk";
		}
		#src/S.hx:175: lines 175-176
		$res = S::$my->query("SELECT GROUP_CONCAT(COLUMN_NAME) FROM information_schema.columns WHERE table_schema = \"" . ($db??'null') . "\" AND table_name = \"" . ($table??'null') . "\";");
		#src/S.hx:177: characters 7-21
		$v = $res;
		#src/S.hx:177: lines 177-182
		if (($v !== null) && !Boot::equal($v, 0) && ($v !== "") && ($res->num_rows === 1)) {
			#src/S.hx:181: characters 4-59
			return HxDynamicStr::wrap($res->fetch_array(2)[0])->split(",");
		}
		#src/S.hx:183: characters 3-14
		return null;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		#src/S.hx:187: characters 11-65
		require_once("../../config/flyCRM.db.php");
		#src/S.hx:188: characters 11-62
		require_once("../../crm/functions.php");
		#src/S.hx:189: characters 11-73
		require_once("../../crm/loadAstguiclientConf.php");
		#src/S.hx:190: characters 11-63
		require_once("../agc/functions.fix.php");
		#src/S.hx:191: characters 3-45
		Debug::$logFile = $appLog;
		#src/S.hx:194: characters 3-33
		S::$db = $VARDB;
		#src/S.hx:195: characters 3-44
		S::$dbHost = $VARDB_server;
		#src/S.hx:196: characters 3-42
		S::$dbUser = $VARDB_user;
		#src/S.hx:197: characters 3-42
		S::$dbPass = $VARDB_pass;
		#src/S.hx:198: characters 3-27
		S::$host = $_SERVER["SERVER_NAME"];
		#src/S.hx:199: characters 3-65
		S::$request_scheme = $_SERVER['REQUEST_SCHEME'];
		#src/S.hx:201: characters 3-42
		S::$vicidialUser = $user;
		#src/S.hx:202: characters 3-42
		S::$vicidialPass = $pass;

	}
}

Boot::registerClass(S::class, 'S');
S::__hx__init();
