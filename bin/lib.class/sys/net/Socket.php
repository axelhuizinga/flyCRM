<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

namespace sys\net;

use \sys\io\FileInput;
use \haxe\io\Output;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Input;
use \sys\io\FileOutput;
use \haxe\io\Error;

class Socket {
	/**
	 * @var mixed
	 */
	public $__s;
	/**
	 * @var Input
	 */
	public $input;
	/**
	 * @var Output
	 */
	public $output;
	/**
	 * @var string
	 */
	public $protocol;
	/**
	 * @var mixed
	 */
	public $stream;

	/**
	 * @param bool $r
	 * @param int $code
	 * @param string $msg
	 * 
	 * @return void
	 */
	static public function checkError ($r, $code, $msg) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:145: characters 3-24
		if ($r !== false) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:145: characters 18-24
			return;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:146: characters 3-8
		throw new HxException(Error::Custom("Error [" . ($code??'null') . "]: " . ($msg??'null')));
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:42: characters 3-53
		$this->input = new FileInput(null);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:43: characters 3-55
		$this->output = new FileOutput(null);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:44: characters 3-15
		$this->initSocket();
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:45: characters 3-19
		$this->protocol = "tcp";
	}

	/**
	 * @return void
	 */
	public function assignHandler () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:53: characters 3-37
		$this->stream = socket_export_stream($this->__s);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:54: characters 19-54
		$this->input->__f = $this->stream;
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:55: characters 19-56
		$this->output->__f = $this->stream;
	}

	/**
	 * @return void
	 */
	public function close () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:59: characters 3-20
		socket_close($this->__s);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:60: characters 19-52
		$this->input->__f = null;
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:61: characters 19-54
		$this->output->__f = null;
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:62: characters 3-16
		$this->input->close();
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:63: characters 3-17
		$this->output->close();
	}

	/**
	 * @param Host $host
	 * @param int $port
	 * 
	 * @return void
	 */
	public function connect ($host, $port) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:77: characters 3-48
		$r = socket_connect($this->__s, $host->host, $port);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:78: characters 3-40
		Socket::checkError($r, 0, "Unable to connect");
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:79: characters 3-18
		$this->assignHandler();
	}

	/**
	 * @return void
	 */
	public function initSocket () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:49: characters 3-53
		$this->__s = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
	}

	/**
	 * @param float $timeout
	 * 
	 * @return void
	 */
	public function setTimeout ($timeout) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:124: characters 3-28
		$s = (int)($timeout);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:125: characters 3-45
		$ms = (int)(($timeout - $s) * 1000000);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:126: characters 3-42
		$r = stream_set_timeout($this->__s, $s, $ms);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:127: characters 3-44
		Socket::checkError($r, 0, "Unable to set timeout");
	}

	/**
	 * @param bool $read
	 * @param bool $write
	 * 
	 * @return void
	 */
	public function shutdown ($read, $write) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:89: characters 3-61
		$rw = ($read && $write ? 2 : ($write ? 1 : ($read ? 0 : 2)));
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:90: characters 3-36
		$r = socket_shutdown($this->__s, $rw);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:91: characters 3-41
		Socket::checkError($r, 0, "Unable to shutdown");
	}

	/**
	 * @param string $content
	 * 
	 * @return void
	 */
	public function write ($content) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/net/Socket.hx:73: characters 3-26
		fwrite($this->stream, $content);
	}
}

Boot::registerClass(Socket::class, 'sys.net.Socket');
