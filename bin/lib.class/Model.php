<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\Lib;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class Model {
	/**
	 * @var StringMap
	 */
	static public $KEYWORDS;

	/**
	 * @var object
	 */
	public $data;
	/**
	 * @var string
	 */
	public $db;
	/**
	 * @var mixed
	 */
	public $globals;
	/**
	 * @var string
	 */
	public $joinTable;
	/**
	 * @var int
	 */
	public $num_rows;
	/**
	 * @var StringMap
	 */
	public $param;
	/**
	 * @var string
	 */
	public $primary;
	/**
	 * @var string
	 */
	public $table;

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function dispatch ($param) {
		#src/Model.hx:63: characters 3-80
		$cl = \Type::resolveClass("model." . (\Std::string(($param->data["className"] ?? null))??'null'));
		#src/Model.hx:65: lines 65-69
		if ($cl === null) {
			#src/Model.hx:67: characters 4-9
			(Log::$trace)("model." . (\Std::string(($param->data["className"] ?? null))??'null') . " ???", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 67,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:68: characters 4-16
			return false;
		}
		#src/Model.hx:70: characters 3-48
		$fl = \Reflect::field($cl, "create");
		#src/Model.hx:72: lines 72-76
		if ($fl === null) {
			#src/Model.hx:74: characters 4-9
			(Log::$trace)((\Std::string($cl)??'null') . "create is null", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 74,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:75: characters 4-16
			return false;
		}
		#src/Model.hx:77: characters 3-58
		$iFields = \Type::getInstanceFields($cl);
		#src/Model.hx:79: lines 79-88
		if (\Lambda::has($iFields, ($param->data["action"] ?? null))) {
			#src/Model.hx:81: characters 4-9
			(Log::$trace)("calling create " . (\Std::string($cl)??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 81,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:82: characters 4-46
			return \Reflect::callMethod($cl, $fl, \Array_hx::wrap([$param]));
		} else {
			#src/Model.hx:86: characters 4-9
			(Log::$trace)("not calling create ", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 86,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:87: characters 4-16
			return false;
		}
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/Model.hx:490: characters 3-21
		$this->param = $param;
		#src/Model.hx:491: lines 491-496
		if (($param !== null) && (($param->data["firstLoad"] ?? null) === "true")) {
			#src/Model.hx:493: characters 4-9
			(Log::$trace)("firstLoad", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 493,
				"className" => "Model",
				"methodName" => "new",
			]));
			#src/Model.hx:494: characters 4-17
			$this->globals = new HxAnon();
			#src/Model.hx:495: characters 4-91
			$this->globals->users = $this->query("SELECT full_name, user, active, user_group FROM vicidial_users");
		}
	}

	/**
	 * @param string $whereParam
	 * @param \StringBuf $sob
	 * @param \Array_hx $phValues
	 * @param bool $first
	 * 
	 * @return bool
	 */
	public function buildCond ($whereParam, $sob, $phValues, $first = true) {
		#src/Model.hx:376: lines 376-451
		if ($first === null) {
			#src/Model.hx:376: lines 376-451
			$first = true;
		}
		#src/Model.hx:377: characters 3-38
		$sb = new \StringBuf();
		#src/Model.hx:378: characters 3-52
		$where = \Array_hx::wrap(explode(",", $whereParam));
		#src/Model.hx:380: lines 380-381
		if ($where->length === 0) {
			#src/Model.hx:381: characters 4-16
			return false;
		}
		#src/Model.hx:383: lines 383-448
		$_g = 0;
		#src/Model.hx:383: lines 383-448
		while ($_g < $where->length) {
			#src/Model.hx:383: characters 8-9
			$w = ($where->arr[$_g] ?? null);
			#src/Model.hx:383: lines 383-448
			$_g = $_g + 1;
			#src/Model.hx:386: characters 4-43
			$wData = HxDynamicStr::wrap($w)->split("|");
			#src/Model.hx:387: characters 4-46
			$values = $wData->slice(2);
			#src/Model.hx:389: characters 4-43
			$filter_tables = null;
			#src/Model.hx:390: characters 8-98
			$tmp = null;
			#src/Model.hx:390: characters 8-24
			$v = $this->param;
			#src/Model.hx:390: characters 8-98
			if (($v !== null) && !Boot::equal($v, 0) && ($v !== "") && array_key_exists("filter_tables", $this->param->data)) {
				#src/Model.hx:390: characters 61-98
				$v1 = ($this->param->data["filter_tables"] ?? null);
				#src/Model.hx:390: characters 8-98
				$tmp = ($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "");
			} else {
				#src/Model.hx:390: characters 8-98
				$tmp = false;
			}
			#src/Model.hx:390: lines 390-394
			if ($tmp) {
				#src/Model.hx:392: characters 5-48
				$jt = ($this->param->data["filter_tables"] ?? null);
				#src/Model.hx:393: characters 5-34
				$filter_tables = \Array_hx::wrap(explode(",", $jt));
			}
			#src/Model.hx:396: characters 4-9
			(Log::$trace)((\Std::string($wData)??'null') . ":" . ($this->joinTable??'null') . ":" . (\Std::string($filter_tables)??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 396,
				"className" => "Model",
				"methodName" => "buildCond",
			]));
			#src/Model.hx:397: characters 8-83
			$tmp1 = null;
			#src/Model.hx:397: characters 8-83
			if ((new \EReg("^pay_[a-zA-Z_]+\\.", ""))->match(($wData->arr[0] ?? null))) {
				#src/Model.hx:397: characters 48-67
				$_this = ($wData->arr[0] ?? null);
				#src/Model.hx:397: characters 8-83
				$tmp1 = (\Array_hx::wrap(explode(".", $_this))->arr[0] ?? null) !== $this->joinTable;
			} else {
				#src/Model.hx:397: characters 8-83
				$tmp1 = false;
			}
			#src/Model.hx:397: lines 397-400
			if ($tmp1) {
				#src/Model.hx:399: characters 5-13
				continue;
			}
			#src/Model.hx:402: lines 402-405
			if ($first) {
				#src/Model.hx:403: characters 5-23
				$sb->add(" WHERE ");
			} else {
				#src/Model.hx:405: characters 5-20
				$sb->add(" AND ");
			}
			#src/Model.hx:406: characters 4-17
			$first = false;
			#src/Model.hx:408: characters 11-33
			$_g1 = strtoupper(($wData->arr[1] ?? null));
			#src/Model.hx:408: characters 11-33
			switch ($_g1) {
				case "BETWEEN":
					#src/Model.hx:411: lines 411-412
					if (($values->length !== 2) && \Lambda::foreach($values, function ($s) {
						#src/Model.hx:411: characters 76-88
						$v2 = $s;
						#src/Model.hx:411: characters 76-88
						if (($v2 !== null) && !Boot::equal($v2, 0)) {
							#src/Model.hx:411: characters 76-88
							return $v2 !== "";
						} else {
							#src/Model.hx:411: characters 76-88
							return false;
						}
					})) {
						#src/Model.hx:412: characters 7-71
						\S::exit("BETWEEN needs 2 values - got only:" . ($values->join(",")??'null'));
					}
					#src/Model.hx:413: characters 6-34
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					#src/Model.hx:414: characters 6-32
					$sb->add(" BETWEEN ? AND ?");
					#src/Model.hx:415: characters 6-42
					$phValues->arr[$phValues->length] = \Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[0] ?? null),
					]);
					#src/Model.hx:415: characters 6-42
					++$phValues->length;

					#src/Model.hx:416: characters 6-42
					$phValues->arr[$phValues->length] = \Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[1] ?? null),
					]);
					#src/Model.hx:416: characters 6-42
					++$phValues->length;

					break;
				case "IN":
					#src/Model.hx:418: characters 6-34
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					#src/Model.hx:419: characters 6-20
					$sb->add(" IN(");
					#src/Model.hx:420: lines 420-423
					$result = [];
					#src/Model.hx:420: lines 420-423
					$_g11 = 0;
					#src/Model.hx:420: lines 420-423
					$_g2 = $values->length;
					#src/Model.hx:420: lines 420-423
					while ($_g11 < $_g2) {
						#src/Model.hx:420: lines 420-423
						$_g11 = $_g11 + 1;
						#src/Model.hx:420: lines 420-423
						$i = $_g11 - 1;
						#src/Model.hx:420: lines 420-423
						$s1 = $values->arr[$i];
						#src/Model.hx:421: characters 22-30
						$wData1 = ($wData->arr[0] ?? null);
						#src/Model.hx:421: characters 32-46
						if ($values->length > 0) {
							#src/Model.hx:421: characters 32-46
							$values->length--;
						}
						#src/Model.hx:421: characters 7-48
						$x = \Array_hx::wrap([
							$wData1,
							array_shift($values->arr),
						]);
						#src/Model.hx:421: characters 7-48
						$phValues->arr[$phValues->length] = $x;
						#src/Model.hx:421: characters 7-48
						++$phValues->length;

						#src/Model.hx:420: lines 420-423
						$result[] = "?";

					}

					#src/Model.hx:420: lines 420-423
					$sb->add(\Array_hx::wrap($result)->join(","));
					#src/Model.hx:424: characters 6-17
					$sb->add(")");
					break;
				case "LIKE":
					#src/Model.hx:426: characters 6-34
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					#src/Model.hx:427: characters 6-23
					$sb->add(" LIKE ?");
					#src/Model.hx:428: characters 6-41
					$phValues->arr[$phValues->length] = \Array_hx::wrap([
						($wData->arr[0] ?? null),
						($wData->arr[2] ?? null),
					]);
					#src/Model.hx:428: characters 6-41
					++$phValues->length;

					break;
				default:
					#src/Model.hx:430: characters 6-34
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					#src/Model.hx:431: lines 431-439
					if ((new \EReg("^(<|>)", ""))->match(($wData->arr[1] ?? null))) {
						#src/Model.hx:433: characters 7-31
						$eR = new \EReg("^(<|>)", "");
						#src/Model.hx:434: characters 7-25
						$eR->match(($wData->arr[1] ?? null));
						#src/Model.hx:435: characters 7-51
						$val = \Std::parseFloat($eR->matchedRight());
						#src/Model.hx:436: characters 7-34
						$sb->add(($eR->matched(0)??'null') . "?");
						#src/Model.hx:437: characters 7-36
						$phValues->arr[$phValues->length] = \Array_hx::wrap([
							($wData->arr[0] ?? null),
							$val,
						]);
						#src/Model.hx:437: characters 7-36
						++$phValues->length;

						#src/Model.hx:438: characters 7-15
						continue 2;
					}
					#src/Model.hx:441: lines 441-446
					if (($wData->arr[1] ?? null) === "NULL") {
						#src/Model.hx:442: characters 7-25
						$sb->add(" IS NULL");
					} else {
						#src/Model.hx:444: characters 7-21
						$sb->add(" = ?");
						#src/Model.hx:445: characters 7-41
						$phValues->arr[$phValues->length] = \Array_hx::wrap([
							($wData->arr[0] ?? null),
							($wData->arr[1] ?? null),
						]);
						#src/Model.hx:445: characters 7-41
						++$phValues->length;

					}
					break;
			}

		}

		#src/Model.hx:449: characters 3-25
		$sob->add($sb->b);
		#src/Model.hx:450: characters 3-14
		return true;
	}

	/**
	 * @param string $groupParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildGroup ($groupParam, $sb) {
		#src/Model.hx:453: lines 453-462
		$_gthis = $this;
		#src/Model.hx:456: characters 3-52
		$fields = \Array_hx::wrap(explode(",", $groupParam));
		#src/Model.hx:457: lines 457-458
		if ($fields->length === 0) {
			#src/Model.hx:458: characters 4-16
			return false;
		}
		#src/Model.hx:459: characters 3-23
		$sb->add(" GROUP BY ");
		#src/Model.hx:460: characters 10-62
		$result = [];
		#src/Model.hx:460: characters 10-62
		$_g1 = 0;
		#src/Model.hx:460: characters 10-62
		$_g = $fields->length;
		#src/Model.hx:460: characters 10-62
		while ($_g1 < $_g) {
			#src/Model.hx:460: characters 10-62
			$_g1 = $_g1 + 1;
			#src/Model.hx:460: characters 10-62
			$i = $_g1 - 1;
			#src/Model.hx:460: characters 10-62
			$result[] = $_gthis->quoteField($fields->arr[$i]);
		}

		#src/Model.hx:460: characters 3-73
		$sb->add(\Array_hx::wrap($result)->join(","));
		#src/Model.hx:461: characters 3-14
		return true;
	}

	/**
	 * @param string $limitParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildLimit ($limitParam, $sb) {
		#src/Model.hx:480: lines 480-481
		$tmp = null;
		#src/Model.hx:480: lines 480-481
		if (HxString::indexOf($limitParam, ",") > -1) {
			#src/Model.hx:480: characters 54-126
			$_this = \Array_hx::wrap(explode(",", $limitParam));
			#src/Model.hx:480: characters 54-126
			$result = [];
			#src/Model.hx:480: characters 54-126
			$_g1 = 0;
			#src/Model.hx:480: characters 54-126
			$_g = $_this->length;
			#src/Model.hx:480: characters 54-126
			while ($_g1 < $_g) {
				#src/Model.hx:480: characters 54-126
				$_g1 = $_g1 + 1;
				#src/Model.hx:480: characters 54-126
				$i = $_g1 - 1;
				#src/Model.hx:480: characters 54-126
				$result[] = \Std::parseInt($_this->arr[$i]);
			}

			#src/Model.hx:480: lines 480-481
			$tmp = \Array_hx::wrap($result)->join(",");
		} else {
			#src/Model.hx:480: lines 480-481
			$tmp = \Std::string(\Std::parseInt($limitParam));
		}
		#src/Model.hx:480: lines 480-481
		$sb->add(" LIMIT " . ($tmp??'null'));
		#src/Model.hx:482: characters 3-14
		return true;
	}

	/**
	 * @param string $orderParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildOrder ($orderParam, $sb) {
		#src/Model.hx:464: lines 464-476
		$_gthis = $this;
		#src/Model.hx:466: characters 3-52
		$fields = \Array_hx::wrap(explode(",", $orderParam));
		#src/Model.hx:467: lines 467-468
		if ($fields->length === 0) {
			#src/Model.hx:468: characters 4-16
			return false;
		}
		#src/Model.hx:469: characters 3-23
		$sb->add(" ORDER BY ");
		#src/Model.hx:470: lines 470-474
		$result = [];
		#src/Model.hx:470: lines 470-474
		$_g1 = 0;
		#src/Model.hx:470: lines 470-474
		$_g = $fields->length;
		#src/Model.hx:470: lines 470-474
		while ($_g1 < $_g) {
			#src/Model.hx:470: lines 470-474
			$_g1 = $_g1 + 1;
			#src/Model.hx:470: lines 470-474
			$i = $_g1 - 1;
			#src/Model.hx:472: characters 4-39
			$g = \Array_hx::wrap(explode("|", $fields->arr[$i]));
			#src/Model.hx:470: lines 470-474
			$result[] = ($_gthis->quoteField(($g->arr[0] ?? null))??'null') . (((($g->length === 2) && (($g->arr[1] ?? null) === "DESC") ? " DESC" : ""))??'null');

		}

		#src/Model.hx:470: lines 470-474
		$sb->add(\Array_hx::wrap($result)->join(","));
		#src/Model.hx:475: characters 3-14
		return true;
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return int
	 */
	public function count ($q, $sb, $phValues) {
		#src/Model.hx:93: characters 3-39
		$fields = ($q->data["fields"] ?? null);
		#src/Model.hx:94: characters 3-8
		$tmp = Log::$trace;
		#src/Model.hx:94: characters 10-41
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		#src/Model.hx:94: characters 45-70
		$v = ($q->data["table"] ?? null);
		#src/Model.hx:94: characters 3-8
		$tmp(($tmp1??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? ($q->data["table"] ?? null) : $this->table))??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 94,
			"className" => "Model",
			"methodName" => "count",
		]));
		#src/Model.hx:96: characters 3-37
		$sb->add("SELECT COUNT(*) AS count");
		#src/Model.hx:97: characters 24-49
		$v1 = ($q->data["table"] ?? null);
		#src/Model.hx:97: characters 3-76
		$qTable = (($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? ($q->data["table"] ?? null) : $this->table);
		#src/Model.hx:98: characters 26-54
		$v2 = ($q->data["joincond"] ?? null);
		#src/Model.hx:98: characters 3-83
		$joinCond = (($v2 !== null) && !Boot::equal($v2, 0) && ($v2 !== "") ? ($q->data["joincond"] ?? null) : null);
		#src/Model.hx:99: characters 27-56
		$v3 = ($q->data["jointable"] ?? null);
		#src/Model.hx:99: characters 3-86
		$joinTable = (($v3 !== null) && !Boot::equal($v3, 0) && ($v3 !== "") ? ($q->data["jointable"] ?? null) : null);
		#src/Model.hx:102: characters 3-53
		$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		#src/Model.hx:103: characters 3-37
		$where = ($q->data["where"] ?? null);
		#src/Model.hx:104: lines 104-105
		if ($where !== null) {
			#src/Model.hx:105: characters 4-34
			$this->buildCond($where, $sb, $phValues);
		}
		#src/Model.hx:107: characters 10-86
		return (Lib::hashOfAssociativeArray($this->execute($sb->b, $phValues)[0])->data["count"] ?? null);
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return int
	 */
	public function countJoin ($q, $sb, $phValues) {
		#src/Model.hx:113: characters 3-39
		$fields = ($q->data["fields"] ?? null);
		#src/Model.hx:115: characters 3-8
		$tmp = Log::$trace;
		#src/Model.hx:115: characters 10-41
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		#src/Model.hx:115: characters 46-71
		$v = ($q->data["table"] ?? null);
		#src/Model.hx:115: characters 3-8
		$tmp(($tmp1??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? ($q->data["table"] ?? null) : $this->table))??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 115,
			"className" => "Model",
			"methodName" => "countJoin",
		]));
		#src/Model.hx:117: characters 3-37
		$sb->add("SELECT COUNT(*) AS count");
		#src/Model.hx:118: characters 24-49
		$v1 = ($q->data["table"] ?? null);
		#src/Model.hx:118: characters 3-76
		$qTable = (($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? ($q->data["table"] ?? null) : $this->table);
		#src/Model.hx:119: characters 26-54
		$v2 = ($q->data["joincond"] ?? null);
		#src/Model.hx:119: characters 3-83
		$joinCond = (($v2 !== null) && !Boot::equal($v2, 0) && ($v2 !== "") ? ($q->data["joincond"] ?? null) : null);
		#src/Model.hx:120: characters 16-45
		$v3 = ($q->data["jointable"] ?? null);
		#src/Model.hx:120: characters 3-74
		$this->joinTable = (($v3 !== null) && !Boot::equal($v3, 0) && ($v3 !== "") ? ($q->data["jointable"] ?? null) : null);
		#src/Model.hx:122: characters 3-32
		$filterTables = "";
		#src/Model.hx:123: characters 7-33
		$v4 = ($q->data["filter"] ?? null);
		#src/Model.hx:123: lines 123-129
		if (($v4 !== null) && !Boot::equal($v4, 0) && ($v4 !== "")) {
			#src/Model.hx:125: characters 19-52
			$_this = ($q->data["filter_tables"] ?? null);
			#src/Model.hx:125: characters 19-123
			$_this1 = \Array_hx::wrap(explode(",", $_this));
			#src/Model.hx:125: characters 19-123
			$result = [];
			#src/Model.hx:125: characters 19-123
			$_g1 = 0;
			#src/Model.hx:125: characters 19-123
			$_g = $_this1->length;
			#src/Model.hx:125: characters 19-123
			while ($_g1 < $_g) {
				#src/Model.hx:125: characters 19-123
				$_g1 = $_g1 + 1;
				#src/Model.hx:125: characters 19-123
				$i = $_g1 - 1;
				#src/Model.hx:125: characters 19-123
				$result[] = "fly_crm." . (\S::$my->real_escape_string($_this1->arr[$i])??'null');
			}

			#src/Model.hx:125: characters 4-133
			$filterTables = \Array_hx::wrap($result)->join(",");
			#src/Model.hx:126: characters 4-68
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			#src/Model.hx:129: characters 4-54
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		#src/Model.hx:131: lines 131-132
		if ($this->joinTable !== null) {
			#src/Model.hx:132: characters 4-36
			$sb->add(" INNER JOIN " . ($this->joinTable??'null'));
		}
		#src/Model.hx:133: lines 133-134
		if ($joinCond !== null) {
			#src/Model.hx:134: characters 4-27
			$sb->add(" ON " . ($joinCond??'null'));
		}
		#src/Model.hx:135: characters 3-37
		$where = ($q->data["where"] ?? null);
		#src/Model.hx:136: lines 136-137
		if ($where !== null) {
			#src/Model.hx:137: characters 4-34
			$this->buildCond($where, $sb, $phValues);
		}
		#src/Model.hx:139: characters 7-33
		$v5 = ($q->data["filter"] ?? null);
		#src/Model.hx:139: lines 139-147
		if (($v5 !== null) && !Boot::equal($v5, 0) && ($v5 !== "")) {
			#src/Model.hx:141: characters 14-40
			$_this2 = ($q->data["filter"] ?? null);
			#src/Model.hx:141: lines 141-142
			$_this3 = \Array_hx::wrap(explode(",", $_this2));
			#src/Model.hx:141: lines 141-142
			$result1 = [];
			#src/Model.hx:141: lines 141-142
			$_g11 = 0;
			#src/Model.hx:141: lines 141-142
			$_g2 = $_this3->length;
			#src/Model.hx:141: lines 141-142
			while ($_g11 < $_g2) {
				#src/Model.hx:141: lines 141-142
				$_g11 = $_g11 + 1;
				#src/Model.hx:141: lines 141-142
				$i1 = $_g11 - 1;
				#src/Model.hx:141: lines 141-142
				$result1[] = "fly_crm." . (\S::$my->real_escape_string($_this3->arr[$i1])??'null');
			}

			#src/Model.hx:141: lines 141-142
			$this->buildCond(\Array_hx::wrap($result1)->join(","), $sb, $phValues, false);
			#src/Model.hx:143: lines 143-146
			if ($this->joinTable === "vicidial_users") {
				#src/Model.hx:144: characters 18-122
				$_this4 = \Array_hx::wrap(explode(",", $filterTables));
				#src/Model.hx:144: characters 18-122
				$result2 = [];
				#src/Model.hx:144: characters 18-122
				$_g12 = 0;
				#src/Model.hx:144: characters 18-122
				$_g3 = $_this4->length;
				#src/Model.hx:144: characters 18-122
				while ($_g12 < $_g3) {
					#src/Model.hx:144: characters 18-122
					$_g12 = $_g12 + 1;
					#src/Model.hx:144: characters 18-122
					$i2 = $_g12 - 1;
					#src/Model.hx:144: characters 18-122
					$result2[] = "AND " . ($_this4->arr[$i2]??'null') . ".client_id=vicidial_list.vendor_lead_code";
				}

				#src/Model.hx:144: characters 5-133
				$sb->add(" " . (\Array_hx::wrap($result2)->join(" ")??'null'));
			} else {
				#src/Model.hx:146: characters 18-109
				$_this5 = \Array_hx::wrap(explode(",", $filterTables));
				#src/Model.hx:146: characters 18-109
				$result3 = [];
				#src/Model.hx:146: characters 18-109
				$_g13 = 0;
				#src/Model.hx:146: characters 18-109
				$_g4 = $_this5->length;
				#src/Model.hx:146: characters 18-109
				while ($_g13 < $_g4) {
					#src/Model.hx:146: characters 18-109
					$_g13 = $_g13 + 1;
					#src/Model.hx:146: characters 18-109
					$i3 = $_g13 - 1;
					#src/Model.hx:146: characters 18-109
					$result3[] = "AND " . ($_this5->arr[$i3]??'null') . ".client_id=clients.client_id";
				}

				#src/Model.hx:146: characters 5-120
				$sb->add(" " . (\Array_hx::wrap($result3)->join(" ")??'null'));
			}
		}
		#src/Model.hx:150: characters 10-86
		return (Lib::hashOfAssociativeArray($this->execute($sb->b, $phValues)[0])->data["count"] ?? null);
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doJoin ($q, $sb, $phValues) {
		#src/Model.hx:156: characters 3-39
		$fields = ($q->data["fields"] ?? null);
		#src/Model.hx:157: characters 3-8
		$tmp = Log::$trace;
		#src/Model.hx:157: characters 10-41
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		#src/Model.hx:157: characters 45-70
		$v = ($q->data["table"] ?? null);
		#src/Model.hx:157: characters 3-8
		$tmp(($tmp1??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? ($q->data["table"] ?? null) : $this->table))??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 157,
			"className" => "Model",
			"methodName" => "doJoin",
		]));
		#src/Model.hx:159: characters 22-147
		$tmp2 = null;
		#src/Model.hx:159: characters 22-147
		if ($fields !== null) {
			#src/Model.hx:159: characters 53-128
			$_this = \Array_hx::wrap(explode(",", $fields));
			#src/Model.hx:159: characters 53-128
			$result = [];
			#src/Model.hx:159: characters 53-128
			$_g1 = 0;
			#src/Model.hx:159: characters 53-128
			$_g = $_this->length;
			#src/Model.hx:159: characters 53-128
			while ($_g1 < $_g) {
				#src/Model.hx:159: characters 53-128
				$_g1 = $_g1 + 1;
				#src/Model.hx:159: characters 53-128
				$i = $_g1 - 1;
				#src/Model.hx:159: characters 53-128
				$result[] = \S::$my->real_escape_string($_this->arr[$i]);
			}

			#src/Model.hx:159: characters 22-147
			$tmp2 = $this->fieldFormat(\Array_hx::wrap($result)->join(","));
		} else {
			#src/Model.hx:159: characters 22-147
			$tmp2 = "*";
		}
		#src/Model.hx:159: characters 3-148
		$sb->add("SELECT " . ($tmp2??'null'));
		#src/Model.hx:160: characters 24-49
		$v1 = ($q->data["table"] ?? null);
		#src/Model.hx:160: characters 3-76
		$qTable = (($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? ($q->data["table"] ?? null) : $this->table);
		#src/Model.hx:161: characters 26-54
		$v2 = ($q->data["joincond"] ?? null);
		#src/Model.hx:161: characters 3-83
		$joinCond = (($v2 !== null) && !Boot::equal($v2, 0) && ($v2 !== "") ? ($q->data["joincond"] ?? null) : null);
		#src/Model.hx:162: characters 27-56
		$v3 = ($q->data["jointable"] ?? null);
		#src/Model.hx:162: characters 3-86
		$joinTable = (($v3 !== null) && !Boot::equal($v3, 0) && ($v3 !== "") ? ($q->data["jointable"] ?? null) : null);
		#src/Model.hx:163: characters 3-32
		$filterTables = "";
		#src/Model.hx:164: characters 7-33
		$v4 = ($q->data["filter"] ?? null);
		#src/Model.hx:164: lines 164-170
		if (($v4 !== null) && !Boot::equal($v4, 0) && ($v4 !== "")) {
			#src/Model.hx:166: characters 19-52
			$_this1 = ($q->data["filter_tables"] ?? null);
			#src/Model.hx:166: characters 19-123
			$_this2 = \Array_hx::wrap(explode(",", $_this1));
			#src/Model.hx:166: characters 19-123
			$result1 = [];
			#src/Model.hx:166: characters 19-123
			$_g11 = 0;
			#src/Model.hx:166: characters 19-123
			$_g2 = $_this2->length;
			#src/Model.hx:166: characters 19-123
			while ($_g11 < $_g2) {
				#src/Model.hx:166: characters 19-123
				$_g11 = $_g11 + 1;
				#src/Model.hx:166: characters 19-123
				$i1 = $_g11 - 1;
				#src/Model.hx:166: characters 19-123
				$result1[] = "fly_crm." . (\S::$my->real_escape_string($_this2->arr[$i1])??'null');
			}

			#src/Model.hx:166: characters 4-133
			$filterTables = \Array_hx::wrap($result1)->join(",");
			#src/Model.hx:167: characters 4-68
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			#src/Model.hx:170: characters 4-54
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		#src/Model.hx:172: lines 172-173
		if ($joinTable !== null) {
			#src/Model.hx:173: characters 4-36
			$sb->add(" INNER JOIN " . ($joinTable??'null'));
		}
		#src/Model.hx:174: lines 174-175
		if ($joinCond !== null) {
			#src/Model.hx:175: characters 4-27
			$sb->add(" ON " . ($joinCond??'null'));
		}
		#src/Model.hx:176: characters 3-37
		$where = ($q->data["where"] ?? null);
		#src/Model.hx:177: lines 177-178
		if ($where !== null) {
			#src/Model.hx:178: characters 4-34
			$this->buildCond($where, $sb, $phValues);
		}
		#src/Model.hx:180: characters 7-33
		$v5 = ($q->data["filter"] ?? null);
		#src/Model.hx:180: lines 180-189
		if (($v5 !== null) && !Boot::equal($v5, 0) && ($v5 !== "")) {
			#src/Model.hx:182: characters 14-40
			$_this3 = ($q->data["filter"] ?? null);
			#src/Model.hx:182: lines 182-183
			$_this4 = \Array_hx::wrap(explode(",", $_this3));
			#src/Model.hx:182: lines 182-183
			$result2 = [];
			#src/Model.hx:182: lines 182-183
			$_g12 = 0;
			#src/Model.hx:182: lines 182-183
			$_g3 = $_this4->length;
			#src/Model.hx:182: lines 182-183
			while ($_g12 < $_g3) {
				#src/Model.hx:182: lines 182-183
				$_g12 = $_g12 + 1;
				#src/Model.hx:182: lines 182-183
				$i2 = $_g12 - 1;
				#src/Model.hx:182: lines 182-183
				$result2[] = "fly_crm." . (\S::$my->real_escape_string($_this4->arr[$i2])??'null');
			}

			#src/Model.hx:182: lines 182-183
			$this->buildCond(\Array_hx::wrap($result2)->join(","), $sb, $phValues, false);
			#src/Model.hx:185: lines 185-188
			if ($joinTable === "vicidial_users") {
				#src/Model.hx:186: characters 18-122
				$_this5 = \Array_hx::wrap(explode(",", $filterTables));
				#src/Model.hx:186: characters 18-122
				$result3 = [];
				#src/Model.hx:186: characters 18-122
				$_g13 = 0;
				#src/Model.hx:186: characters 18-122
				$_g4 = $_this5->length;
				#src/Model.hx:186: characters 18-122
				while ($_g13 < $_g4) {
					#src/Model.hx:186: characters 18-122
					$_g13 = $_g13 + 1;
					#src/Model.hx:186: characters 18-122
					$i3 = $_g13 - 1;
					#src/Model.hx:186: characters 18-122
					$result3[] = "AND " . ($_this5->arr[$i3]??'null') . ".client_id=vicidial_list.vendor_lead_code";
				}

				#src/Model.hx:186: characters 5-133
				$sb->add(" " . (\Array_hx::wrap($result3)->join(" ")??'null'));
			} else {
				#src/Model.hx:188: characters 18-109
				$_this6 = \Array_hx::wrap(explode(",", $filterTables));
				#src/Model.hx:188: characters 18-109
				$result4 = [];
				#src/Model.hx:188: characters 18-109
				$_g14 = 0;
				#src/Model.hx:188: characters 18-109
				$_g5 = $_this6->length;
				#src/Model.hx:188: characters 18-109
				while ($_g14 < $_g5) {
					#src/Model.hx:188: characters 18-109
					$_g14 = $_g14 + 1;
					#src/Model.hx:188: characters 18-109
					$i4 = $_g14 - 1;
					#src/Model.hx:188: characters 18-109
					$result4[] = "AND " . ($_this6->arr[$i4]??'null') . ".client_id=clients.client_id";
				}

				#src/Model.hx:188: characters 5-120
				$sb->add(" " . (\Array_hx::wrap($result4)->join(" ")??'null'));
			}
		}
		#src/Model.hx:191: characters 3-42
		$groupParam = ($q->data["group"] ?? null);
		#src/Model.hx:192: lines 192-193
		if ($groupParam !== null) {
			#src/Model.hx:193: characters 4-30
			$this->buildGroup($groupParam, $sb);
		}
		#src/Model.hx:195: characters 3-37
		$order = ($q->data["order"] ?? null);
		#src/Model.hx:196: lines 196-197
		if ($order !== null) {
			#src/Model.hx:197: characters 4-25
			$this->buildOrder($order, $sb);
		}
		#src/Model.hx:199: characters 3-37
		$limit = ($q->data["limit"] ?? null);
		#src/Model.hx:200: characters 3-45
		$this->buildLimit(($limit === null ? "15" : $limit), $sb);
		#src/Model.hx:201: characters 3-42
		return $this->execute($sb->b, $phValues);
	}

	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doSelect ($q, $sb, $phValues) {
		#src/Model.hx:207: characters 3-39
		$fields = ($q->data["fields"] ?? null);
		#src/Model.hx:208: characters 3-8
		$tmp = Log::$trace;
		#src/Model.hx:208: characters 10-41
		$tmp1 = "table:" . (\Std::string(($q->data["table"] ?? null))??'null') . ":";
		#src/Model.hx:208: characters 45-70
		$v = ($q->data["table"] ?? null);
		#src/Model.hx:208: characters 3-8
		$tmp(($tmp1??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? ($q->data["table"] ?? null) : $this->table))??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 208,
			"className" => "Model",
			"methodName" => "doSelect",
		]));
		#src/Model.hx:211: characters 3-67
		$sb->add("SELECT " . ((($fields !== null ? $this->fieldFormat($fields) : "*"))??'null'));
		#src/Model.hx:212: characters 24-49
		$v1 = ($q->data["table"] ?? null);
		#src/Model.hx:212: characters 3-76
		$qTable = (($v1 !== null) && !Boot::equal($v1, 0) && ($v1 !== "") ? ($q->data["table"] ?? null) : $this->table);
		#src/Model.hx:214: characters 3-53
		$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		#src/Model.hx:215: characters 3-37
		$where = ($q->data["where"] ?? null);
		#src/Model.hx:216: lines 216-217
		if ($where !== null) {
			#src/Model.hx:217: characters 4-34
			$this->buildCond($where, $sb, $phValues);
		}
		#src/Model.hx:218: characters 3-42
		$groupParam = ($q->data["group"] ?? null);
		#src/Model.hx:219: lines 219-220
		if ($groupParam !== null) {
			#src/Model.hx:220: characters 4-30
			$this->buildGroup($groupParam, $sb);
		}
		#src/Model.hx:222: characters 3-37
		$order = ($q->data["order"] ?? null);
		#src/Model.hx:223: lines 223-224
		if ($order !== null) {
			#src/Model.hx:224: characters 4-25
			$this->buildOrder($order, $sb);
		}
		#src/Model.hx:225: characters 3-37
		$limit = ($q->data["limit"] ?? null);
		#src/Model.hx:226: characters 3-45
		$this->buildLimit(($limit === null ? "15" : $limit), $sb);
		#src/Model.hx:227: characters 3-42
		return $this->execute($sb->b, $phValues);
	}

	/**
	 * @param string $sql
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function execute ($sql, $phValues = null) {
		#src/Model.hx:284: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 284,
			"className" => "Model",
			"methodName" => "execute",
		]));
		#src/Model.hx:285: characters 3-32
		$stmt = \S::$my->stmt_init();
		#src/Model.hx:287: characters 3-65
		$success = $stmt->prepare($sql);
		#src/Model.hx:288: characters 3-8
		(Log::$trace)($success, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 288,
			"className" => "Model",
			"methodName" => "execute",
		]));
		#src/Model.hx:289: lines 289-293
		if (!$success) {
			#src/Model.hx:291: characters 4-9
			(Log::$trace)($stmt->error, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 291,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:292: characters 4-15
			return null;
		}
		#src/Model.hx:294: characters 3-29
		$bindTypes = "";
		#src/Model.hx:295: characters 3-38
		$values2bind = null;
		#src/Model.hx:296: characters 3-126
		$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
		#src/Model.hx:298: characters 3-26
		$qObj = new HxAnon();
		#src/Model.hx:300: characters 3-17
		$i = 0;
		#src/Model.hx:301: lines 301-306
		$_g = 0;
		#src/Model.hx:301: lines 301-306
		while ($_g < $phValues->length) {
			#src/Model.hx:301: characters 8-10
			$ph = ($phValues->arr[$_g] ?? null);
			#src/Model.hx:301: lines 301-306
			$_g = $_g + 1;
			#src/Model.hx:303: characters 4-46
			$type = ($dbFieldTypes->data[($ph->arr[0] ?? null)] ?? null);
			#src/Model.hx:304: characters 18-33
			$v = $type;
			#src/Model.hx:304: characters 4-49
			$bindTypes = ($bindTypes??'null') . (((($v !== null) && !Boot::equal($v, 0) && ($v !== "") ? $type : "s"))??'null');
			#src/Model.hx:305: characters 16-19
			$i = $i + 1;
			#src/Model.hx:305: characters 4-28
			$values2bind[$i - 1] = ($ph->arr[1] ?? null);
		}

		#src/Model.hx:308: characters 3-8
		(Log::$trace)(\Std::string($values2bind), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 308,
			"className" => "Model",
			"methodName" => "execute",
		]));
		#src/Model.hx:309: lines 309-349
		if ($phValues->length > 0) {
			#src/Model.hx:311: characters 4-75
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			#src/Model.hx:312: characters 4-9
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 312,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:313: lines 313-331
			if ($success) {
				#src/Model.hx:316: characters 5-33
				$data = null;
				#src/Model.hx:317: characters 5-29
				$success = $stmt->execute();
				#src/Model.hx:318: lines 318-322
				if (!$success) {
					#src/Model.hx:320: characters 6-11
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 320,
						"className" => "Model",
						"methodName" => "execute",
					]));
					#src/Model.hx:321: characters 6-17
					return null;
				}
				#src/Model.hx:324: characters 5-67
				$result = $stmt->get_result();
				#src/Model.hx:325: lines 325-329
				if ($result) {
					#src/Model.hx:327: characters 6-53
					$this->num_rows = (Boot::typedCast(Boot::getClass(\mysqli_result::class), $result))->num_rows;
					#src/Model.hx:328: characters 6-71
					$data = (Boot::typedCast(Boot::getClass(\mysqli_result::class), $result))->fetch_all(1);
				}
				#src/Model.hx:330: characters 5-17
				return $data;
			}
		} else {
			#src/Model.hx:334: characters 4-32
			$data1 = null;
			#src/Model.hx:335: characters 4-28
			$success = $stmt->execute();
			#src/Model.hx:336: lines 336-340
			if (!$success) {
				#src/Model.hx:338: characters 5-10
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 338,
					"className" => "Model",
					"methodName" => "execute",
				]));
				#src/Model.hx:339: characters 5-58
				return array("ERROR", $stmt->error);
			}
			#src/Model.hx:341: characters 4-66
			$result1 = $stmt->get_result();
			#src/Model.hx:342: lines 342-347
			if ($result1) {
				#src/Model.hx:344: characters 5-57
				$res = Boot::typedCast(Boot::getClass(\mysqli_result::class), $result1);
				#src/Model.hx:345: characters 5-28
				$this->num_rows = $res->num_rows;
				#src/Model.hx:346: characters 5-46
				$data1 = $res->fetch_all(1);
			}
			#src/Model.hx:348: characters 4-16
			return $data1;
		}
		#src/Model.hx:351: characters 3-56
		return array("ERROR", $stmt->error);
	}

	/**
	 * @param string $fields
	 * 
	 * @return string
	 */
	public function fieldFormat ($fields) {
		#src/Model.hx:233: characters 3-52
		$fieldsWithFormat = new \Array_hx();
		#src/Model.hx:234: characters 3-44
		$sF = \Array_hx::wrap(explode(",", $fields));
		#src/Model.hx:235: characters 3-138
		$dbQueryFormats = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbQueryFormats"] ?? null)));
		#src/Model.hx:236: characters 3-8
		(Log::$trace)($dbQueryFormats, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 236,
			"className" => "Model",
			"methodName" => "fieldFormat",
		]));
		#src/Model.hx:238: characters 3-41
		$qKeys = new \Array_hx();
		#src/Model.hx:239: characters 3-51
		$it = new NativeArrayIterator(array_map("strval", array_keys($dbQueryFormats->data)));
		#src/Model.hx:240: lines 240-243
		while ($it->hasNext()) {
			#src/Model.hx:242: characters 4-25
			$x = $it->next();
			#src/Model.hx:242: characters 4-25
			$qKeys->arr[$qKeys->length] = $x;
			#src/Model.hx:242: characters 4-25
			++$qKeys->length;
		}
		#src/Model.hx:245: lines 245-258
		$_g = 0;
		#src/Model.hx:245: lines 245-258
		while ($_g < $sF->length) {
			#src/Model.hx:245: characters 8-9
			$f = ($sF->arr[$_g] ?? null);
			#src/Model.hx:245: lines 245-258
			$_g = $_g + 1;
			#src/Model.hx:247: lines 247-257
			if (\Lambda::has($qKeys, $f)) {
				#src/Model.hx:249: characters 5-54
				$format = ($dbQueryFormats->data[$f] ?? null);
				#src/Model.hx:251: lines 251-254
				if (($format->arr[0] ?? null) === "ALIAS") {
					#src/Model.hx:252: characters 27-64
					$x1 = (\S::$my->real_escape_string($f)??'null') . " AS ";
					#src/Model.hx:252: characters 5-77
					$fieldsWithFormat->arr[$fieldsWithFormat->length] = ($x1??'null') . (($format->arr[1] ?? null)??'null');
					#src/Model.hx:252: characters 5-77
					++$fieldsWithFormat->length;
				} else {
					#src/Model.hx:254: characters 27-79
					$x2 = (($format->arr[0] ?? null)??'null') . "(" . (\S::$my->real_escape_string($f)??'null') . ", \"";
					#src/Model.hx:254: characters 5-114
					$fieldsWithFormat->arr[$fieldsWithFormat->length] = ($x2??'null') . (($format->arr[1] ?? null)??'null') . "\") AS `" . ($f??'null') . "`";
					#src/Model.hx:254: characters 5-114
					++$fieldsWithFormat->length;
				}
			} else {
				#src/Model.hx:257: characters 5-56
				$x3 = \S::$my->real_escape_string($f);
				#src/Model.hx:257: characters 5-56
				$fieldsWithFormat->arr[$fieldsWithFormat->length] = $x3;
				#src/Model.hx:257: characters 5-56
				++$fieldsWithFormat->length;
			}
		}

		#src/Model.hx:260: characters 3-36
		return $fieldsWithFormat->join(",");
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		#src/Model.hx:265: characters 3-38
		$sb = new \StringBuf();
		#src/Model.hx:266: characters 3-52
		$phValues = new \Array_hx();
		#src/Model.hx:268: characters 3-50
		$count = $this->countJoin($param, $sb, $phValues);
		#src/Model.hx:270: characters 3-23
		$sb = new \StringBuf();
		#src/Model.hx:271: characters 3-25
		$phValues = new \Array_hx();
		#src/Model.hx:272: characters 3-8
		(Log::$trace)("count:" . ($count??'null') . " page:" . (($param->data["page"] ?? null)??'null') . ": " . (((array_key_exists("page", $param->data) ? "Y" : "N"))??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 272,
			"className" => "Model",
			"methodName" => "find",
		]));
		#src/Model.hx:275: characters 10-70
		$tmp = (array_key_exists("page", $param->data) ? \Std::parseInt(($param->data["page"] ?? null)) : 1);
		#src/Model.hx:273: lines 273-277
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp,
			"rows" => $this->doSelect($param, $sb, $phValues),
		]);
		#src/Model.hx:278: characters 3-23
		return $this->json_encode();
	}

	/**
	 * @param string $table_name
	 * 
	 * @return StringMap
	 */
	public function getEditorFields ($table_name = null) {
		#src/Model.hx:513: characters 3-38
		$sb = new \StringBuf();
		#src/Model.hx:514: characters 3-52
		$phValues = new \Array_hx();
		#src/Model.hx:515: characters 3-49
		$param = new StringMap();
		#src/Model.hx:516: characters 3-46
		$param->data["table"] = "fly_crm.editor_fields";
		#src/Model.hx:518: lines 518-519
		$value = ($table_name !== null ? ",table_name|" . (\S::$my->real_escape_string($table_name)??'null') : "");
		#src/Model.hx:518: lines 518-519
		$param->data["where"] = "field_cost|>-2" . ($value??'null');

		#src/Model.hx:520: characters 3-84
		$param->data["fields"] = "field_name,field_label,field_type,field_options,table_name";
		#src/Model.hx:521: characters 3-58
		$param->data["order"] = "table_name,field_rank,field_order";
		#src/Model.hx:522: characters 3-28
		$param->data["limit"] = "100";
		#src/Model.hx:524: characters 3-80
		$eFields = \Array_hx::wrap($this->doSelect($param, $sb, $phValues));
		#src/Model.hx:529: characters 3-65
		$ret = new StringMap();
		#src/Model.hx:531: lines 531-544
		$_g = 0;
		#src/Model.hx:531: lines 531-544
		while ($_g < $eFields->length) {
			#src/Model.hx:531: characters 8-10
			$ef = ($eFields->arr[$_g] ?? null);
			#src/Model.hx:531: lines 531-544
			$_g = $_g + 1;
			#src/Model.hx:533: characters 4-48
			$table = $ef["table_name"];
			#src/Model.hx:534: lines 534-537
			if (!array_key_exists($table, $ret->data)) {
				#src/Model.hx:536: characters 5-23
				$ret->data[$table] = new \Array_hx();
			}
			#src/Model.hx:540: characters 4-52
			$a = ($ret->data[$table] ?? null);
			#src/Model.hx:541: characters 4-42
			$x = Lib::hashOfAssociativeArray($ef);
			#src/Model.hx:541: characters 4-42
			$a->arr[$a->length] = $x;
			#src/Model.hx:541: characters 4-42
			++$a->length;

			#src/Model.hx:542: characters 4-21
			$ret->data[$table] = $a;
		}

		#src/Model.hx:546: characters 3-13
		return $ret;
	}

	/**
	 * @return mixed
	 */
	public function json_encode () {
		#src/Model.hx:501: characters 3-22
		$this->data->agent = \S::$user;
		#src/Model.hx:502: characters 3-25
		$this->data->globals = $this->globals;
		#src/Model.hx:503: characters 3-55
		return json_encode($this->data, 320);
	}

	/**
	 * @param string $res
	 * 
	 * @return mixed
	 */
	public function json_response ($res) {
		#src/Model.hx:508: characters 3-61
		return json_encode(new HxAnon(["response" => $res]), 64);
	}

	/**
	 * @param string $sql
	 * 
	 * @return mixed
	 */
	public function query ($sql) {
		#src/Model.hx:356: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 356,
			"className" => "Model",
			"methodName" => "query",
		]));
		#src/Model.hx:358: characters 3-38
		$ok = \S::$my->real_query($sql);
		#src/Model.hx:360: lines 360-369
		if ($ok && (\S::$my->field_count > 0)) {
			#src/Model.hx:362: characters 4-48
			$res = \S::$my->store_result();
			#src/Model.hx:363: characters 4-9
			(Log::$trace)($res, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 363,
				"className" => "Model",
				"methodName" => "query",
			]));
			#src/Model.hx:364: characters 4-62
			$data = $res->fetch_all(1);
			#src/Model.hx:365: characters 4-14
			$res->free();
			#src/Model.hx:366: characters 4-16
			return $data;
		} else {
			#src/Model.hx:369: characters 4-9
			(Log::$trace)(($ok ? "OK" : "NOTOK" . (\S::$my->error??'null')), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 369,
				"className" => "Model",
				"methodName" => "query",
			]));
		}
		#src/Model.hx:370: lines 370-371
		if (\S::$my->connect_error !== null) {
			#src/Model.hx:371: characters 4-9
			(Log::$trace)(\S::$my->connect_error, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 371,
				"className" => "Model",
				"methodName" => "query",
			]));
		}
		#src/Model.hx:372: characters 3-14
		return null;
	}

	/**
	 * @param string $f
	 * 
	 * @return string
	 */
	public function quoteField ($f) {
		#src/Model.hx:486: characters 10-42
		$_this = Model::$KEYWORDS;
		#src/Model.hx:486: characters 10-58
		if (array_key_exists(strtolower($f), $_this->data)) {
			#src/Model.hx:486: characters 45-54
			return "`" . ($f??'null') . "`";
		} else {
			#src/Model.hx:486: characters 57-58
			return $f;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		$h = new StringMap();
		{
			#src/Model.hx:48: lines 48-49
			$_g = 0;
			#src/Model.hx:48: lines 48-49
			$_g1 = \Array_hx::wrap(explode("|", "ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE"));
			#src/Model.hx:48: lines 48-49
			while ($_g < $_g1->length) {
				#src/Model.hx:48: characters 8-9
				$k = ($_g1->arr[$_g] ?? null);
				#src/Model.hx:48: lines 48-49
				$_g = $_g + 1;
				#src/Model.hx:49: characters 4-31
				$key = strtolower($k);
				#src/Model.hx:49: characters 4-31
				$h->data[$key] = true;

			}
		};
		self::$KEYWORDS = $h;
	}
}

Boot::registerClass(Model::class, 'Model');
Model::__hx__init();
