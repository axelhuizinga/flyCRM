<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \php\_Boot\HxClosure;
use \php\Boot;
use \php\_Boot\HxClass;

class Reflect {
	/**
	 * @param mixed $o
	 * @param mixed $func
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	static public function callMethod ($o, $func, $args) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:103: characters 3-27
		$callback = $func;
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:104: lines 104-110
		if (($o !== null) && !($o instanceof HxClass)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:105: lines 105-109
			if (($func instanceof \Closure)) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:106: characters 5-45
				$callback = $func->bindTo($o);
			} else {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:108: characters 5-53
				$callback = $func->getCallback($o);
			}
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:111: characters 3-73
		return call_user_func_array($callback, $args->arr);
	}

	/**
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function field ($o, $field) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:45: lines 45-47
		if (is_string($o)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:46: characters 24-45
			$tmp = Boot::dynamicString($o);
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:46: characters 47-52
			$tmp1 = $field;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:46: characters 4-53
			return $tmp->{$tmp1};
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:48: characters 3-34
		if (!is_object($o)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:48: characters 23-34
			return null;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:50: lines 50-52
		if (property_exists($o, $field)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:51: characters 24-25
			$tmp2 = $o;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:51: characters 27-32
			$tmp3 = $field;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:51: characters 4-33
			return $tmp2->{$tmp3};
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:53: lines 53-55
		if (method_exists($o, $field)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:54: characters 4-33
			return new HxClosure($o, $field);
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:57: lines 57-68
		if (($o instanceof HxClass)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:58: characters 4-54
			$phpClassName = $o->phpClassName;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:59: lines 59-61
			if (defined("" . ($phpClassName??'null') . "::" . ($field??'null'))) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:60: characters 5-52
				return constant("" . ($phpClassName??'null') . "::" . ($field??'null'));
			}
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:62: lines 62-64
			if (property_exists($phpClassName, $field)) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:63: characters 25-26
				$tmp4 = $o;
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:63: characters 28-33
				$tmp5 = $field;
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:63: characters 5-34
				return $tmp4->{$tmp5};
			}
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:65: lines 65-67
			if (method_exists($phpClassName, $field)) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:66: characters 5-45
				return new HxClosure($phpClassName, $field);
			}
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:70: characters 3-14
		return null;
	}

	/**
	 * @param mixed $o
	 * 
	 * @return \Array_hx
	 */
	static public function fields ($o) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:115: lines 115-117
		if (is_object($o)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:116: characters 4-77
			return \Array_hx::wrap(array_keys(get_object_vars($o)));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:118: characters 3-12
		return new \Array_hx();
	}

	/**
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function hasField ($o, $field) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:33: characters 3-35
		if (!is_object($o)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:33: characters 23-35
			return false;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:34: characters 3-44
		if (property_exists($o, $field)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:34: characters 33-44
			return true;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:36: lines 36-39
		if (($o instanceof HxClass)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:37: characters 4-54
			$phpClassName = $o->phpClassName;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 11-142
			if (!(property_exists($phpClassName, $field) || method_exists($phpClassName, $field))) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 103-142
				return defined("" . ($phpClassName??'null') . "::" . ($field??'null'));
			} else {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 11-142
				return true;
			}
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:41: characters 3-15
		return false;
	}

	/**
	 * @param mixed $o
	 * @param string $field
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function setField ($o, $field, $value) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:74: characters 19-20
		$tmp = $o;
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:74: characters 22-27
		$tmp1 = $field;
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:74: characters 3-35
		$tmp->{$tmp1} = $value;
	}
}

Boot::registerClass(Reflect::class, 'Reflect');
