<?php
/**
 * Generated by Haxe 4.0.0-preview.4+1e3e5e016
 */

use \haxe\ds\StringMap;
use \php\Boot;
use \me\cunity\php\Services_JSON;
use \haxe\Log;
use \php\_Boot\HxAnon;

class Config {
	/**
	 * @param string $cjs
	 * 
	 * @return StringMap
	 */
	static public function load ($cjs) {
		#src/Config.hx:15: characters 3-62
		$js = file_get_contents($cjs);
		#src/Config.hx:17: characters 3-44
		$vars = \Array_hx::wrap(explode("var", $js));
		#src/Config.hx:18: characters 3-15
		if ($vars->length > 0) {
			#src/Config.hx:18: characters 3-15
			$vars->length--;
		}
		#src/Config.hx:18: characters 3-15
		array_shift($vars->arr);

		#src/Config.hx:19: characters 3-51
		$result = new StringMap();
		#src/Config.hx:20: characters 3-8
		(Log::$trace)($vars->length, new HxAnon([
			"fileName" => "src/Config.hx",
			"lineNumber" => 20,
			"className" => "Config",
			"methodName" => "load",
		]));
		#src/Config.hx:21: characters 3-131
		$jsonS = new Services_JSON(48);
		#src/Config.hx:22: lines 22-27
		$_g = 0;
		#src/Config.hx:22: lines 22-27
		while ($_g < $vars->length) {
			#src/Config.hx:22: characters 8-9
			$v = ($vars->arr[$_g] ?? null);
			#src/Config.hx:22: lines 22-27
			$_g = $_g + 1;
			#src/Config.hx:24: characters 4-42
			$data = \Array_hx::wrap(explode("=", $v));
			#src/Config.hx:25: characters 4-45
			$json = $jsonS->decode(($data->arr[1] ?? null));
			#src/Config.hx:26: characters 4-36
			$key = trim(($data->arr[0] ?? null));
			#src/Config.hx:26: characters 4-36
			$result->data[$key] = $json;

		}

		#src/Config.hx:28: characters 3-16
		return $result;
	}
}

Boot::registerClass(Config::class, 'Config');
