<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\_Boot\HxAnon;

class App extends \Model {
	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		return json_encode((new App($param))->getGlobals($param), 320);
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		parent::__construct($param);
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function getGlobals ($param) {
		$fieldNames_data = null;
		$this1 = [];
		$fieldNames_data = $this1;
		$typeMap = new StringMap();
		$optionsMap = new StringMap();
		$eF = $this->getEditorFields();
		$keys = new NativeArrayIterator(array_map("strval", array_keys($eF->data)));
		$tableNames = new \Array_hx();
		$tableFields_data = null;
		$this2 = [];
		$tableFields_data = $this2;
		(Log::$trace)($param, new HxAnon([
			"fileName" => "App.hx",
			"lineNumber" => 32,
			"className" => "model.App",
			"methodName" => "getGlobals",
		]));
		while ($keys->hasNext()) {
			unset($_g1, $cFields, $k, $aFields, $_g);
			$k = $keys->next();
			$tableNames->push($k);
			$aFields = ($eF->data[$k] ?? null);
			$cFields = $aFields->map(function ($field) {
				return ($field->data["field_label"] ?? null);
			});
			$tableFields_data[$k] = $cFields;
			$_g1 = 0;
			$_g = $cFields->length;
			while ($_g1 < $_g) {
				unset($f, $value1, $value2, $value);
				$_g1 = $_g1 + 1;
				$f = $_g1 - 1;
				$value = ($aFields[$f]->data["field_name"] ?? null);
				$fieldNames_data[($cFields->arr[$f] ?? null)] = $value;

				if (($aFields[$f]->data["field_options"] ?? null) !== null) {
					$value1 = ($aFields[$f]->data["field_options"] ?? null);
					$optionsMap->data[($cFields->arr[$f] ?? null)] = $value1;
				}
				$value2 = ($aFields[$f]->data["field_type"] ?? null);
				$typeMap->data[($cFields->arr[$f] ?? null)] = $value2;

			}

		}
		$me = new Users($param);
		$me->get_info();
		$me1 = $me->globals;
		$data = new HxAnon([
			"fieldNames" => $fieldNames_data,
			"userMap" => $me1,
			"optionsMap" => $optionsMap,
			"typeMap" => $typeMap,
			"limit" => (\S::$conf->data["sql"] ?? null)["LIMIT"],
		]);
		return $data;
	}
}


Boot::registerClass(App::class, 'model.App');
