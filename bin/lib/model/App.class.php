<?php

// Generated by Haxe 3.4.0 (git build development @ e08d018)
class model_App extends Model {
	public function __construct($param = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($param);
	}}
	public function getGlobals($param) {
		$fieldNames = new haxe_ds_StringMap();
		$typeMap = new haxe_ds_StringMap();
		$optionsMap = new haxe_ds_StringMap();
		$eF = $this->getEditorFields(null);
		$keys = $eF->keys();
		$tableNames = new _hx_array(array());
		$tableFields = new haxe_ds_StringMap();
		haxe_Log::trace($param, _hx_anonymous(array("fileName" => "App.hx", "lineNumber" => 32, "className" => "model.App", "methodName" => "getGlobals")));
		while($keys->hasNext()) {
			$k = $keys->next();
			$tableNames->push($k);
			$aFields = $eF->get($k);
			$cFields = $aFields->map(array(new _hx_lambda(array(), "model_App_0"), 'execute'));
			$tableFields->set($k, $cFields);
			{
				$_g1 = 0;
				$_g = $cFields->length;
				while($_g1 < $_g) {
					$_g1 = $_g1 + 1;
					$f = $_g1 - 1;
					$cFields1 = $cFields[$f];
					$fieldNames->set($cFields1, _hx_array_get($aFields, $f)->get("field_name"));
					if(_hx_array_get($aFields, $f)->get("field_options") !== null) {
						$cFields2 = $cFields[$f];
						$optionsMap->set($cFields2, _hx_array_get($aFields, $f)->get("field_options"));
						unset($cFields2);
					}
					$cFields3 = $cFields[$f];
					$typeMap->set($cFields3, _hx_array_get($aFields, $f)->get("field_type"));
					unset($f,$cFields3,$cFields1);
				}
				unset($_g1,$_g);
			}
			unset($k,$cFields,$aFields);
		}
		$me = new model_Users($param);
		$me->get_info(null);
		$data = php_Lib::associativeArrayOfHash($fieldNames);
		$me1 = $me->globals;
		$data1 = _hx_anonymous(array("fieldNames" => $data, "userMap" => $me1, "optionsMap" => $optionsMap, "typeMap" => $typeMap, "limit" => _hx_array_get(S::$conf->get("sql"), "LIMIT")));
		return $data1;
	}
	static function create($param) {
		return json_encode(_hx_deref(new model_App($param))->getGlobals($param), 320);
	}
	function __toString() { return 'model.App'; }
}
function model_App_0($field) {
	{
		return $field->get("field_label");
	}
}
