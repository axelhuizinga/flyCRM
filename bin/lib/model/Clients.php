<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\Lib;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class Clients extends \Model {
	/**
	 * @var \Array_hx
	 */
	static public $clients_fields;
	/**
	 * @var StringMap
	 */
	static public $custom_fields_map;
	/**
	 * @var string
	 */
	static public $pay_back_fields = "id,pay_plan_id,Betrag,creation_date,verwendungszweck,buchungs_datum,status,user";
	/**
	 * @var \Array_hx
	 */
	static public $pay_history_fields;
	/**
	 * @var \Array_hx
	 */
	static public $pay_plan_fields;
	/**
	 * @var \Array_hx
	 */
	static public $pay_source_fields;
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		$self = new Clients($param);
		$self->table = "vicidial_list";
		return \Reflect::callMethod($self, \Reflect::field($self, ($param->data["action"] ?? null)), \Array_hx::wrap([$param]));
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		parent::__construct($param);
	}


	/**
	 * @param string $srcTable
	 * @param string $suffix
	 * 
	 * @return bool
	 */
	public function checkOrCreateCustomTable ($srcTable, $suffix = "log") {
		if ($suffix === null) {
			$suffix = "log";
		}
		$newTable = \S::$my->real_escape_string(($srcTable??'null') . "_" . ($suffix??'null'));
		$res = \S::$my->query("SHOW TABLES LIKE  \"" . ($newTable??'null') . "\"");
		$tmp = null;
		if (\Util::any2bool($res)) {
			$tmp = $res->num_rows === 0;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			(Log::$trace)("CREATE TABLE `" . ($newTable??'null') . "` like `" . ($srcTable??'null') . "`", new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 819,
				"className" => "model.Clients",
				"methodName" => "checkOrCreateCustomTable",
			]));
			\S::$my->query("CREATE TABLE `" . ($newTable??'null') . "` like `" . ($srcTable??'null') . "`");
			if (\S::$my->error === "") {
				\S::$my->query("ALTER TABLE " . ($newTable??'null') . " DROP PRIMARY KEY, ADD `log_id` INT(9) NOT NULL  FIRST,  ADD  PRIMARY KEY (`log_id`)");
				if (\S::$my->error !== "") {
					\S::exit(\S::$my->error);
				}
				return true;
			} else {
				\S::exit(\S::$my->error);
			}
		} else {
			(Log::$trace)("num_rows:" . ($res->num_rows??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 830,
				"className" => "model.Clients",
				"methodName" => "checkOrCreateCustomTable",
			]));
		}
		return true;
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doJoin ($q, $sb, $phValues) {
		$fields = ($q->data["fields"] ?? null);
		$tmp = null;
		if ($fields !== null) {
			$tmp = $this->fieldFormat(HxString::split($fields, ",")->map(function ($f) {
				return \S::$my->real_escape_string($f);
			})->join(","));
		} else {
			$tmp = "*";
		}
		$sb->add("SELECT " . ($tmp??'null'));
		$qTable = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$qTable = ($q->data["table"] ?? null);
		} else {
			$qTable = $this->table;
		}
		$joinCond = null;
		if (\Util::any2bool(($q->data["joincond"] ?? null))) {
			$joinCond = ($q->data["joincond"] ?? null);
		} else {
			$joinCond = null;
		}
		$joinTable = null;
		if (\Util::any2bool(($q->data["jointable"] ?? null))) {
			$joinTable = ($q->data["jointable"] ?? null);
		} else {
			$joinTable = null;
		}
		$filterTables = "";
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$filterTables = HxString::split(($q->data["filter_tables"] ?? null), ",")->map(function ($f1) {
				return "fly_crm." . (\S::$my->real_escape_string($f1)??'null');
			})->join(",");
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		if ($joinTable !== null) {
			$sb->add(" INNER JOIN " . ($joinTable??'null'));
		}
		if ($joinCond !== null) {
			$sb->add(" ON " . ($joinCond??'null'));
		}
		$where = ($q->data["where"] ?? null);
		if ($where !== null) {
			$this->buildCond($where, $sb, $phValues);
		}
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$this->buildCond(HxString::split(($q->data["filter"] ?? null), ",")->map(function ($f2) {
				return "fly_crm." . (\S::$my->real_escape_string($f2)??'null');
			})->join(","), $sb, $phValues, false);
			if ($joinTable === "vicidial_users") {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f3) {
					return "AND " . ($f3??'null') . ".client_id=vicidial_list.vendor_lead_code";
				})->join(" ")??'null'));
			} else {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f4) {
					return "AND " . ($f4??'null') . ".client_id=clients.client_id";
				})->join(" ")??'null'));
			}
		}
		$groupParam = ($q->data["group"] ?? null);
		if ($groupParam !== null) {
			$this->buildGroup($groupParam, $sb);
		}
		$order = ($q->data["order"] ?? null);
		if ($order !== null) {
			$this->buildOrder($order, $sb);
		}
		$limit = ($q->data["limit"] ?? null);
		$tmp1 = null;
		if ($limit === null) {
			$tmp1 = "15";
		} else {
			$tmp1 = $limit;
		}
		$this->buildLimit($tmp1, $sb);
		return $this->execute($sb->b, $phValues);
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function edit ($param) {
		$fieldNames_data = null;
		$this1 = [];
		$fieldNames_data = $this1;
		$_g = new StringMap();
		$_g->data["buchungsanforderungID"] = "HIDDEN";
		$_g->data["Mandat-ID"] = "TEXT";
		$_g->data["Betrag"] = "TEXT";
		$_g->data["Termin"] = "TEXT";
		$typeMap = $_g;
		$optionsMap_data = null;
		$this2 = [];
		$optionsMap_data = $this2;
		$eF = $this->getEditorFields();
		$keys = new NativeArrayIterator(array_map("strval", array_keys($eF->data)));
		$tableNames = new \Array_hx();
		$tableFields_data = null;
		$this3 = [];
		$tableFields_data = $this3;
		(Log::$trace)($param, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 139,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		while ($keys->hasNext()) {
			unset($_g1, $_g2, $cFields, $k, $aFields);
			$k = $keys->next();
			$tableNames->push($k);
			$aFields = ($eF->data[$k] ?? null);
			$cFields = $aFields->map(function ($field) {
				return ($field->data["field_label"] ?? null);
			});
			$tableFields_data[$k] = $cFields;
			$_g2 = 0;
			$_g1 = $cFields->length;
			while ($_g2 < $_g1) {
				unset($f, $value1, $value2, $value);
				$_g2 = $_g2 + 1;
				$f = $_g2 - 1;
				$value = ($aFields[$f]->data["field_name"] ?? null);
				$fieldNames_data[($cFields->arr[$f] ?? null)] = $value;

				if (($aFields[$f]->data["field_options"] ?? null) !== null) {
					$value1 = ($aFields[$f]->data["field_options"] ?? null);
					$optionsMap_data[($cFields->arr[$f] ?? null)] = $value1;
				}
				$value2 = ($aFields[$f]->data["field_type"] ?? null);
				$typeMap->data[($cFields->arr[$f] ?? null)] = $value2;

			}

		}
		(Log::$trace)($tableNames, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 158,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		$editTables_data = null;
		$this4 = [];
		$editTables_data = $this4;
		$ti = 0;
		$tableNames->remove("vicidial_list");
		$tableNames->push("buchungs_anforderungen");
		$_g11 = 0;
		while ($_g11 < $tableNames->length) {
			unset($table, $value3, $sb, $value9, $value7, $phValues, $value5, $value4, $tmp, $value8, $value11, $value10, $value6, $value13, $value12, $p);
			$table = ($tableNames->arr[$_g11] ?? null);
			$_g11 = $_g11 + 1;
			$p = new StringMap();
			$sb = new \StringBuf();
			$phValues = new \Array_hx();
			$value3 = ($param->data["primary_id"] ?? null);
			$p->data["primary_id"] = $value3;

			switch ($table) {
				case "buchungs_anforderungen":
					$p->data["table"] = "fly_crm." . ($table??'null');
					$value4 = Clients::$pay_history_fields->map(function ($el) {
						return "`" . ($el??'null') . "`";
					})->join(",");
					$p->data["fields"] = $value4;

					$value5 = "`Mandat-ID`|" . (\Std::string(($param->data["client_id"] ?? null))??'null') . "K1";
					$p->data["where"] = $value5;

					$p->data["limit"] = "2400";
					$editTables_data["pay_history"] = Lib::hashOfAssociativeArray($this->doSelect($p, $sb, $phValues));
					break;
				case "clients":
					$p->data["table"] = "vicidial_list";
					$p->data["jointable"] = "fly_crm." . ($table??'null');
					$value6 = ($param->data["joincond"] ?? null);
					$p->data["joincond"] = $value6;

					$value7 = (\Std::string(HxDynamicStr::wrap(($param->data["fields"] ?? null))->split(",")->map(function ($f1) {
						if (HxString::indexOf($f1, "vicidial_list.") !== 0) {
							return "vicidial_list." . ($f1??'null');
						} else {
							return $f1;
						}
					})->join(","))??'null') . "," . (($tableFields_data[$table] ?? null)->map(function ($f2)  use (&$table) {
						return ($table??'null') . "." . ($f2??'null');
					})->join(",")??'null');
					$p->data["fields"] = $value7;

					$value8 = "vicidial_list.lead_id|" . (\Std::string(($param->data["lead_id"] ?? null))??'null');
					$p->data["where"] = $value8;

					$value9 = Lib::hashOfAssociativeArray($this->doJoin($p, $sb, $phValues));
					$editTables_data[$table] = $value9;

					break;
				default:
					$tmp = null;
					if ($table === "vicidial_list") {
						$tmp = $table;
					} else {
						$tmp = "fly_crm." . ($table??'null');
					}
					$p->data["table"] = $tmp;

					$value10 = ($tableFields_data[$table] ?? null)->join(",");
					$p->data["fields"] = $value10;

					if ($table === "vicidial_list") {
						$value11 = "vendor_lead_code|" . (\Std::string(($param->data["client_id"] ?? null))??'null');
						$p->data["where"] = $value11;
					} else {
						$value12 = "client_id|" . (\Std::string(($param->data["client_id"] ?? null))??'null');
						$p->data["where"] = $value12;
					}
					$value13 = Lib::hashOfAssociativeArray($this->doSelect($p, $sb, $phValues));
					$editTables_data[$table] = $value13;

					if ($table === "pay_source") {
						(Log::$trace)(($tableFields_data[$table] ?? null), new HxAnon([
							"fileName" => "Clients.hx",
							"lineNumber" => 201,
							"className" => "model.Clients",
							"methodName" => "edit",
						]));
					}
					break;
			}
		}

		$recordings = $this->getRecordings(\Std::parseInt(($param->data["lead_id"] ?? null)));
		$value14 = new ClientHistory();
		$_g12 = new StringMap();
		$value15 = "reason|AC01 AC04 MD06 MS03,m_ID|" . (\Std::string(($param->data["client_id"] ?? null))??'null');
		$_g12->data["where"] = $value15;

		$_g12->data["limit"] = 150;
		$editTables_data["konto_auszug"] = Lib::hashOfAssociativeArray(Boot::typedCast(Boot::getClass('Dynamic'), $value14->findClient($_g12, true)));

		$this->data = new HxAnon([
			"fieldNames" => $fieldNames_data,
			"editData" => $editTables_data,
			"typeMap" => $typeMap->data,
			"optionsMap" => $optionsMap_data,
			"recordings" => $recordings,
		]);
		$this5 = [];
		$userMap_data = $this5;
		$sb1 = new \StringBuf();
		$phValues1 = new \Array_hx();
		$p_data = null;
		$this6 = [];
		$p_data = $this6;
		$p_data["table"] = "asterisk.vicidial_users";
		$p_data["fields"] = "user,full_name";
		$p_data["where"] = "user_group|AGENTS_A";
		$owner = \Std::parseInt((Lib::hashOfAssociativeArray((($editTables_data["clients"] ?? null)->data["0"] ?? null))->data["owner"] ?? null));
		(Log::$trace)($owner, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 222,
			"className" => "model.Clients",
			"methodName" => "edit",
		]));
		$this->data->userMap = (new Users())->get_info();
		return $this->json_encode();
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		(Log::$trace)($param, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 110,
			"className" => "model.Clients",
			"methodName" => "find",
		]));
		$count = $this->countJoin($param, $sb, $phValues);
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$tmp = Log::$trace;
		$tmp1 = (($param->data["joincond"] ?? null)??'null') . " count:" . ($count??'null') . ":" . (($param->data["page"] ?? null)??'null') . ": ";
		$tmp2 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp2 = "Y";
		} else {
			$tmp2 = "N";
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 115,
			"className" => "model.Clients",
			"methodName" => "find",
		]));
		$tmp3 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp3 = \Std::parseInt(($param->data["page"] ?? null));
		} else {
			$tmp3 = 1;
		}
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp3,
			"rows" => $this->doJoin($param, $sb, $phValues),
		]);
		return $this->json_encode();
	}


	/**
	 * @param string $list_id
	 * 
	 * @return \Array_hx
	 */
	public function getCustomFields ($list_id) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$param = new StringMap();
		$param->data["table"] = "vicidial_lists_fields";
		$value = "list_id|" . (\S::$my->real_escape_string($list_id)??'null');
		$param->data["where"] = $value;

		$param->data["fields"] = "field_name,field_label,field_type,field_options,field_required,field_default";
		$param->data["order"] = "field_rank,field_order";
		$param->data["limit"] = "100";
		$cFields = \Array_hx::wrap($this->doSelect($param, $sb, $phValues));
		(Log::$trace)($cFields->length, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 241,
			"className" => "model.Clients",
			"methodName" => "getCustomFields",
		]));
		$ret = new \Array_hx();
		$_g = 0;
		while ($_g < $cFields->length) {
			unset($cf);
			$cf = ($cFields->arr[$_g] ?? null);
			$_g = $_g + 1;
			$ret->push(Lib::hashOfAssociativeArray($cf));
		}

		return $ret;
	}


	/**
	 * @param int $lead_id
	 * 
	 * @return mixed
	 */
	public function getRecordings ($lead_id) {
		$records = \Array_hx::wrap($this->query("SELECT location ,  start_time, length_in_sec FROM recording_log WHERE lead_id = " . (\Std::string($lead_id)??'null') . " ORDER BY start_time DESC"));
		$rc = $this->num_rows;
		(Log::$trace)("" . ($rc??'null') . " == " . ($records->length??'null'), new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 297,
			"className" => "model.Clients",
			"methodName" => "getRecordings",
		]));
		return $records->filter(function ($r) {
			return Boot::deref(new HxAnon($r))->length_in_sec > 60;
		})->arr;
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save ($q) {
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		$ref_id = false;
		$ref_id = $this->saveLog($q);
		if ($ref_id) {
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
			$sql = new \StringBuf();
			$sql->add("UPDATE " . ($cTable??'null') . " SET ");
			$cFields = \S::tableFields("" . ($cTable??'null'));
			(Log::$trace)("" . ($cTable??'null') . " fields:" . ($cFields->toString()??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 398,
				"className" => "model.Clients",
				"methodName" => "save",
			]));
			$cFields->remove("lead_id");
			$cFields->remove($primary_id);
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			$sets = new \Array_hx();
			$_g = 0;
			while ($_g < $cFields->length) {
				unset($c, $tmp, $bindTypes1, $tmp1, $type, $val);
				$c = ($cFields->arr[$_g] ?? null);
				$_g = $_g + 1;
				$val = ($q->data[$c] ?? null);
				(Log::$trace)(($c??'null') . ":" . ((Clients::$custom_fields_map->data[$c] ?? null)??'null') . ((":" . (\Std::string($val)??'null') . " ")??'null') . (\Std::string(\Util::any2bool((Clients::$custom_fields_map->data[$c] ?? null)))??'null'), new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 409,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				if ($val !== null) {
					$i = $i + 1;
					$tmp = null;
					if (Boot::is($val, Boot::getClass('String'))) {
						$tmp = $val;
					} else {
						$tmp = $val[0];
					}
					$values2bind[$i - 1] = $tmp;
					$type = ($dbFieldTypes->data[$c] ?? null);
					$bindTypes1 = null;
					if (\Util::any2bool($type)) {
						$bindTypes1 = $type;
					} else {
						$bindTypes1 = "s";
					}
					$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
					$tmp1 = null;
					if (\Util::any2bool((Clients::$custom_fields_map->data[$c] ?? null))) {
						$tmp1 = (Clients::$custom_fields_map->data[$c] ?? null);
					} else {
						$tmp1 = $c;
					}
					$sets->push(($tmp1??'null') . "=?");
				}
			}

			$customFields2Save = false;
			$success = false;
			$stmt = \S::$my->stmt_init();
			if ($sets->length > 0) {
				$customFields2Save = true;
				$sql->add($sets->join(","));
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 428,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				$success = $stmt->prepare($sql->b);
			} else {
				$success = true;
			}
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 434,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				return false;
			}
			if ($customFields2Save) {
				$success = myBindParam($stmt, $values2bind, $bindTypes);
			} else {
				$success = true;
			}
			if ($success) {
				if ($customFields2Save) {
					$success = $stmt->execute();
					if (!$success) {
						(Log::$trace)($stmt->error, new HxAnon([
							"fileName" => "Clients.hx",
							"lineNumber" => 451,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
						return false;
					}
				}
				$sql = new \StringBuf();
				$uFields = Clients::$vicdial_list_fields;
				$uFields->remove($primary_id);
				$bindTypes = "";
				$values2bind = null;
				$i = 0;
				$sql->add("UPDATE vicidial_list SET ");
				$sets = new \Array_hx();
				$_g1 = 0;
				while ($_g1 < $uFields->length) {
					unset($type1, $c1, $bindTypes2, $tmp2, $val1);
					$c1 = ($uFields->arr[$_g1] ?? null);
					$_g1 = $_g1 + 1;
					$val1 = ($q->data[$c1] ?? null);
					if ($val1 !== null) {
						$i = $i + 1;
						$tmp2 = null;
						if (Boot::is($val1, Boot::getClass('String'))) {
							$tmp2 = $val1;
						} else {
							$tmp2 = $val1[0];
						}
						$values2bind[$i - 1] = $tmp2;
						$type1 = ($dbFieldTypes->data[$c1] ?? null);
						$bindTypes2 = null;
						if (\Util::any2bool($type1)) {
							$bindTypes2 = $type1;
						} else {
							$bindTypes2 = "s";
						}
						$bindTypes = ($bindTypes??'null') . ($bindTypes2??'null');
						$sets->push(($c1??'null') . "=?");
					}
				}

				$i = $i + 1;
				$values2bind[$i - 1] = "XX";
				$bindTypes = ($bindTypes??'null') . "s";
				$sets->push("state=?");
				$tmp3 = null;
				if (($q->data["status"] ?? null) !== "QCOK") {
					$tmp3 = ($q->data["status"] ?? null) === "QCBAD";
				} else {
					$tmp3 = true;
				}
				if ($tmp3) {
					$list_id = 10000;
					if (($q->data["status"] ?? null) === "QCOK") {
						$mID = \Std::parseInt(($q->data["vendor_lead_code"] ?? null));
						if ($mID === null) {
							$mID = \S::newMemberID();
							$i = $i + 1;
							$values2bind[$i - 1] = $mID;
							$bindTypes = ($bindTypes??'null') . "s";
							$sets->push("vendor_lead_code=?");
						}
					} else {
						$list_id = 1800;
					}
					$entry_list_id = ($q->data["entry_list_id"] ?? null);
					$i = $i + 1;
					$values2bind[$i - 1] = ($q->data["status"] ?? null);
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("`status`=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $list_id;
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $entry_list_id;
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("entry_list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = ($q->data["owner"] ?? null);
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("owner=?");
				}
				$sql->add($sets->join(","));
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				$stmt1 = \S::$my->stmt_init();
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 513,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				$success1 = $stmt1->prepare($sql->b);
				if (!$success1) {
					(Log::$trace)($stmt1->error, new HxAnon([
						"fileName" => "Clients.hx",
						"lineNumber" => 517,
						"className" => "model.Clients",
						"methodName" => "save",
					]));
					return false;
				}
				$success1 = myBindParam($stmt1, $values2bind, $bindTypes);
				(Log::$trace)("success:" . (\Std::string($success1)??'null'), new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 523,
					"className" => "model.Clients",
					"methodName" => "save",
				]));
				if ($success1) {
					$success1 = $stmt1->execute();
					if (!$success1) {
						(Log::$trace)($stmt1->error, new HxAnon([
							"fileName" => "Clients.hx",
							"lineNumber" => 529,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
						return false;
					}
					if (!$this->saveClientData($q)) {
						(Log::$trace)("oops:" . (\S::$my->error??'null'), new HxAnon([
							"fileName" => "Clients.hx",
							"lineNumber" => 534,
							"className" => "model.Clients",
							"methodName" => "save",
						]));
					} else {
						return $this->saveLog($q, $ref_id) !== false;
					}
				} else {
					(Log::$trace)("oops:" . (\S::$my->error??'null'), new HxAnon([
						"fileName" => "Clients.hx",
						"lineNumber" => 542,
						"className" => "model.Clients",
						"methodName" => "save",
					]));
				}
			}
		}
		return false;
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function saveClientData ($q) {
		$clientID = ($q->data["client_id"] ?? null);
		$log_id = $this->saveClientDataLog($q);
		$tmp = null;
		if ($clientID !== null) {
			$tmp = !$log_id;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			return false;
		}
		$sql = new \StringBuf();
		$uFields = Clients::$clients_fields;
		$uFields->remove("client_id");
		$bindTypes = "";
		$values2bind = null;
		$i = 0;
		$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
		$sets = new \Array_hx();
		$sql->add("UPDATE fly_crm.clients SET ");
		$_g = 0;
		while ($_g < $uFields->length) {
			unset($c, $bindTypes1, $tmp1, $type, $val);
			$c = ($uFields->arr[$_g] ?? null);
			$_g = $_g + 1;
			$val = ($q->data[$c] ?? null);
			if ($val !== null) {
				$i = $i + 1;
				$tmp1 = null;
				if (Boot::is($val, Boot::getClass('String'))) {
					$tmp1 = $val;
				} else {
					$tmp1 = $val[0];
				}
				$values2bind[$i - 1] = $tmp1;
				$type = ($dbFieldTypes->data[$c] ?? null);
				$bindTypes1 = null;
				if (\Util::any2bool($type)) {
					$bindTypes1 = $type;
				} else {
					$bindTypes1 = "s";
				}
				$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
				$sets->push(($c??'null') . "=?");
			}
		}

		if ($sets->length === 0) {
			return true;
		}
		$sql->add($sets->join(","));
		$sql->add(" WHERE client_id=" . ($clientID??'null'));
		$stmt = \S::$my->stmt_init();
		(Log::$trace)($sql->b, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 598,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		$success = $stmt->prepare($sql->b);
		if (!$success) {
			(Log::$trace)($stmt->error, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 602,
				"className" => "model.Clients",
				"methodName" => "saveClientData",
			]));
			return false;
		}
		(Log::$trace)($values2bind, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 606,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		$success = myBindParam($stmt, $values2bind, $bindTypes);
		(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 608,
			"className" => "model.Clients",
			"methodName" => "saveClientData",
		]));
		if ($success) {
			$success = $stmt->execute();
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 614,
					"className" => "model.Clients",
					"methodName" => "saveClientData",
				]));
				return false;
			}
			return $this->saveClientDataLog($q, $log_id) !== false;
		}
		return false;
	}


	/**
	 * @param StringMap $q
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function saveClientDataLog ($q, $ref_id = 0) {
		if ($ref_id === null) {
			$ref_id = 0;
		}
		$clientID = ($q->data["client_id"] ?? null);
		$user = \S::$user;
		if (!\Util::any2bool(\S::$my->query("INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active," . ($user??'null') . " AS log_user,NULL AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . ($clientID??'null')))) {
			(Log::$trace)("failed to: INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active," . ($user??'null') . " AS log_user,NULL AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . ($clientID??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 556,
				"className" => "model.Clients",
				"methodName" => "saveClientDataLog",
			]));
			return false;
		}
		return \S::$my->insert_id;
	}


	/**
	 * @param StringMap $q
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function saveLog ($q, $ref_id = 0) {
		if ($ref_id === null) {
			$ref_id = 0;
		}
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		if (\S::$my->query("INSERT INTO vicidial_lead_log SELECT * FROM (SELECT NULL AS log_id," . ($lead_id??'null') . " AS lead_id,NOW() AS entry_date) AS ll JOIN (SELECT modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id," . (\S::$user??'null') . " AS log_user," . ($ref_id??'null') . " as ref_id FROM `vicidial_list` WHERE `lead_id`=" . ($lead_id??'null') . ")AS vl")) {
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			$log_id = \S::$my->insert_id;
			if ($this->checkOrCreateCustomTable($cTable)) {
				$cLogTable = ($cTable??'null') . "_log";
				\S::$my->query("INSERT INTO " . ($cLogTable??'null') . " SELECT * FROM (SELECT " . ($log_id??'null') . " AS log_id) AS ll JOIN (SELECT * FROM `" . ($cTable??'null') . "` WHERE `lead_id`=" . ($lead_id??'null') . ")AS cl");
				(Log::$trace)("INSERT INTO " . ($cLogTable??'null') . " ..." . (\S::$my->error??'null') . "<", new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 322,
					"className" => "model.Clients",
					"methodName" => "saveLog",
				]));
				if (\S::$my->error === "") {
					return $log_id;
				}
			}
		}
		return false;
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return mixed
	 */
	public function savePayBack ($q) {
		(Log::$trace)($q, new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 332,
			"className" => "model.Clients",
			"methodName" => "savePayBack",
		]));
		return false;
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save_pay_plan ($q) {
		$product = Lib::hashOfAssociativeArray(($q->data["product"] ?? null));
		$user = \S::$user;
		(Log::$trace)((\Std::string($product)??'null') . ":" . (\Lambda::count($product)??'null') . ":" . (\Std::string((new NativeArrayIterator(array_map("strval", array_keys($product->data))))->hasNext())??'null'), new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 640,
			"className" => "model.Clients",
			"methodName" => "save_pay_plan",
		]));
		$pIt = new NativeArrayIterator(array_map("strval", array_keys($product->data)));
		while ($pIt->hasNext()) {
			unset($success, $uFields, $pay_plan_id, $bindTypes, $sets, $values2bind, $i, $log_id, $stmt, $dbFieldTypes, $_g, $sql);
			$pay_plan_id = $pIt->next();
			$log_id = $this->save_pay_plan_log($pay_plan_id);
			(Log::$trace)($log_id, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 648,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			if (!$log_id) {
				return false;
			}
			$sql = new \StringBuf();
			$uFields = Clients::$pay_plan_fields;
			$uFields->remove("pay_plan_id");
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			$sets = new \Array_hx();
			$sql->add("UPDATE fly_crm.pay_plan SET ");
			$_g = 0;
			while ($_g < $uFields->length) {
				unset($c, $valMap, $key, $bindTypes1, $type, $p, $val);
				$c = ($uFields->arr[$_g] ?? null);
				$_g = $_g + 1;
				(Log::$trace)(($c??'null') . ":" . (\Std::string(\Type::typeof(($q->data[$c] ?? null)))??'null'), new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 663,
					"className" => "model.Clients",
					"methodName" => "save_pay_plan",
				]));
				$p = ($q->data[$c] ?? null);
				$val = null;
				if ($p !== null) {
					if (!Boot::is($p, Boot::getClass('String'))) {
						$valMap = Lib::hashOfAssociativeArray(($q->data[$c] ?? null));
						$key = \Std::string($pay_plan_id);
						$val = ($valMap->data[$key] ?? null);
					} else {
						$val = $p;
					}
					$i = $i + 1;
					$values2bind[$i - 1] = $val;
					$type = ($dbFieldTypes->data[$c] ?? null);
					$bindTypes1 = null;
					if (\Util::any2bool($type)) {
						$bindTypes1 = $type;
					} else {
						$bindTypes1 = "s";
					}
					$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
					$sets->push(($c??'null') . "=?");
				}
			}

			if ($sets->length === 0) {
				continue;
			}
			$sql->add($sets->join(","));
			$sql->add(" WHERE pay_plan_id=" . ($pay_plan_id??'null'));
			$stmt = \S::$my->stmt_init();
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 691,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			$success = $stmt->prepare($sql->b);
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 695,
					"className" => "model.Clients",
					"methodName" => "save_pay_plan",
				]));
				return false;
			}
			(Log::$trace)($values2bind, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 699,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 701,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan",
			]));
			if ($success) {
				$success = $stmt->execute();
				if (!$success) {
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "Clients.hx",
						"lineNumber" => 707,
						"className" => "model.Clients",
						"methodName" => "save_pay_plan",
					]));
					return false;
				}
				$this->save_pay_plan_log($pay_plan_id, $log_id);
				if (!$pIt->hasNext()) {
					return true;
				}
			}
		}
		return false;
	}


	/**
	 * @param int $pay_plan_id
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function save_pay_plan_log ($pay_plan_id, $ref_id = 0) {
		if ($ref_id === null) {
			$ref_id = 0;
		}
		$user = \S::$user;
		if (!\Util::any2bool(\S::$my->query("INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,agency_project,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . ($pay_plan_id??'null')))) {
			(Log::$trace)("Failed to:  INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . ($pay_plan_id??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 628,
				"className" => "model.Clients",
				"methodName" => "save_pay_plan_log",
			]));
			return false;
		}
		return \S::$my->insert_id;
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save_pay_source ($q) {
		$account = Lib::hashOfAssociativeArray(($q->data["account"] ?? null));
		$_e = $account;
		(Log::$trace)((\Std::string($account)??'null') . ":" . (\Std::string(function ($pred = null)  use (&$_e) {
			return \Lambda::count($_e, $pred);
		})??'null'), new HxAnon([
			"fileName" => "Clients.hx",
			"lineNumber" => 734,
			"className" => "model.Clients",
			"methodName" => "save_pay_source",
		]));
		$pIt = new NativeArrayIterator(array_map("strval", array_keys($account->data)));
		$user = \S::$user;
		while ($pIt->hasNext()) {
			unset($success, $uFields, $bindTypes, $sets, $values2bind, $i, $pay_source_id, $log_id, $stmt, $dbFieldTypes, $_g, $sql);
			$pay_source_id = $pIt->next();
			$log_id = $this->save_pay_source_log($pay_source_id);
			if (!$log_id) {
				return false;
			}
			$sql = new \StringBuf();
			$uFields = Clients::$pay_source_fields;
			$uFields->remove("pay_source_id");
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			$sets = new \Array_hx();
			$sql->add("UPDATE fly_crm.pay_source SET ");
			$_g = 0;
			while ($_g < $uFields->length) {
				unset($c, $valMap, $key, $bindTypes1, $type, $p, $val);
				$c = ($uFields->arr[$_g] ?? null);
				$_g = $_g + 1;
				(Log::$trace)(($c??'null') . ":" . (\Std::string(\Type::typeof(($q->data[$c] ?? null)))??'null'), new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 757,
					"className" => "model.Clients",
					"methodName" => "save_pay_source",
				]));
				$p = ($q->data[$c] ?? null);
				$val = null;
				if ($p !== null) {
					if (!Boot::is($p, Boot::getClass('String'))) {
						$valMap = Lib::hashOfAssociativeArray(($q->data[$c] ?? null));
						$key = \Std::string($pay_source_id);
						$val = ($valMap->data[$key] ?? null);
					} else {
						$val = $p;
					}
					$i = $i + 1;
					$values2bind[$i - 1] = $val;
					$type = ($dbFieldTypes->data[$c] ?? null);
					$bindTypes1 = null;
					if (\Util::any2bool($type)) {
						$bindTypes1 = $type;
					} else {
						$bindTypes1 = "s";
					}
					$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
					$sets->push(($c??'null') . "=?");
				}
			}

			if ($sets->length === 0) {
				continue;
			}
			$sql->add($sets->join(","));
			$sql->add(" WHERE pay_source_id=" . ($pay_source_id??'null'));
			$stmt = \S::$my->stmt_init();
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 785,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			$success = $stmt->prepare($sql->b);
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "Clients.hx",
					"lineNumber" => 789,
					"className" => "model.Clients",
					"methodName" => "save_pay_source",
				]));
				return false;
			}
			(Log::$trace)($values2bind, new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 793,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 795,
				"className" => "model.Clients",
				"methodName" => "save_pay_source",
			]));
			if ($success) {
				$success = $stmt->execute();
				if (!$success) {
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "Clients.hx",
						"lineNumber" => 801,
						"className" => "model.Clients",
						"methodName" => "save_pay_source",
					]));
					return false;
				}
				$this->save_pay_source_log($pay_source_id, $log_id);
				if (!$pIt->hasNext()) {
					return true;
				}
			}
		}
		return false;
	}


	/**
	 * @param int $pay_source_id
	 * @param int $ref_id
	 * 
	 * @return mixed
	 */
	public function save_pay_source_log ($pay_source_id, $ref_id = 0) {
		if ($ref_id === null) {
			$ref_id = 0;
		}
		$user = \S::$user;
		if (!\Util::any2bool(\S::$my->query("INSERT INTO fly_crm.pay_source_log SELECT  pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . ($pay_source_id??'null')))) {
			(Log::$trace)("Failed to:  INSERT INTO fly_crm.pay_source_log SELECT pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . ($user??'null') . " AS log_user,NOW() AS log_date," . ($ref_id??'null') . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . ($pay_source_id??'null'), new HxAnon([
				"fileName" => "Clients.hx",
				"lineNumber" => 724,
				"className" => "model.Clients",
				"methodName" => "save_pay_source_log",
			]));
			return false;
		}
		return \S::$my->insert_id;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$clients_fields = HxString::split("client_id,lead_id,creation_date,state,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active", ",");
		$_g = new StringMap();
		$_g->data["title"] = "anrede";
		$_g->data["geburts_datum"] = "birth_date";
		self::$custom_fields_map = $_g;
		self::$pay_history_fields = HxString::split("buchungsanforderungID,Mandat-ID,Betrag,Termin,tracking_status", ",");
		self::$pay_plan_fields = HxString::split("pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason", ",");
		self::$pay_source_fields = HxString::split("pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date", ",");
		self::$vicdial_list_fields = HxString::split("lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id", ",");
	}
}


Boot::registerClass(Clients::class, 'model.Clients');
Clients::__hx__init();
