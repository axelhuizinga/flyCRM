<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \haxe\Log;
use \php\_Boot\HxString;
use \php\Lib;
use \php\_Boot\HxAnon;

class QC extends Clients {
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		$self = new QC($param);
		$self->table = "vicidial_list";
		return \Reflect::callMethod($self, \Reflect::field($self, ($param->data["action"] ?? null)), \Array_hx::wrap([$param]));
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		parent::__construct($param);
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doSelectCustom ($q, $sb, $phValues) {
		$fields = ($q->data["fields"] ?? null);
		$tmp = null;
		if ($fields !== null) {
			$tmp = $this->fieldFormat($fields->map(function ($f) {
				return \S::$my->real_escape_string($f);
			})->join(","));
		} else {
			$tmp = "*";
		}
		$sb->add("SELECT " . ($tmp??'null'));
		$entry_list_id = ($q->data["entry_list_id"] ?? null);
		$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
		$sb->add(" FROM " . (\S::$my->real_escape_string($this->table)??'null') . " AS vl INNER JOIN " . (\S::$my->real_escape_string("custom_" . ($entry_list_id??'null'))??'null') . " AS cu ON vl." . ($primary_id??'null') . "=cu." . ($primary_id??'null'));
		$tmp1 = \S::$my;
		$key = ($q->data["primary_id"] ?? null);
		$this->buildCond("vl." . ($primary_id??'null') . "|" . ($tmp1->real_escape_string(($q->data[$key] ?? null))??'null'), $sb, $phValues);
		return $this->execute($sb->b, $phValues);
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function edit ($param) {
		$cF = $this->getCustomFields(($param->data["entry_list_id"] ?? null));
		$cFields = $cF->map(function ($field) {
			return ($field->data["field_label"] ?? null);
		});
		(Log::$trace)($cFields->join(","), new HxAnon([
			"fileName" => "QC.hx",
			"lineNumber" => 39,
			"className" => "model.QC",
			"methodName" => "edit",
		]));
		$fieldDefault_data = [];
		$fieldNames_data = [];
		$fieldRequired_data = [];
		$typeMap_data = [];
		$optionsMap_data = [];
		$eF = ($this->getEditorFields()->data["vicidial_list"] ?? null);
		$_g = 0;
		while ($_g < $eF->length) {
			unset($f);
			$f = ($eF->arr[$_g] ?? null);
			$_g = $_g + 1;
			$fieldNames_data[($f->data["field_label"] ?? null)] = ($f->data["field_name"] ?? null);
			if (($f->data["field_options"] ?? null) !== null) {
				$optionsMap_data[($f->data["field_label"] ?? null)] = ($f->data["field_options"] ?? null);
			}
			$typeMap_data[($f->data["field_label"] ?? null)] = ($f->data["field_type"] ?? null);
		}

		$_g1 = 0;
		$_g2 = $cFields->length;
		while ($_g1 < $_g2) {
			unset($value3, $f1, $value1, $def, $value2, $value);
			$_g1 = $_g1 + 1;
			$f1 = $_g1 - 1;
			$value = ($cF[$f1]->data["field_name"] ?? null);
			$fieldNames_data[($cFields->arr[$f1] ?? null)] = $value;

			if (($cF[$f1]->data["field_options"] ?? null) !== null) {
				$value1 = ($cF[$f1]->data["field_options"] ?? null);
				$optionsMap_data[($cFields->arr[$f1] ?? null)] = $value1;
			}
			$def = ($cF[$f1]->data["field_default"] ?? null);
			if ($def !== null) {
				switch ($def) {
					case "":
					case "NULL":
												break;
					default:
						$value2 = ($cF[$f1]->data["field_default"] ?? null);
						$fieldDefault_data[($cFields->arr[$f1] ?? null)] = $value2;
						break;
				}
			}
			if (($cF[$f1]->data["field_required"] ?? null) === "Y") {
				$fieldRequired_data[($cFields->arr[$f1] ?? null)] = true;
			}
			$value3 = ($cF[$f1]->data["field_type"] ?? null);
			$typeMap_data[($cFields->arr[$f1] ?? null)] = $value3;

		}

		$cFields->push("entry_date");
		$param->data["fields"] = $cFields;
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$tmp = $this->doSelectCustom($param, $sb, $phValues);
		$this->data = new HxAnon([
			"fieldDefault" => $fieldDefault_data,
			"fieldNames" => $fieldNames_data,
			"fieldRequired" => $fieldRequired_data,
			"rows" => $tmp,
			"typeMap" => $typeMap_data,
			"optionsMap" => $optionsMap_data,
			"recordings" => $this->getRecordings(\Std::parseInt(($param->data["lead_id"] ?? null))),
		]);
		[];
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$p_data = [];
		$p_data["table"] = "vicidial_users";
		$p_data["fields"] = "user,full_name";
		$p_data["where"] = "user_group|AGENTS_A";
		(Log::$trace)(($this->num_rows??'null') . ":" . (\Std::string(($param->data["owner"] ?? null))??'null'), new HxAnon([
			"fileName" => "QC.hx",
			"lineNumber" => 109,
			"className" => "model.QC",
			"methodName" => "edit",
		]));
		$this->data->userMap = (new Users())->get_info();
		return $this->json_encode();
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function errSale ($q) {
		$this->query("UPDATE vicidial_list SET status='NI', list_id=`entry_list_id` WHERE lead_id=" . (\Std::parseInt(($q->data["lead_id"] ?? null))??'null'));
		return \S::$my->affected_rows === 1;
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$count = $this->countJoin($param, $sb, $phValues);
		(Log::$trace)($param, new HxAnon([
			"fileName" => "QC.hx",
			"lineNumber" => 121,
			"className" => "model.QC",
			"methodName" => "find",
		]));
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$tmp = Log::$trace;
		$tmp1 = "count:" . ($count??'null') . ":" . (($param->data["page"] ?? null)??'null') . ": ";
		$tmp2 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp2 = "Y";
		} else {
			$tmp2 = "N";
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "QC.hx",
			"lineNumber" => 124,
			"className" => "model.QC",
			"methodName" => "find",
		]));
		$tmp3 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp3 = \Std::parseInt(($param->data["page"] ?? null));
		} else {
			$tmp3 = 1;
		}
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp3,
			"rows" => $this->doJoin($param, $sb, $phValues),
		]);
		return $this->json_encode();
	}


	/**
	 * @param StringMap $q
	 * 
	 * @return bool
	 */
	public function save ($q) {
		$lead_id = \Std::parseInt(($q->data["lead_id"] ?? null));
		$user = \S::$user;
		$tmp = null;
		if (array_key_exists("status", $q->data)) {
			$tmp = ($q->data["status"] ?? null) === "ERRSALE";
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return $this->errSale($q);
		}
		$log_id = false;
		$log_id = $this->saveLog($q);
		if ($log_id) {
			$cTable = "custom_" . (\Std::string(($q->data["entry_list_id"] ?? null))??'null');
			(Log::$trace)(($cTable??'null') . " log_id:" . (\Std::string($log_id)??'null'), new HxAnon([
				"fileName" => "QC.hx",
				"lineNumber" => 173,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			$primary_id = \S::$my->real_escape_string(($q->data["primary_id"] ?? null));
			$sql = new \StringBuf();
			$sql->add("UPDATE " . ($cTable??'null') . " SET ");
			$cFields = \S::tableFields("" . ($cTable??'null'));
			(Log::$trace)("" . ($cTable??'null') . " fields:" . ($cFields->toString()??'null'), new HxAnon([
				"fileName" => "QC.hx",
				"lineNumber" => 188,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			$cFields->remove($primary_id);
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
			$sets = new \Array_hx();
			$_g = 0;
			while ($_g < $cFields->length) {
				unset($c, $bindTypes1, $tmp1, $type, $val);
				$c = ($cFields->arr[$_g] ?? null);
				$_g = $_g + 1;
				$val = ($q->data[$c] ?? null);
				if ($val !== null) {
					$i = $i + 1;
					$tmp1 = null;
					if (Boot::is($val, Boot::getClass('String'))) {
						$tmp1 = $val;
					} else {
						$tmp1 = $val[0];
					}
					$values2bind[$i - 1] = $tmp1;
					$type = ($dbFieldTypes->data[$c] ?? null);
					$bindTypes1 = null;
					if (\Util::any2bool($type)) {
						$bindTypes1 = $type;
					} else {
						$bindTypes1 = "s";
					}
					$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
					$sets->push(($c??'null') . "=?");
				}
			}

			$sql->add($sets->join(","));
			$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
			$stmt = \S::$my->stmt_init();
			(Log::$trace)($sql->b, new HxAnon([
				"fileName" => "QC.hx",
				"lineNumber" => 210,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			$success = $stmt->prepare($sql->b);
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "QC.hx",
					"lineNumber" => 214,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				return false;
			}
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "QC.hx",
				"lineNumber" => 218,
				"className" => "model.QC",
				"methodName" => "save",
			]));
			if ($success) {
				$success = $stmt->execute();
				if (!$success) {
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "QC.hx",
						"lineNumber" => 224,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					return false;
				}
				$sql = new \StringBuf();
				$uFields = QC::$vicdial_list_fields;
				$uFields->remove($primary_id);
				$bindTypes = "";
				$values2bind = null;
				$i = 0;
				$sql->add("UPDATE vicidial_list SET ");
				$sets = new \Array_hx();
				$_g1 = 0;
				while ($_g1 < $uFields->length) {
					unset($type1, $c1, $bindTypes2, $tmp2, $val1);
					$c1 = ($uFields->arr[$_g1] ?? null);
					$_g1 = $_g1 + 1;
					$val1 = ($q->data[$c1] ?? null);
					if ($val1 !== null) {
						$i = $i + 1;
						$tmp2 = null;
						if (Boot::is($val1, Boot::getClass('String'))) {
							$tmp2 = $val1;
						} else {
							$tmp2 = $val1[0];
						}
						$values2bind[$i - 1] = $tmp2;
						$type1 = ($dbFieldTypes->data[$c1] ?? null);
						$bindTypes2 = null;
						if (\Util::any2bool($type1)) {
							$bindTypes2 = $type1;
						} else {
							$bindTypes2 = "s";
						}
						$bindTypes = ($bindTypes??'null') . ($bindTypes2??'null');
						$sets->push(($c1??'null') . "=?");
					}
				}

				$i = $i + 1;
				$values2bind[$i - 1] = \S::$user;
				$bindTypes = ($bindTypes??'null') . "s";
				$sets->push("security_phrase=?");
				$i = $i + 1;
				$values2bind[$i - 1] = "XX";
				$bindTypes = ($bindTypes??'null') . "s";
				$sets->push("state=?");
				$tmp3 = null;
				if (($q->data["status"] ?? null) !== "QCOK") {
					$tmp3 = ($q->data["status"] ?? null) === "QCBAD";
				} else {
					$tmp3 = true;
				}
				if ($tmp3) {
					$list_id = 10000;
					if (($q->data["status"] ?? null) === "QCOK") {
						$mID = \Std::parseInt(($q->data["vendor_lead_code"] ?? null));
						if ($mID === null) {
							$mID = \S::newMemberID();
							$i = $i + 1;
							$values2bind[$i - 1] = $mID;
							$bindTypes = ($bindTypes??'null') . "s";
							$sets->push("vendor_lead_code=?");
						}
					} else {
						$list_id = 1800;
					}
					(Log::$trace)("list_id:" . ($list_id??'null'), new HxAnon([
						"fileName" => "QC.hx",
						"lineNumber" => 270,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					$entry_list_id = ($q->data["entry_list_id"] ?? null);
					$i = $i + 1;
					$values2bind[$i - 1] = ($q->data["status"] ?? null);
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("`status`=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $list_id;
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $entry_list_id;
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("entry_list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = ($q->data["owner"] ?? null);
					$bindTypes = ($bindTypes??'null') . "s";
					$sets->push("owner=?");
				}
				$sql->add($sets->join(","));
				$sql->add(" WHERE lead_id=" . ($lead_id??'null'));
				$stmt1 = \S::$my->stmt_init();
				(Log::$trace)($sql->b, new HxAnon([
					"fileName" => "QC.hx",
					"lineNumber" => 288,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				$success1 = $stmt1->prepare($sql->b);
				if (!$success1) {
					(Log::$trace)($stmt1->error, new HxAnon([
						"fileName" => "QC.hx",
						"lineNumber" => 292,
						"className" => "model.QC",
						"methodName" => "save",
					]));
					return false;
				}
				$success1 = myBindParam($stmt1, $values2bind, $bindTypes);
				(Log::$trace)("success:" . (\Std::string($success1)??'null'), new HxAnon([
					"fileName" => "QC.hx",
					"lineNumber" => 298,
					"className" => "model.QC",
					"methodName" => "save",
				]));
				if ($success1) {
					$success1 = $stmt1->execute();
					if (!$success1) {
						(Log::$trace)($stmt1->error, new HxAnon([
							"fileName" => "QC.hx",
							"lineNumber" => 304,
							"className" => "model.QC",
							"methodName" => "save",
						]));
						return false;
					} else {
						return $this->saveLog($q, $log_id) !== false;
					}
				}
				return false;
			}
		} else {
			(Log::$trace)("oops", new HxAnon([
				"fileName" => "QC.hx",
				"lineNumber" => 317,
				"className" => "model.QC",
				"methodName" => "save",
			]));
		}
		return false;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$vicdial_list_fields = HxString::split("lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id", ",");
	}
}


Boot::registerClass(QC::class, 'model.QC');
QC::__hx__init();
