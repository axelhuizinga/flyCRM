<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace model;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \haxe\Log;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class ClientHistory extends Clients {
	/**
	 * @var \Array_hx
	 */
	static public $clients_fields;
	/**
	 * @var StringMap
	 */
	static public $custom_fields_map;
	/**
	 * @var \Array_hx
	 */
	static public $pay_plan_fields;
	/**
	 * @var \Array_hx
	 */
	static public $pay_source_fields;
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function create ($param) {
		$self = new ClientHistory($param);
		$self->table = "vicidial_list";
		return \Reflect::callMethod($self, \Reflect::field($self, ($param->data["action"] ?? null)), \Array_hx::wrap([$param]));
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		parent::__construct($param);
	}


	/**
	 * @param \Array_hx $where
	 * @param \Array_hx $phValues
	 * 
	 * @return string
	 */
	public function addCond ($where, $phValues) {
		if ($where->length === 0) {
			return "";
		}
		$sb = new \StringBuf();
		$first = true;
		$_g = 0;
		while ($_g < $where->length) {
			unset($wData, $filter_tables, $tmp3, $eR, $tmp, $w, $tmp1, $values, $tmp2, $val);
			$w = ($where->arr[$_g] ?? null);
			$_g = $_g + 1;
			$wData = HxDynamicStr::wrap($w)->split("|");
			$values = $wData->slice(2);
			$filter_tables = null;
			$tmp = null;
			$tmp1 = null;
			if (\Util::any2bool($this->param)) {
				$tmp1 = array_key_exists("filter_tables", $this->param->data);
			} else {
				$tmp1 = false;
			}
			if ($tmp1) {
				$tmp = \Util::any2bool(($this->param->data["filter_tables"] ?? null));
			} else {
				$tmp = false;
			}
			if ($tmp) {
				$filter_tables = HxString::split(($this->param->data["filter_tables"] ?? null), ",");
			}
			(Log::$trace)((\Std::string($wData)??'null') . ":" . ($this->joinTable??'null') . ":" . (\Std::string($filter_tables)??'null'), new HxAnon([
				"fileName" => "ClientHistory.hx",
				"lineNumber" => 53,
				"className" => "model.ClientHistory",
				"methodName" => "addCond",
			]));
			$tmp2 = null;
			if ((new \EReg("^pay_[a-zA-Z_]+\\.", ""))->match(($wData->arr[0] ?? null))) {
				$tmp2 = (HxString::split(($wData->arr[0] ?? null), ".")->arr[0] ?? null) !== $this->joinTable;
			} else {
				$tmp2 = false;
			}
			if ($tmp2) {
				continue;
			}
			if ($first) {
				$sb->add(" WHERE ");
				$first = false;
			} else {
				$sb->add(" AND ");
			}
			switch (HxString::toUpperCase(($wData->arr[1] ?? null))) {
				case "BETWEEN":
					$tmp3 = null;
					if ($values->length !== 2) {
						$tmp3 = \Lambda::foreach($values, function ($s) {
							return \Util::any2bool($s);
						});
					} else {
						$tmp3 = false;
					}
					if ($tmp3) {
						\S::exit("BETWEEN needs 2 values - got only:" . ($values->join(",")??'null'));
					}
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" BETWEEN ? AND ?");
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[0] ?? null),
					]));
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[1] ?? null),
					]));
					break;
				case "IN":
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" IN(");
					$sb->add($values->map(function ($s1)  use (&$wData, &$phValues, &$values) {
						$wData1 = ($wData->arr[0] ?? null);
						$tmp4 = $values->shift();
						$phValues->push(\Array_hx::wrap([
							$wData1,
							$tmp4,
						]));
						return "?";
					})->join(","));
					$sb->add(")");
					break;
				case "LIKE":
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" LIKE ?");
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($wData->arr[2] ?? null),
					]));
					break;
				default:
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					if ((new \EReg("^(<|>)", ""))->match(($wData->arr[1] ?? null))) {
						$eR = new \EReg("^(<|>)", "");
						$eR->match(($wData->arr[1] ?? null));
						$val = \Std::parseFloat($eR->matchedRight());
						$sb->add(($eR->matched(0)??'null') . "?");
						$phValues->push(\Array_hx::wrap([
							($wData->arr[0] ?? null),
							$val,
						]));
						continue 2;
					}
					if (($wData->arr[1] ?? null) === "NULL") {
						$sb->add(" IS NULL");
					} else {
						$sb->add(" = ?");
						$phValues->push(\Array_hx::wrap([
							($wData->arr[0] ?? null),
							($wData->arr[1] ?? null),
						]));
					}
					break;
			}
		}

		return $sb->b;
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		(Log::$trace)($param, new HxAnon([
			"fileName" => "ClientHistory.hx",
			"lineNumber" => 228,
			"className" => "model.ClientHistory",
			"methodName" => "find",
		]));
		$count = $this->countJoin($param, $sb, $phValues);
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$tmp = Log::$trace;
		$tmp1 = (($param->data["joincond"] ?? null)??'null') . " count:" . ($count??'null') . ":" . (($param->data["page"] ?? null)??'null') . ": ";
		$tmp2 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp2 = "Y";
		} else {
			$tmp2 = "N";
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "ClientHistory.hx",
			"lineNumber" => 233,
			"className" => "model.ClientHistory",
			"methodName" => "find",
		]));
		$tmp3 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp3 = \Std::parseInt(($param->data["page"] ?? null));
		} else {
			$tmp3 = 1;
		}
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp3,
			"rows" => $this->doJoin($param, $sb, $phValues),
		]);
		return $this->json_encode();
	}


	/**
	 * @param StringMap $param
	 * @param bool $dataOnly
	 * 
	 * @return mixed
	 */
	public function findClient ($param, $dataOnly = null) {
		$sql = new \StringBuf();
		$phValues = new \Array_hx();
		$cond = "";
		$limit = ($param->data["limit"] ?? null);
		if (!\Util::any2bool($limit)) {
			$limit = (\S::$conf->data["sql"] ?? null)["LIMIT"];
			if (!\Util::any2bool($limit)) {
				$limit = 15;
			}
		}
		$globalCond = "";
		$reasons = "";
		$where = ($param->data["where"] ?? null);
		if (strlen($where) > 0) {
			$where1 = HxString::split($where, ",");
			$whereElements = $where1->filter(function ($el) {
				return !Boot::equal(HxDynamicStr::wrap($el)->indexOf("reason"), 0);
			});
			$_g = 0;
			while ($_g < $where1->length) {
				unset($wData, $_g1, $w);
				$w = ($where1->arr[$_g] ?? null);
				$_g = $_g + 1;
				$wData = HxDynamicStr::wrap($w)->split("|");
				$_g1 = ($wData->arr[0] ?? null);
				if ($_g1 === "reason") {
					$reasons = $wData->slice(1)->join(" ");
				}

			}

			if ($whereElements->length > 0) {
				$globalCond = $this->addCond($whereElements, $phValues);
			}
		}
		$sql->add("SELECT SQL_CALC_FOUND_ROWS * FROM(");
		$first = true;
		if (HxString::indexOf($reasons, "AC04") > -1) {
			if ($first) {
				$first = false;
			}
			$sql->add("(SELECT d, e AS amount, SUBSTR(j,17,8) AS m_ID, z AS IBAN, \"AC04\" AS reason FROM `konto_auszug` WHERE i LIKE \"%AC04 KONTO AUFGELOEST%\" " . ($cond??'null') . "  LIMIT 0,10000)");
			$sql->add("UNION ");
			$sql->add("(SELECT d, e AS amount, SUBSTR(k, 17, 8) AS m_ID, z AS IBAN, \"AC04\" AS reason FROM `konto_auszug` WHERE j LIKE \"%AC04 KONTO AUFGELOEST%\" " . ($cond??'null') . "  LIMIT 0, 10000)");
		}
		if (HxString::indexOf($reasons, "AC01") > -1) {
			if ($first) {
				$first = false;
			} else {
				$sql->add("UNION ");
			}
			$sql->add("(SELECT d, e AS amount, SUBSTR(j,17,8) AS m_ID, z AS IBAN, \"AC01\" AS reason FROM `konto_auszug` WHERE i LIKE \"%AC01 IBAN FEHLERHAFT%\" " . ($cond??'null') . "  LIMIT 0,10000)");
			$sql->add("UNION ");
			$sql->add("(SELECT d, e AS amount, SUBSTR(k, 17, 8) AS m_ID, z AS IBAN, \"AC01\" AS reason FROM `konto_auszug` WHERE j LIKE \"%AC01 IBAN FEHLERHAFT%\" " . ($cond??'null') . "  LIMIT 0, 10000)");
		}
		if (HxString::indexOf($reasons, "MD06") > -1) {
			if ($first) {
				$first = false;
			} else {
				$sql->add("UNION ");
			}
			$sql->add("(SELECT d, e AS amount, SUBSTR(j,17,8) AS m_ID, z AS IBAN, \"MD06\" AS reason FROM `konto_auszug` WHERE i LIKE \"%MD06 WIDERSPRUCH DURCH ZAHLER%\" " . ($cond??'null') . "  LIMIT 0,10000)");
			$sql->add("UNION ");
			$sql->add("(SELECT d, e AS amount, SUBSTR(k, 17, 8) AS m_ID, z AS IBAN, \"MD06\" AS reason FROM `konto_auszug` WHERE j LIKE \"%MD06 WIDERSPRUCH DURCH ZAHLER%\" " . ($cond??'null') . "  LIMIT 0, 10000)");
		}
		if (HxString::indexOf($reasons, "MS03") > -1) {
			if ($first) {
				$first = false;
			} else {
				$sql->add("UNION ");
			}
			$sql->add("(SELECT d, e AS amount, SUBSTR(j,17,8) AS m_ID, z AS IBAN, \"MS03\" AS reason FROM `konto_auszug` WHERE i LIKE \"%MS03 SONSTIGE GRUENDE%\" " . ($cond??'null') . "  LIMIT 0,10000)");
			$sql->add("UNION ");
			$sql->add("(SELECT d, e AS amount, SUBSTR(k, 17, 8) AS m_ID, z AS IBAN, \"MS03\" AS reason FROM `konto_auszug` WHERE j LIKE \"%MS03 SONSTIGE GRUENDE%\" " . ($cond??'null') . "  LIMIT 0, 10000)");
		}
		$sql->add(" )_lim " . ($globalCond??'null') . " LIMIT " . ($limit??'null'));
		\S::$my->select_db("fly_crm");
		$rows = $this->execute($sql->b, $phValues);
		if ($dataOnly) {
			return $rows;
		}
		$tmp = $this->query("SELECT FOUND_ROWS()")[0]["FOUND_ROWS()"];
		$tmp1 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp1 = \Std::parseInt(($param->data["page"] ?? null));
		} else {
			$tmp1 = 1;
		}
		$this->data = new HxAnon([
			"count" => $tmp,
			"page" => $tmp1,
			"rows" => $rows,
		]);
		return $this->json_encode();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$clients_fields = HxString::split("client_id,lead_id,creation_date,state,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date", ",");
		$_g = new StringMap();
		$_g->data["title"] = "anrede";
		$_g->data["geburts_datum"] = "birth_date";
		self::$custom_fields_map = $_g;
		self::$pay_plan_fields = HxString::split("pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason", ",");
		self::$pay_source_fields = HxString::split("pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date", ",");
		self::$vicdial_list_fields = HxString::split("lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id", ",");
	}
}


Boot::registerClass(ClientHistory::class, 'model.ClientHistory');
ClientHistory::__hx__init();
