<?php

<<<<<<< HEAD
// Generated by Haxe 3.4.0
=======
// Generated by Haxe 3.4.0 (git build development @ e08d018)
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
class model_Clients extends Model {
	public function __construct($param = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($param);
	}}
	public function doJoin($q, $sb, $phValues) {
		$fields = $q->get("fields");
		$tmp = null;
		if($fields !== null) {
			$tmp = $this->fieldFormat(_hx_explode(",", $fields)->map(array(new _hx_lambda(array(), "model_Clients_0"), 'execute'))->join(","));
		} else {
			$tmp = "*";
		}
		$sb->add("SELECT " . _hx_string_or_null($tmp));
		$qTable = null;
		$v = $q->get("table");
		$qTable1 = null;
		$qTable2 = null;
		if($v !== null) {
			$qTable2 = !_hx_equal($v, 0);
		} else {
			$qTable2 = false;
		}
		if($qTable2) {
			$qTable1 = !_hx_equal($v, "");
		} else {
			$qTable1 = false;
		}
		if($qTable1) {
			$qTable = $q->get("table");
		} else {
			$qTable = $this->table;
		}
		$joinCond = null;
		$v1 = $q->get("joincond");
		$joinCond1 = null;
		$joinCond2 = null;
		if($v1 !== null) {
			$joinCond2 = !_hx_equal($v1, 0);
		} else {
			$joinCond2 = false;
		}
		if($joinCond2) {
			$joinCond1 = !_hx_equal($v1, "");
		} else {
			$joinCond1 = false;
		}
		if($joinCond1) {
			$joinCond = $q->get("joincond");
		} else {
			$joinCond = null;
		}
		$joinTable = null;
		$v2 = $q->get("jointable");
		$joinTable1 = null;
		$joinTable2 = null;
		if($v2 !== null) {
			$joinTable2 = !_hx_equal($v2, 0);
		} else {
			$joinTable2 = false;
		}
		if($joinTable2) {
			$joinTable1 = !_hx_equal($v2, "");
		} else {
			$joinTable1 = false;
		}
		if($joinTable1) {
			$joinTable = $q->get("jointable");
		} else {
			$joinTable = null;
		}
		$filterTables = "";
		$v3 = $q->get("filter");
		$tmp1 = null;
		$tmp2 = null;
		if($v3 !== null) {
			$tmp2 = !_hx_equal($v3, 0);
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = !_hx_equal($v3, "");
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$filterTables = _hx_explode(",", $q->get("filter_tables"))->map(array(new _hx_lambda(array(), "model_Clients_1"), 'execute'))->join(",");
			$sb->add(" FROM " . _hx_string_or_null($filterTables) . "," . _hx_string_or_null(S::$my->real_escape_string($qTable)));
		} else {
			$sb->add(" FROM " . _hx_string_or_null(S::$my->real_escape_string($qTable)));
		}
		if($joinTable !== null) {
			$sb->add(" INNER JOIN " . _hx_string_or_null($joinTable));
		}
		if($joinCond !== null) {
			$sb->add(" ON " . _hx_string_or_null($joinCond));
		}
		$where = $q->get("where");
		if($where !== null) {
			$this->buildCond($where, $sb, $phValues, null);
		}
		$v4 = $q->get("filter");
		$tmp3 = null;
		$tmp4 = null;
		if($v4 !== null) {
			$tmp4 = !_hx_equal($v4, 0);
		} else {
			$tmp4 = false;
		}
		if($tmp4) {
			$tmp3 = !_hx_equal($v4, "");
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$this->buildCond(_hx_explode(",", $q->get("filter"))->map(array(new _hx_lambda(array(), "model_Clients_2"), 'execute'))->join(","), $sb, $phValues, false);
			if($joinTable === "vicidial_users") {
				$sb->add(" " . _hx_string_or_null(_hx_explode(",", $filterTables)->map(array(new _hx_lambda(array(), "model_Clients_3"), 'execute'))->join(" ")));
			} else {
				$sb->add(" " . _hx_string_or_null(_hx_explode(",", $filterTables)->map(array(new _hx_lambda(array(), "model_Clients_4"), 'execute'))->join(" ")));
			}
		}
		$groupParam = $q->get("group");
		if($groupParam !== null) {
			$this->buildGroup($groupParam, $sb);
		}
		$order = $q->get("order");
		if($order !== null) {
			$this->buildOrder($order, $sb);
		}
		$limit = $q->get("limit");
		$tmp5 = null;
		if($limit === null) {
			$tmp5 = "15";
		} else {
			$tmp5 = $limit;
		}
		$this->buildLimit($tmp5, $sb);
		return $this->execute($sb->b, $phValues);
	}
	public function find($param) {
		$sb = new StringBuf();
		$phValues = new _hx_array(array());
		haxe_Log::trace($param, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 112, "className" => "model.Clients", "methodName" => "find")));
		$count = $this->countJoin($param, $sb, $phValues);
		$sb = new StringBuf();
		$phValues = new _hx_array(array());
		$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		$tmp1 = _hx_string_or_null($param->get("joincond")) . " count:" . _hx_string_rec($count, "") . ":";
		$tmp2 = _hx_string_or_null($tmp1) . _hx_string_or_null($param->get("page")) . ": ";
		$tmp3 = null;
		if($param->exists("page")) {
			$tmp3 = "Y";
		} else {
			$tmp3 = "N";
		}
		call_user_func_array($tmp, array(_hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 117, "className" => "model.Clients", "methodName" => "find"))));
		$tmp4 = null;
		if($param->exists("page")) {
			$tmp4 = Std::parseInt($param->get("page"));
		} else {
			$tmp4 = 1;
		}
		$this->data = _hx_anonymous(array("count" => $count, "page" => $tmp4, "rows" => $this->doJoin($param, $sb, $phValues)));
		return $this->json_encode();
	}
	public function edit($param) {
		$fieldNames = new haxe_ds_StringMap();
		$_g = new haxe_ds_StringMap();
		$_g->set("buchungsanforderungID", "HIDDEN");
		$_g->set("Mandat-ID", "TEXT");
		$_g->set("Betrag", "TEXT");
		$_g->set("Termin", "TEXT");
		$typeMap = $_g;
		$optionsMap = new haxe_ds_StringMap();
		$eF = $this->getEditorFields(null);
		$keys = $eF->keys();
		$tableNames = new _hx_array(array());
		$tableFields = new haxe_ds_StringMap();
		haxe_Log::trace($param, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 141, "className" => "model.Clients", "methodName" => "edit")));
		while($keys->hasNext()) {
			$k = $keys->next();
			$tableNames->push($k);
			$aFields = $eF->get($k);
			$cFields = $aFields->map(array(new _hx_lambda(array(), "model_Clients_5"), 'execute'));
			$tableFields->set($k, $cFields);
			{
				$_g2 = 0;
				$_g1 = $cFields->length;
				while($_g2 < $_g1) {
					$_g2 = $_g2 + 1;
					$f = $_g2 - 1;
					$cFields1 = $cFields[$f];
					$fieldNames->set($cFields1, _hx_array_get($aFields, $f)->get("field_name"));
					if(_hx_array_get($aFields, $f)->get("field_options") !== null) {
						$cFields2 = $cFields[$f];
						$optionsMap->set($cFields2, _hx_array_get($aFields, $f)->get("field_options"));
						unset($cFields2);
					}
					$cFields3 = $cFields[$f];
					$typeMap->set($cFields3, _hx_array_get($aFields, $f)->get("field_type"));
					unset($f,$cFields3,$cFields1);
				}
				unset($_g2,$_g1);
			}
			unset($k,$cFields,$aFields);
		}
		haxe_Log::trace($tableNames, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 160, "className" => "model.Clients", "methodName" => "edit")));
		$editTables = new haxe_ds_StringMap();
		$ti = 0;
		$tableNames->remove("vicidial_list");
		$tableNames->push("buchungs_anforderungen");
		{
			$_g11 = 0;
			while($_g11 < $tableNames->length) {
				$table = $tableNames[$_g11];
				$_g11 = $_g11 + 1;
				$p = new haxe_ds_StringMap();
				$sb = new StringBuf();
				$phValues = new _hx_array(array());
				$p->set("primary_id", $param->get("primary_id"));
				switch($table) {
				case "buchungs_anforderungen":{
					$p->set("table", "fly_crm." . _hx_string_or_null($table));
					$p->set("fields", model_Clients::$pay_history_fields->map(array(new _hx_lambda(array(), "model_Clients_6"), 'execute'))->join(","));
					$p->set("where", "`Mandat-ID`|" . Std::string($param->get("client_id")) . "K1");
					$p->set("limit", "2400");
					$editTables->set("pay_history", php_Lib::hashOfAssociativeArray($this->doSelect($p, $sb, $phValues)));
				}break;
				case "clients":{
					$p->set("table", "vicidial_list");
					$p->set("jointable", "fly_crm." . _hx_string_or_null($table));
					$p->set("joincond", $param->get("joincond"));
					$tmp = Std::string(_hx_string_call($param->get("fields"), "split", array(","))->map(array(new _hx_lambda(array(), "model_Clients_7"), 'execute'))->join(",")) . ",";
					$p->set("fields", _hx_string_or_null($tmp) . _hx_string_or_null($tableFields->get($table)->map(array(new _hx_lambda(array(&$table), "model_Clients_8"), 'execute'))->join(",")));
					$p->set("where", "vicidial_list.lead_id|" . Std::string($param->get("lead_id")));
					$tmp1 = $this->doJoin($p, $sb, $phValues);
					$editTables->set($table, php_Lib::hashOfAssociativeArray($tmp1));
				}break;
				default:{
					$tmp2 = null;
					if($table === "vicidial_list") {
						$tmp2 = $table;
					} else {
						$tmp2 = "fly_crm." . _hx_string_or_null($table);
					}
					$p->set("table", $tmp2);
					$p->set("fields", $tableFields->get($table)->join(","));
					if($table === "vicidial_list") {
						$p->set("where", "vendor_lead_code|" . Std::string($param->get("client_id")));
					} else {
						$p->set("where", "client_id|" . Std::string($param->get("client_id")));
					}
					$tmp3 = $this->doSelect($p, $sb, $phValues);
					$editTables->set($table, php_Lib::hashOfAssociativeArray($tmp3));
					if($table === "pay_source") {
						$tmp4 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
						$tmp5 = $tableFields->get($table);
						call_user_func_array($tmp4, array($tmp5, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 203, "className" => "model.Clients", "methodName" => "edit"))));
					}
				}break;
				}
				unset($table,$sb,$phValues,$p);
			}
		}
		$recordings = $this->getRecordings(Std::parseInt($param->get("lead_id")));
		$tmp6 = new model_ClientHistory(null);
		$_g12 = new haxe_ds_StringMap();
		$_g12->set("where", "reason|AC01 AC04 MD06 MS03,m_ID|" . Std::string($param->get("client_id")));
		$_g12->set("limit", 150);
		$editTables->set("konto_auszug", php_Lib::hashOfAssociativeArray(_hx_cast($tmp6->findClient($_g12, true), _hx_qtype("php.NativeArray"))));
<<<<<<< HEAD
		$tmp7 = php_Lib::associativeArrayOfHash($fieldNames);
		$tmp8 = php_Lib::associativeArrayOfHash($editTables);
		$tmp9 = php_Lib::associativeArrayOfHash($typeMap);
		$this->data = _hx_anonymous(array("fieldNames" => $tmp7, "editData" => $tmp8, "typeMap" => $tmp9, "optionsMap" => php_Lib::associativeArrayOfHash($optionsMap), "recordings" => $recordings));
=======
		$this->data = _hx_anonymous(array("fieldNames" => php_Lib::associativeArrayOfHash($fieldNames), "editData" => php_Lib::associativeArrayOfHash($editTables), "typeMap" => php_Lib::associativeArrayOfHash($typeMap), "optionsMap" => php_Lib::associativeArrayOfHash($optionsMap), "recordings" => $recordings));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		$userMap = new haxe_ds_StringMap();
		$sb1 = new StringBuf();
		$phValues1 = new _hx_array(array());
		$p1 = new haxe_ds_StringMap();
		$p1->set("table", "asterisk.vicidial_users");
		$p1->set("fields", "user,full_name");
		$p1->set("where", "user_group|AGENTS_A");
		$this1 = php_Lib::hashOfAssociativeArray($editTables->get("clients")->get("0"));
		$owner = Std::parseInt($this1->get("owner"));
		haxe_Log::trace($owner, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 224, "className" => "model.Clients", "methodName" => "edit")));
		$this->data->userMap = _hx_deref(new model_Users(null))->get_info(null);
		return $this->json_encode();
	}
	public function getCustomFields($list_id) {
		$sb = new StringBuf();
		$phValues = new _hx_array(array());
		$param = new haxe_ds_StringMap();
		$param->set("table", "vicidial_lists_fields");
		$param->set("where", "list_id|" . _hx_string_or_null(S::$my->real_escape_string($list_id)));
		$param->set("fields", "field_name,field_label,field_type,field_options,field_required,field_default");
		$param->set("order", "field_rank,field_order");
		$param->set("limit", "100");
		$a = $this->doSelect($param, $sb, $phValues);
		$cFields = new _hx_array($a);
		haxe_Log::trace($cFields->length, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 243, "className" => "model.Clients", "methodName" => "getCustomFields")));
		$ret = new _hx_array(array());
		{
			$_g = 0;
			while($_g < $cFields->length) {
				$cf = $cFields[$_g];
				$_g = $_g + 1;
<<<<<<< HEAD
				$field = php_Lib::hashOfAssociativeArray($cf);
				$ret->push($field);
				unset($field,$cf);
=======
				$ret->push(php_Lib::hashOfAssociativeArray($cf));
				unset($cf);
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $ret;
	}
	public function getRecordings($lead_id) {
		$a = $this->query("SELECT location ,  start_time, length_in_sec FROM recording_log WHERE lead_id = " . Std::string($lead_id) . " ORDER BY start_time DESC");
		$records = new _hx_array($a);
		$rc = $this->num_rows;
		haxe_Log::trace("" . _hx_string_rec($rc, "") . " == " . _hx_string_rec($records->length, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 261, "className" => "model.Clients", "methodName" => "getRecordings")));
		return php_Lib::toPhpArray($records->filter(array(new _hx_lambda(array(), "model_Clients_9"), 'execute')));
	}
	public function saveLog($q, $ref_id = null) {
		if($ref_id === null) {
			$ref_id = 0;
		}
		$lead_id = Std::parseInt($q->get("lead_id"));
		if(S::$my->query("INSERT INTO vicidial_lead_log SELECT * FROM (SELECT NULL AS log_id," . _hx_string_rec($lead_id, "") . " AS lead_id,NOW() AS entry_date) AS ll JOIN (SELECT modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id," . _hx_string_or_null(S::$user) . " AS log_user," . _hx_string_rec($ref_id, "") . " as ref_id FROM `vicidial_list` WHERE `lead_id`=" . _hx_string_rec($lead_id, "") . ")AS vl", null)) {
			$cTable = "custom_" . Std::string($q->get("entry_list_id"));
			$log_id = S::$my->insert_id;
			if($this->checkOrCreateCustomTable($cTable, null)) {
				$cLogTable = _hx_string_or_null($cTable) . "_log";
				S::$my->query("INSERT INTO " . _hx_string_or_null($cLogTable) . " SELECT * FROM (SELECT " . _hx_string_rec($log_id, "") . " AS log_id) AS ll JOIN (SELECT * FROM `" . _hx_string_or_null($cTable) . "` WHERE `lead_id`=" . _hx_string_rec($lead_id, "") . ")AS cl", null);
				haxe_Log::trace("INSERT INTO " . _hx_string_or_null($cLogTable) . " ..." . _hx_string_or_null(S::$my->error) . "<", _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 286, "className" => "model.Clients", "methodName" => "saveLog")));
				if(S::$my->error === "") {
					return $log_id;
				}
			}
		}
		return false;
	}
	public function savePayBack($q) {
		haxe_Log::trace($q, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 296, "className" => "model.Clients", "methodName" => "savePayBack")));
		$client_id = S::$my;
<<<<<<< HEAD
		$client_id1 = $client_id->real_escape_string($q->get("client_id"));
		$buchungs_datum = S::$my;
		$buchungs_datum1 = $buchungs_datum->real_escape_string($q->get("buchungs_datum"));
		$verwendungszweck = S::$my;
		$verwendungszweck1 = $verwendungszweck->real_escape_string($q->get("verwendungszweck"));
		$crm_db = null;
		if($q->exists("crm_db")) {
			$crm_db1 = S::$my;
			$crm_db = $crm_db1->real_escape_string($q->get("crm_db"));
		} else {
			$crm_db = "fly_crm";
		}
		$sql = "\x0A" . _hx_string_or_null(("INSERT IGNORE " . _hx_string_or_null($crm_db) . ".buchungs_anforderungen\x0A")) . "SELECT pt.name, pt.iban, pt.bic, ps.debtor, '', '', '',  ps.iban, '', pp.amount, '', 'SEPA',\x0A" . _hx_string_or_null(("\x09'" . _hx_string_or_null($buchungs_datum1) . "',\x0A")) . _hx_string_or_null(("CONCAT('MITGLIEDS-NR. ',ps.client_id),'" . _hx_string_or_null($verwendungszweck1) . "',\x0A")) . "'','','','','','','',NULL,'neu',\x0A" . "CURDATE(),'0000-00-00', \x0A" . "'once','', \x0A" . "CONCAT(pp.client_id,pp.product,'1'), ps.sign_date,'DE28ZZZ00001362509','', '' \x0A" . _hx_string_or_null(("FROM " . _hx_string_or_null($crm_db) . ".pay_source AS ps, " . _hx_string_or_null($crm_db) . ".pay_target AS pt, " . _hx_string_or_null($crm_db) . ".pay_plan AS pp \x0A")) . _hx_string_or_null(("INNER JOIN " . _hx_string_or_null($crm_db) . ".clients cl ON cl.client_id=pp.client_id  \x0A")) . "WHERE pp.client_id=ps.client_id\x0A" . "AND pp.pay_source_id=ps.pay_source_id\x0A" . _hx_string_or_null(("AND pt.id=1 AND cl.client_id = " . _hx_string_or_null($client_id1) . " \x0A")) . "";
		$this->query($sql);
=======
		$client_id->real_escape_string($q->get("client_id"));
		$buchungs_datum = S::$my;
		$buchungs_datum->real_escape_string($q->get("buchungs_datum"));
		$reason = S::$my;
		$reason->real_escape_string($q->get("reason"));
		$this->query("\x0A" . "INSERT IGNORE buchungs_anforderungen\x0A" . "SELECT pt.name, pt.iban, pt.bic, ps.debtor, '', '', '',  ps.iban, '', pp.amount, '', 'SEPA',\x0A" . "\x09'\$buchungs_datum',\x0A" . "CONCAT('MITGLIEDS-NR. ',ps.client_id),'\$reason',\x0A" . "'','','','','','','',NULL,'neu',\x0A" . "CURDATE(),'0000-00-00', \x0A" . "'once','', \x0A" . "CONCAT(pp.client_id,pp.product,'1'), ps.sign_date,'DE28ZZZ00001362509','', '' \x0A" . "FROM pay_source AS ps, pay_target AS pt, pay_plan AS pp \x0A" . "INNER JOIN clients cl ON cl.client_id=pp.client_id  \x0A" . "WHERE `pay_source_state`!='passive'\x0A" . "AND pp.pay_plan_state='active'\x0A" . "AND pp.cycle='monthly'\x0A" . "AND pp.start_day='\$sday'\x0A" . "AND pp.start_date<'\$sdate'\x0A" . "AND pp.client_id=ps.client_id\x0A" . "AND pp.pay_source_id=ps.pay_source_id\x0A" . "AND pt.id=1 \x0A" . "");
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		if(S::$my->error === "") {
			return $this->json_response("OK");
		}
		return false;
	}
	public function save($q) {
		$lead_id = Std::parseInt($q->get("lead_id"));
		$ref_id = false;
		$ref_id = $this->saveLog($q, null);
		if($ref_id) {
			$cTable = "custom_" . Std::string($q->get("entry_list_id"));
			$primary_id = S::$my;
			$primary_id1 = $primary_id->real_escape_string($q->get("primary_id"));
			$sql = new StringBuf();
			$sql->add("UPDATE " . _hx_string_or_null($cTable) . " SET ");
			$cFields = S::tableFields("" . _hx_string_or_null($cTable), null);
			$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp1 = "" . _hx_string_or_null($cTable) . " fields:" . _hx_string_or_null($cFields->toString());
<<<<<<< HEAD
			call_user_func_array($tmp, array($tmp1, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 341, "className" => "model.Clients", "methodName" => "save"))));
=======
			call_user_func_array($tmp, array($tmp1, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 345, "className" => "model.Clients", "methodName" => "save"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			$cFields->remove("lead_id");
			$cFields->remove($primary_id1);
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = php_Lib::hashOfAssociativeArray(php_Lib::associativeArrayOfObject(S::$conf->get("dbFieldTypes")));
			$sets = new _hx_array(array());
			{
				$_g = 0;
				while($_g < $cFields->length) {
					$c = $cFields[$_g];
					$_g = $_g + 1;
					$val = $q->get($c);
					$tmp2 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
					$tmp3 = _hx_string_or_null($c) . ":" . _hx_string_or_null(model_Clients::$custom_fields_map->get($c));
					$tmp4 = _hx_string_or_null($tmp3) . _hx_string_or_null((":" . Std::string($val) . " "));
					$v = model_Clients::$custom_fields_map->get($c);
					$tmp5 = null;
					$tmp6 = null;
					if($v !== null) {
						$tmp6 = !_hx_equal($v, 0);
					} else {
						$tmp6 = false;
					}
					if($tmp6) {
						$tmp5 = !_hx_equal($v, "");
					} else {
						$tmp5 = false;
					}
					$tmp7 = _hx_string_or_null($tmp4) . Std::string($tmp5);
<<<<<<< HEAD
					call_user_func_array($tmp2, array($tmp7, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 352, "className" => "model.Clients", "methodName" => "save"))));
=======
					call_user_func_array($tmp2, array($tmp7, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 356, "className" => "model.Clients", "methodName" => "save"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					if($val !== null) {
						$i = $i + 1;
						$tmp8 = null;
						if(Std::is($val, _hx_qtype("String"))) {
							$tmp8 = $val;
						} else {
							$tmp8 = $val[0];
						}
						$values2bind[$i - 1] = $tmp8;
						$type = $dbFieldTypes->get($c);
						$bindTypes1 = null;
						$bindTypes2 = null;
						$bindTypes3 = null;
						if($type !== null) {
							$bindTypes3 = $type !== 0;
						} else {
							$bindTypes3 = false;
						}
						if($bindTypes3) {
							$bindTypes2 = $type !== "";
						} else {
							$bindTypes2 = false;
						}
						if($bindTypes2) {
							$bindTypes1 = $type;
<<<<<<< HEAD
						} else {
							$bindTypes1 = "s";
						}
						$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes1);
						$tmp9 = null;
						$v1 = model_Clients::$custom_fields_map->get($c);
						$tmp10 = null;
						$tmp11 = null;
						if($v1 !== null) {
							$tmp11 = !_hx_equal($v1, 0);
						} else {
							$tmp11 = false;
						}
						if($tmp11) {
							$tmp10 = !_hx_equal($v1, "");
						} else {
							$tmp10 = false;
						}
						if($tmp10) {
							$tmp9 = model_Clients::$custom_fields_map->get($c);
						} else {
							$tmp9 = $c;
						}
=======
						} else {
							$bindTypes1 = "s";
						}
						$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes1);
						$tmp9 = null;
						$v1 = model_Clients::$custom_fields_map->get($c);
						$tmp10 = null;
						$tmp11 = null;
						if($v1 !== null) {
							$tmp11 = !_hx_equal($v1, 0);
						} else {
							$tmp11 = false;
						}
						if($tmp11) {
							$tmp10 = !_hx_equal($v1, "");
						} else {
							$tmp10 = false;
						}
						if($tmp10) {
							$tmp9 = model_Clients::$custom_fields_map->get($c);
						} else {
							$tmp9 = $c;
						}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
						$sets->push(_hx_string_or_null($tmp9) . "=?");
						unset($v1,$type,$tmp9,$tmp8,$tmp11,$tmp10,$bindTypes3,$bindTypes2,$bindTypes1);
					}
					unset($val,$v,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$c);
				}
			}
			$customFields2Save = false;
			$success = false;
			$stmt = S::$my->stmt_init();
			if($sets->length > 0) {
				$customFields2Save = true;
				$sql->add($sets->join(","));
				$sql->add(" WHERE lead_id=" . _hx_string_rec($lead_id, ""));
				haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 375, "className" => "model.Clients", "methodName" => "save")));
				$success = $stmt->prepare($sql->b);
			} else {
				$success = true;
			}
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 381, "className" => "model.Clients", "methodName" => "save")));
				return false;
			}
			if($customFields2Save) {
				$success = myBindParam($stmt, $values2bind, $bindTypes);
			} else {
				$success = true;
			}
			if($success) {
				if($customFields2Save) {
					$success = $stmt->execute();
					if(!$success) {
						haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 398, "className" => "model.Clients", "methodName" => "save")));
						return false;
					}
				}
				$sql = new StringBuf();
				$uFields = model_Clients::$vicdial_list_fields;
				$uFields->remove($primary_id1);
				$bindTypes = "";
				$values2bind = null;
				$i = 0;
				$sql->add("UPDATE vicidial_list SET ");
				$sets = new _hx_array(array());
				{
					$_g1 = 0;
					while($_g1 < $uFields->length) {
						$c1 = $uFields[$_g1];
						$_g1 = $_g1 + 1;
						$val1 = $q->get($c1);
						if($val1 !== null) {
							$i = $i + 1;
							$tmp12 = null;
							if(Std::is($val1, _hx_qtype("String"))) {
								$tmp12 = $val1;
							} else {
								$tmp12 = $val1[0];
							}
							$values2bind[$i - 1] = $tmp12;
							$type1 = $dbFieldTypes->get($c1);
							$bindTypes4 = null;
							$bindTypes5 = null;
							$bindTypes6 = null;
							if($type1 !== null) {
								$bindTypes6 = $type1 !== 0;
							} else {
								$bindTypes6 = false;
							}
							if($bindTypes6) {
								$bindTypes5 = $type1 !== "";
							} else {
								$bindTypes5 = false;
							}
							if($bindTypes5) {
								$bindTypes4 = $type1;
							} else {
								$bindTypes4 = "s";
							}
							$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes4);
							$sets->push(_hx_string_or_null($c1) . "=?");
							unset($type1,$tmp12,$bindTypes6,$bindTypes5,$bindTypes4);
						}
						unset($val1,$c1);
					}
				}
				$i = $i + 1;
				$values2bind[$i - 1] = "XX";
				$bindTypes = _hx_string_or_null($bindTypes) . "s";
				$sets->push("state=?");
				$tmp13 = null;
				if(!_hx_equal($q->get("status"), "QCOK")) {
					$tmp13 = _hx_equal($q->get("status"), "QCBAD");
				} else {
					$tmp13 = true;
				}
				if($tmp13) {
					$list_id = 10000;
					if(_hx_equal($q->get("status"), "QCOK")) {
						$mID = Std::parseInt($q->get("vendor_lead_code"));
						if($mID === null) {
							$mID = S::newMemberID();
							$i = $i + 1;
							$values2bind[$i - 1] = $mID;
							$bindTypes = _hx_string_or_null($bindTypes) . "s";
							$sets->push("vendor_lead_code=?");
						}
					} else {
						$list_id = 1800;
					}
					$entry_list_id = $q->get("entry_list_id");
					$i = $i + 1;
					$values2bind[$i - 1] = $q->get("status");
					$bindTypes = _hx_string_or_null($bindTypes) . "s";
					$sets->push("`status`=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $list_id;
					$bindTypes = _hx_string_or_null($bindTypes) . "s";
					$sets->push("list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $entry_list_id;
					$bindTypes = _hx_string_or_null($bindTypes) . "s";
					$sets->push("entry_list_id=?");
					$i = $i + 1;
					$values2bind[$i - 1] = $q->get("owner");
					$bindTypes = _hx_string_or_null($bindTypes) . "s";
					$sets->push("owner=?");
				}
				$sql->add($sets->join(","));
				$sql->add(" WHERE lead_id=" . _hx_string_rec($lead_id, ""));
				$stmt1 = S::$my->stmt_init();
				haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 460, "className" => "model.Clients", "methodName" => "save")));
				$success1 = $stmt1->prepare($sql->b);
				if(!$success1) {
					haxe_Log::trace($stmt1->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 464, "className" => "model.Clients", "methodName" => "save")));
					return false;
				}
				$success1 = myBindParam($stmt1, $values2bind, $bindTypes);
				$tmp14 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
				$tmp15 = "success:" . Std::string($success1);
<<<<<<< HEAD
				call_user_func_array($tmp14, array($tmp15, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 466, "className" => "model.Clients", "methodName" => "save"))));
=======
				call_user_func_array($tmp14, array($tmp15, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 470, "className" => "model.Clients", "methodName" => "save"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
				if($success1) {
					$success1 = $stmt1->execute();
					if(!$success1) {
						haxe_Log::trace($stmt1->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 476, "className" => "model.Clients", "methodName" => "save")));
						return false;
					}
					if(!$this->saveClientData($q)) {
						haxe_Log::trace("oops:" . _hx_string_or_null(S::$my->error), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 481, "className" => "model.Clients", "methodName" => "save")));
					} else {
						return !_hx_equal($this->saveLog($q, $ref_id), false);
					}
				} else {
					haxe_Log::trace("oops:" . _hx_string_or_null(S::$my->error), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 489, "className" => "model.Clients", "methodName" => "save")));
				}
			}
		}
		return false;
	}
	public function saveClientDataLog($q, $ref_id = null) {
		if($ref_id === null) {
			$ref_id = 0;
		}
		$clientID = $q->get("client_id");
		$user = S::$user;
		$res = S::$my;
		$res1 = $res->query("INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active," . _hx_string_or_null($user) . " AS log_user,NULL AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . Std::string($clientID), null);
		$tmp = null;
		$tmp1 = null;
		if($res1 !== null) {
			$tmp1 = !_hx_equal($res1, 0);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = !_hx_equal($res1, "");
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$tmp2 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp3 = "failed to: INSERT INTO fly_crm.client_log SELECT client_id,lead_id,creation_date,state,pay_obligation,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active," . _hx_string_or_null($user) . " AS log_user,NULL AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.clients WHERE client_id=" . Std::string($clientID);
<<<<<<< HEAD
			call_user_func_array($tmp2, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 499, "className" => "model.Clients", "methodName" => "saveClientDataLog"))));
=======
			call_user_func_array($tmp2, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 503, "className" => "model.Clients", "methodName" => "saveClientDataLog"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			return false;
		}
		return S::$my->insert_id;
	}
	public function saveClientData($q) {
		$clientID = $q->get("client_id");
		$log_id = $this->saveClientDataLog($q, null);
		$tmp = null;
		if($clientID !== null) {
			$tmp = !$log_id;
		} else {
			$tmp = true;
		}
		if($tmp) {
			return false;
		}
		$sql = new StringBuf();
		$uFields = model_Clients::$clients_fields;
		$uFields->remove("client_id");
		$bindTypes = "";
		$values2bind = null;
		$i = 0;
		$dbFieldTypes = php_Lib::hashOfAssociativeArray(php_Lib::associativeArrayOfObject(S::$conf->get("dbFieldTypes")));
		$sets = new _hx_array(array());
		$sql->add("UPDATE fly_crm.clients SET ");
		{
			$_g = 0;
			while($_g < $uFields->length) {
				$c = $uFields[$_g];
				$_g = $_g + 1;
				$val = $q->get($c);
				if($val !== null) {
					$i = $i + 1;
					$tmp1 = null;
					if(Std::is($val, _hx_qtype("String"))) {
						$tmp1 = $val;
					} else {
						$tmp1 = $val[0];
					}
					$values2bind[$i - 1] = $tmp1;
					$type = $dbFieldTypes->get($c);
					$bindTypes1 = null;
					$bindTypes2 = null;
					$bindTypes3 = null;
					if($type !== null) {
						$bindTypes3 = $type !== 0;
<<<<<<< HEAD
					} else {
						$bindTypes3 = false;
					}
					if($bindTypes3) {
						$bindTypes2 = $type !== "";
					} else {
						$bindTypes2 = false;
					}
=======
					} else {
						$bindTypes3 = false;
					}
					if($bindTypes3) {
						$bindTypes2 = $type !== "";
					} else {
						$bindTypes2 = false;
					}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					if($bindTypes2) {
						$bindTypes1 = $type;
					} else {
						$bindTypes1 = "s";
					}
					$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes1);
					$sets->push(_hx_string_or_null($c) . "=?");
					unset($type,$tmp1,$bindTypes3,$bindTypes2,$bindTypes1);
				}
				unset($val,$c);
			}
		}
		if($sets->length === 0) {
			return true;
		}
		$sql->add($sets->join(","));
		$sql->add(" WHERE client_id=" . Std::string($clientID));
		$stmt = S::$my->stmt_init();
		haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 545, "className" => "model.Clients", "methodName" => "saveClientData")));
		$success = $stmt->prepare($sql->b);
		if(!$success) {
			haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 549, "className" => "model.Clients", "methodName" => "saveClientData")));
			return false;
		}
		haxe_Log::trace($values2bind, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 553, "className" => "model.Clients", "methodName" => "saveClientData")));
		$success = myBindParam($stmt, $values2bind, $bindTypes);
		$tmp2 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		$tmp3 = "success:" . Std::string($success);
<<<<<<< HEAD
		call_user_func_array($tmp2, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 551, "className" => "model.Clients", "methodName" => "saveClientData"))));
=======
		call_user_func_array($tmp2, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 555, "className" => "model.Clients", "methodName" => "saveClientData"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		if($success) {
			$success = $stmt->execute();
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 561, "className" => "model.Clients", "methodName" => "saveClientData")));
				return false;
			}
			return !_hx_equal($this->saveClientDataLog($q, $log_id), false);
		}
		return false;
	}
	public function save_pay_plan_log($pay_plan_id, $ref_id = null) {
		if($ref_id === null) {
			$ref_id = 0;
		}
		$user = S::$user;
		$res = S::$my->query("INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,agency_project,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . _hx_string_rec($pay_plan_id, ""), null);
		$tmp = null;
		$tmp1 = null;
		if($res !== null) {
			$tmp1 = !_hx_equal($res, 0);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = !_hx_equal($res, "");
		} else {
			$tmp = false;
		}
		if(!$tmp) {
<<<<<<< HEAD
			haxe_Log::trace("Failed to:  INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . _hx_string_rec($pay_plan_id, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 571, "className" => "model.Clients", "methodName" => "save_pay_plan_log")));
=======
			haxe_Log::trace("Failed to:  INSERT INTO fly_crm.pay_plan_log SELECT pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason,repeat_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_plan WHERE pay_plan_id=" . _hx_string_rec($pay_plan_id, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 575, "className" => "model.Clients", "methodName" => "save_pay_plan_log")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			return false;
		}
		return S::$my->insert_id;
	}
	public function save_pay_plan($q) {
		$product = php_Lib::hashOfAssociativeArray($q->get("product"));
		$user = S::$user;
		$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		$tmp1 = Std::string($product) . ":";
		$tmp2 = _hx_string_or_null($tmp1) . _hx_string_rec(Lambda::count($product, null), "") . ":";
		$tmp3 = _hx_string_or_null($tmp2) . Std::string($product->keys()->hasNext());
<<<<<<< HEAD
		call_user_func_array($tmp, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 583, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
=======
		call_user_func_array($tmp, array($tmp3, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 587, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		$pIt = $product->keys();
		while($pIt->hasNext()) {
			$pay_plan_id = $pIt->next();
			$log_id = $this->save_pay_plan_log($pay_plan_id, null);
<<<<<<< HEAD
			haxe_Log::trace($log_id, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 591, "className" => "model.Clients", "methodName" => "save_pay_plan")));
=======
			haxe_Log::trace($log_id, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 595, "className" => "model.Clients", "methodName" => "save_pay_plan")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			if(!$log_id) {
				return false;
			}
			$sql = new StringBuf();
			$uFields = model_Clients::$pay_plan_fields;
			$uFields->remove("pay_plan_id");
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = php_Lib::hashOfAssociativeArray(php_Lib::associativeArrayOfObject(S::$conf->get("dbFieldTypes")));
			$sets = new _hx_array(array());
			$sql->add("UPDATE fly_crm.pay_plan SET ");
			{
				$_g = 0;
				while($_g < $uFields->length) {
					$c = $uFields[$_g];
					$_g = $_g + 1;
					$tmp4 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
					$tmp5 = _hx_string_or_null($c) . ":" . Std::string(Type::typeof($q->get($c)));
<<<<<<< HEAD
					call_user_func_array($tmp4, array($tmp5, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 606, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
=======
					call_user_func_array($tmp4, array($tmp5, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 610, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					$p = $q->get($c);
					$val = null;
					if($p !== null) {
						if(!Std::is($p, _hx_qtype("String"))) {
							$valMap = php_Lib::hashOfAssociativeArray($q->get($c));
							$val = $valMap->get(Std::string($pay_plan_id));
							unset($valMap);
						} else {
							$val = $p;
						}
						$i = $i + 1;
						$values2bind[$i - 1] = $val;
						$type = $dbFieldTypes->get($c);
						$bindTypes1 = null;
						$bindTypes2 = null;
						$bindTypes3 = null;
						if($type !== null) {
							$bindTypes3 = $type !== 0;
						} else {
							$bindTypes3 = false;
						}
						if($bindTypes3) {
							$bindTypes2 = $type !== "";
						} else {
							$bindTypes2 = false;
						}
						if($bindTypes2) {
							$bindTypes1 = $type;
						} else {
							$bindTypes1 = "s";
						}
						$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes1);
						$sets->push(_hx_string_or_null($c) . "=?");
						unset($type,$bindTypes3,$bindTypes2,$bindTypes1);
					}
					unset($val,$tmp5,$tmp4,$p,$c);
				}
				unset($_g);
			}
			if($sets->length === 0) {
				continue;
			}
			$sql->add($sets->join(","));
			$sql->add(" WHERE pay_plan_id=" . _hx_string_rec($pay_plan_id, ""));
			$stmt = S::$my->stmt_init();
<<<<<<< HEAD
			haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 634, "className" => "model.Clients", "methodName" => "save_pay_plan")));
			$success = $stmt->prepare($sql->b);
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 638, "className" => "model.Clients", "methodName" => "save_pay_plan")));
				return false;
			}
			haxe_Log::trace($values2bind, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 642, "className" => "model.Clients", "methodName" => "save_pay_plan")));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			$tmp6 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp7 = "success:" . Std::string($success);
			call_user_func_array($tmp6, array($tmp7, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 644, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
			if($success) {
				$success = $stmt->execute();
				if(!$success) {
					haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 650, "className" => "model.Clients", "methodName" => "save_pay_plan")));
=======
			haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 638, "className" => "model.Clients", "methodName" => "save_pay_plan")));
			$success = $stmt->prepare($sql->b);
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 642, "className" => "model.Clients", "methodName" => "save_pay_plan")));
				return false;
			}
			haxe_Log::trace($values2bind, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 646, "className" => "model.Clients", "methodName" => "save_pay_plan")));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			$tmp6 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp7 = "success:" . Std::string($success);
			call_user_func_array($tmp6, array($tmp7, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 648, "className" => "model.Clients", "methodName" => "save_pay_plan"))));
			if($success) {
				$success = $stmt->execute();
				if(!$success) {
					haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 654, "className" => "model.Clients", "methodName" => "save_pay_plan")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					return false;
				}
				$this->save_pay_plan_log($pay_plan_id, $log_id);
				if(!$pIt->hasNext()) {
					return true;
				}
			}
			unset($values2bind,$uFields,$tmp7,$tmp6,$success,$stmt,$sql,$sets,$pay_plan_id,$log_id,$i,$dbFieldTypes,$bindTypes);
		}
		return false;
	}
	public function save_pay_source_log($pay_source_id, $ref_id = null) {
		if($ref_id === null) {
			$ref_id = 0;
		}
		$user = S::$user;
		$res = S::$my->query("INSERT INTO fly_crm.pay_source_log SELECT  pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . _hx_string_rec($pay_source_id, ""), null);
		$tmp = null;
		$tmp1 = null;
		if($res !== null) {
			$tmp1 = !_hx_equal($res, 0);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = !_hx_equal($res, "");
		} else {
			$tmp = false;
		}
		if(!$tmp) {
<<<<<<< HEAD
			haxe_Log::trace("Failed to:  INSERT INTO fly_crm.pay_source_log SELECT pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . _hx_string_rec($pay_source_id, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 667, "className" => "model.Clients", "methodName" => "save_pay_source_log")));
=======
			haxe_Log::trace("Failed to:  INSERT INTO fly_crm.pay_source_log SELECT pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date," . _hx_string_or_null($user) . " AS log_user,NOW() AS log_date," . _hx_string_rec($ref_id, "") . " AS ref_id, NULL as log_id FROM fly_crm.pay_source WHERE pay_source_id=" . _hx_string_rec($pay_source_id, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 671, "className" => "model.Clients", "methodName" => "save_pay_source_log")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			return false;
		}
		return S::$my->insert_id;
	}
	public function save_pay_source($q) {
		$account = php_Lib::hashOfAssociativeArray($q->get("account"));
		$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		$tmp1 = Std::string($account) . ":";
		$_e = $account;
		$tmp2 = _hx_string_or_null($tmp1) . Std::string(array(new _hx_lambda(array(&$_e), "model_Clients_10"), 'execute'));
<<<<<<< HEAD
		call_user_func_array($tmp, array($tmp2, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 677, "className" => "model.Clients", "methodName" => "save_pay_source"))));
=======
		call_user_func_array($tmp, array($tmp2, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 681, "className" => "model.Clients", "methodName" => "save_pay_source"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		$pIt = $account->keys();
		$user = S::$user;
		while($pIt->hasNext()) {
			$pay_source_id = $pIt->next();
			$log_id = $this->save_pay_source_log($pay_source_id, null);
			if(!$log_id) {
				return false;
			}
			$sql = new StringBuf();
			$uFields = model_Clients::$pay_source_fields;
			$uFields->remove("pay_source_id");
			$bindTypes = "";
			$values2bind = null;
			$i = 0;
			$dbFieldTypes = php_Lib::hashOfAssociativeArray(php_Lib::associativeArrayOfObject(S::$conf->get("dbFieldTypes")));
			$sets = new _hx_array(array());
			$sql->add("UPDATE fly_crm.pay_source SET ");
			{
				$_g = 0;
				while($_g < $uFields->length) {
					$c = $uFields[$_g];
					$_g = $_g + 1;
					$tmp3 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
					$tmp4 = _hx_string_or_null($c) . ":" . Std::string(Type::typeof($q->get($c)));
<<<<<<< HEAD
					call_user_func_array($tmp3, array($tmp4, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 700, "className" => "model.Clients", "methodName" => "save_pay_source"))));
=======
					call_user_func_array($tmp3, array($tmp4, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 704, "className" => "model.Clients", "methodName" => "save_pay_source"))));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					$p = $q->get($c);
					$val = null;
					if($p !== null) {
						if(!Std::is($p, _hx_qtype("String"))) {
							$valMap = php_Lib::hashOfAssociativeArray($q->get($c));
							$val = $valMap->get(Std::string($pay_source_id));
							unset($valMap);
						} else {
							$val = $p;
						}
						$i = $i + 1;
						$values2bind[$i - 1] = $val;
						$type = $dbFieldTypes->get($c);
						$bindTypes1 = null;
						$bindTypes2 = null;
						$bindTypes3 = null;
						if($type !== null) {
							$bindTypes3 = $type !== 0;
						} else {
							$bindTypes3 = false;
						}
						if($bindTypes3) {
							$bindTypes2 = $type !== "";
<<<<<<< HEAD
						} else {
							$bindTypes2 = false;
						}
						if($bindTypes2) {
							$bindTypes1 = $type;
						} else {
							$bindTypes1 = "s";
						}
=======
						} else {
							$bindTypes2 = false;
						}
						if($bindTypes2) {
							$bindTypes1 = $type;
						} else {
							$bindTypes1 = "s";
						}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
						$bindTypes = _hx_string_or_null($bindTypes) . _hx_string_or_null($bindTypes1);
						$sets->push(_hx_string_or_null($c) . "=?");
						unset($type,$bindTypes3,$bindTypes2,$bindTypes1);
					}
					unset($val,$tmp4,$tmp3,$p,$c);
				}
				unset($_g);
			}
			if($sets->length === 0) {
				continue;
			}
			$sql->add($sets->join(","));
			$sql->add(" WHERE pay_source_id=" . _hx_string_rec($pay_source_id, ""));
			$stmt = S::$my->stmt_init();
<<<<<<< HEAD
			haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 728, "className" => "model.Clients", "methodName" => "save_pay_source")));
			$success = $stmt->prepare($sql->b);
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 732, "className" => "model.Clients", "methodName" => "save_pay_source")));
				return false;
			}
			haxe_Log::trace($values2bind, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 736, "className" => "model.Clients", "methodName" => "save_pay_source")));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			$tmp5 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp6 = "success:" . Std::string($success);
			call_user_func_array($tmp5, array($tmp6, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 738, "className" => "model.Clients", "methodName" => "save_pay_source"))));
			if($success) {
				$success = $stmt->execute();
				if(!$success) {
					haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 744, "className" => "model.Clients", "methodName" => "save_pay_source")));
=======
			haxe_Log::trace($sql->b, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 732, "className" => "model.Clients", "methodName" => "save_pay_source")));
			$success = $stmt->prepare($sql->b);
			if(!$success) {
				haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 736, "className" => "model.Clients", "methodName" => "save_pay_source")));
				return false;
			}
			haxe_Log::trace($values2bind, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 740, "className" => "model.Clients", "methodName" => "save_pay_source")));
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			$tmp5 = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
			$tmp6 = "success:" . Std::string($success);
			call_user_func_array($tmp5, array($tmp6, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 742, "className" => "model.Clients", "methodName" => "save_pay_source"))));
			if($success) {
				$success = $stmt->execute();
				if(!$success) {
					haxe_Log::trace($stmt->error, _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 748, "className" => "model.Clients", "methodName" => "save_pay_source")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					return false;
				}
				$this->save_pay_source_log($pay_source_id, $log_id);
				if(!$pIt->hasNext()) {
					return true;
				}
			}
			unset($values2bind,$uFields,$tmp6,$tmp5,$success,$stmt,$sql,$sets,$pay_source_id,$log_id,$i,$dbFieldTypes,$bindTypes);
		}
		return false;
	}
	public function checkOrCreateCustomTable($srcTable, $suffix = null) {
		if($suffix === null) {
			$suffix = "log";
		}
		$newTable = S::$my->real_escape_string(_hx_string_or_null($srcTable) . "_" . _hx_string_or_null($suffix));
		$res = S::$my->query("SHOW TABLES LIKE  \"" . _hx_string_or_null($newTable) . "\"", null);
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		if($res !== null) {
			$tmp2 = $res !== 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = $res !== "";
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $res->num_rows === 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
<<<<<<< HEAD
			haxe_Log::trace("CREATE TABLE `" . _hx_string_or_null($newTable) . "` like `" . _hx_string_or_null($srcTable) . "`", _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 762, "className" => "model.Clients", "methodName" => "checkOrCreateCustomTable")));
			$res1 = S::$my->query("CREATE TABLE `" . _hx_string_or_null($newTable) . "` like `" . _hx_string_or_null($srcTable) . "`", null);
=======
			haxe_Log::trace("CREATE TABLE `" . _hx_string_or_null($newTable) . "` like `" . _hx_string_or_null($srcTable) . "`", _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 766, "className" => "model.Clients", "methodName" => "checkOrCreateCustomTable")));
			S::$my->query("CREATE TABLE `" . _hx_string_or_null($newTable) . "` like `" . _hx_string_or_null($srcTable) . "`", null);
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			if(S::$my->error === "") {
				S::$my->query("ALTER TABLE " . _hx_string_or_null($newTable) . " DROP PRIMARY KEY, ADD `log_id` INT(9) NOT NULL  FIRST,  ADD  PRIMARY KEY (`log_id`)", null);
				if(S::$my->error !== "") {
					S::hexit(S::$my->error);
				}
				return true;
			} else {
				S::hexit(S::$my->error);
			}
		} else {
<<<<<<< HEAD
			haxe_Log::trace("num_rows:" . _hx_string_rec($res->num_rows, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 773, "className" => "model.Clients", "methodName" => "checkOrCreateCustomTable")));
=======
			haxe_Log::trace("num_rows:" . _hx_string_rec($res->num_rows, ""), _hx_anonymous(array("fileName" => "Clients.hx", "lineNumber" => 777, "className" => "model.Clients", "methodName" => "checkOrCreateCustomTable")));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		}
		return true;
	}
	static $vicdial_list_fields;
	static $clients_fields;
	static $pay_history_fields;
	static $pay_source_fields;
	static $pay_plan_fields;
	static $booking_fields;
	static $custom_fields_map;
	static function create($param) {
		$self = new model_Clients($param);
		$self->table = "vicidial_list";
		return Reflect::callMethod($self, Reflect::field($self, $param->get("action")), (new _hx_array(array($param))));
	}
	function __toString() { return 'model.Clients'; }
}
model_Clients::$vicdial_list_fields = _hx_explode(",", "lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id");
model_Clients::$clients_fields = _hx_explode(",", "client_id,lead_id,creation_date,state,use_email,register_on,register_off,register_off_to,teilnahme_beginn,title,namenszusatz,co_field,storno_grund,birth_date,old_active");
model_Clients::$pay_history_fields = _hx_explode(",", "buchungsanforderungID,Mandat-ID,Betrag,Termin,tracking_status");
model_Clients::$pay_source_fields = _hx_explode(",", "pay_source_id,client_id,lead_id,debtor,bank_name,account,blz,iban,sign_date,pay_source_state,creation_date");
model_Clients::$pay_plan_fields = _hx_explode(",", "pay_plan_id,client_id,creation_date,pay_source_id,target_id,start_day,start_date,buchungs_tag,cycle,amount,product,agent,pay_plan_state,pay_method,end_date,end_reason");
model_Clients::$booking_fields = _hx_explode(",", "");
model_Clients::$custom_fields_map = model_Clients_11();
function model_Clients_0($f) {
	{
		return S::$my->real_escape_string($f);
	}
}
function model_Clients_1($f1) {
	{
		return "fly_crm." . _hx_string_or_null(S::$my->real_escape_string($f1));
	}
}
function model_Clients_2($f2) {
	{
		return "fly_crm." . _hx_string_or_null(S::$my->real_escape_string($f2));
	}
}
function model_Clients_3($f3) {
	{
		return "AND " . _hx_string_or_null($f3) . ".client_id=vicidial_list.vendor_lead_code";
	}
}
function model_Clients_4($f4) {
	{
		return "AND " . _hx_string_or_null($f4) . ".client_id=clients.client_id";
	}
}
function model_Clients_5($field) {
	{
		return $field->get("field_label");
	}
}
function model_Clients_6($el) {
	{
		return "`" . _hx_string_or_null($el) . "`";
	}
}
function model_Clients_7($f1) {
	{
		if(_hx_index_of($f1, "vicidial_list.", null) !== 0) {
			return "vicidial_list." . _hx_string_or_null($f1);
		} else {
			return $f1;
		}
	}
}
function model_Clients_8(&$table, $f2) {
	{
		return _hx_string_or_null($table) . "." . _hx_string_or_null($f2);
	}
}
function model_Clients_9($r) {
	{
<<<<<<< HEAD
		return _hx_field(php_Lib::objectOfAssociativeArray($r), "length_in_sec") > 60;
=======
		return php_Lib::objectOfAssociativeArray($r)->length_in_sec > 60;
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
	}
}
function model_Clients_10(&$_e, $pred) {
	{
		return Lambda::count($_e, $pred);
	}
}
function model_Clients_11() {
	{
		$_g = new haxe_ds_StringMap();
		$_g->set("title", "anrede");
		$_g->set("geburts_datum", "birth_date");
		return $_g;
	}
}
