<?php
/**
 * Generated by Haxe 3.4.0
 */

use \php\_Boot\HxClosure;
use \php\Boot;
use \php\_Boot\HxClass;

class Reflect {
	/**
	 * @param mixed $o
	 * @param mixed $func
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	static public function callMethod ($o, $func, $args) {
		$tmp = $func;
		$tmp1 = Boot::getClass(\Closure::class);
		if ($tmp instanceof $tmp1->phpClassName) {
			if ($o !== null) {
				$func = (Boot::typedCast(Boot::getClass(\Closure::class), $func))->bindTo($o);
			}
			return call_user_func_array($func, $args->arr);
		} else {
			return $func->callWith($o, $args->arr);
		}
	}


	/**
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function field ($o, $field) {
		if (!is_object($o)) {
			return null;
		}
		if (property_exists($o, $field)) {
			$tmp = $o;
			$tmp1 = $field;
			return $tmp->{$tmp1};
		}
		if (method_exists($o, $field)) {
			return new HxClosure($o, $field);
		}
		$tmp2 = $o;
		$tmp3 = Boot::getClass(HxClass::class);
		if ($tmp2 instanceof $tmp3->phpClassName) {
			if (property_exists($o->phpClassName, $field)) {
				$tmp4 = $o;
				$tmp5 = $field;
				return $tmp4->{$tmp5};
			}
			if (method_exists($o->phpClassName, $field)) {
				return new HxClosure($o->phpClassName, $field);
			}
		}
		return null;
	}


	/**
	 * @param mixed $o
	 * 
	 * @return \Array_hx
	 */
	static public function fields ($o) {
		if (is_object($o)) {
			return \Array_hx::wrap(array_keys(get_object_vars($o)));
		}
		return new \Array_hx();
	}


	/**
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function hasField ($o, $field) {
		if (!is_object($o)) {
			return false;
		}
		if (property_exists($o, $field)) {
			return true;
		}
		$tmp = $o;
		$tmp1 = Boot::getClass(HxClass::class);
		if ($tmp instanceof $tmp1->phpClassName) {
			if (property_exists($o->phpClassName, $field)) {
				return true;
			}
			return method_exists($o->phpClassName, $field);
		}
		return false;
	}


	/**
	 * @param mixed $f
	 * 
	 * @return bool
	 */
	static public function isFunction ($f) {
		$tmp = $f;
		$tmp1 = Boot::getClass(\Closure::class);
		if ($tmp instanceof $tmp1->phpClassName) {
			return true;
		} else {
			$tmp2 = $f;
			$tmp3 = Boot::getClass(HxClosure::class);
			return $tmp2 instanceof $tmp3->phpClassName;
		}
	}


	/**
	 * @param mixed $o
	 * @param string $field
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function setField ($o, $field, $value) {
		$tmp = $o;
		$tmp1 = $field;
		$tmp->{$tmp1} = $value;
	}
}


Boot::registerClass(Reflect::class, 'Reflect');
