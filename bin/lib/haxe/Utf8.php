<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe;

use \php\Boot;

class Utf8 {
	/**
	 * @var string
	 */
	public $__b;


	/**
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($s, $index) {
		return Utf8::uord(Utf8::sub($s, $index, 1));
	}


	/**
	 * @param string $s
	 * @param \Closure $chars
	 * 
	 * @return void
	 */
	static public function iter ($s, $chars) {
		$len = Utf8::length($s);
		$_g1 = 0;
		while ($_g1 < $len) {
			$_g1 = $_g1 + 1;
			$chars(Utf8::charCodeAt($s, $_g1 - 1));
		}

	}


	/**
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function length ($s) {
		return mb_strlen($s, "UTF-8");
	}


	/**
	 * @param string $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function sub ($s, $pos, $len) {
		return mb_substr($s, $pos, $len, "UTF-8");
	}


	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	static public function uchr ($i) {
		return mb_convert_encoding(pack("N", $i), "UTF-8", "UCS-4BE");
	}


	/**
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function uord ($s) {
		return unpack("N", mb_convert_encoding($s, "UCS-4BE", "UTF-8"))[1];
	}


	/**
	 * @param int $size
	 * 
	 * @return void
	 */
	public function __construct ($size = null) {
		$this->__b = "";
	}


	/**
	 * @param int $c
	 * 
	 * @return void
	 */
	public function addChar ($c) {
		$tmp = $this;
		$tmp->__b = ($tmp->__b??'null') . (Utf8::uchr($c)??'null');
	}


	/**
	 * @return string
	 */
	public function toString () {
		return $this->__b;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Utf8::class, 'haxe.Utf8');
