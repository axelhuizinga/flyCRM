<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe\format;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \php\_Boot\HxString;
use \haxe\Utf8;
use \php\_Boot\HxAnon;

class JsonPrinter {
	/**
	 * @var \StringBuf
	 */
	public $buf;
	/**
	 * @var string
	 */
	public $indent;
	/**
	 * @var int
	 */
	public $nind;
	/**
	 * @var bool
	 */
	public $pretty;
	/**
	 * @var \Closure
	 */
	public $replacer;


	/**
	 * @param mixed $o
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return string
	 */
	static public function print ($o, $replacer = null, $space = null) {
		$printer = new JsonPrinter($replacer, $space);
		$printer->write("", $o);
		return $printer->buf->b;
	}


	/**
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return void
	 */
	public function __construct ($replacer, $space) {
		$this->replacer = $replacer;
		$this->indent = $space;
		$this->pretty = $space !== null;
		$this->nind = 0;
		$this->buf = new \StringBuf();
	}


	/**
	 * @param mixed $v
	 * @param \Array_hx $fields
	 * 
	 * @return void
	 */
	public function fieldsString ($v, $fields) {
		$_this = $this->buf;
		$_this->b = ($_this->b??'null') . "{";

		$len = $fields->length;
		$last = $len - 1;
		$first = true;
		$_g1 = 0;
		while ($_g1 < $len) {
			unset($_this1, $f, $v1, $_this2, $_this5, $i, $v2, $_this4, $_this3, $value);
			$_g1 = $_g1 + 1;
			$i = $_g1 - 1;
			$f = ($fields->arr[$i] ?? null);
			$value = \Reflect::field($v, $f);
			if (\Reflect::isFunction($value)) {
				continue;
			}
			if ($first) {
				$this->nind++;
				$first = false;
			} else {
				$_this1 = $this->buf;
				$_this1->b = ($_this1->b??'null') . ",";
			}
			if ($this->pretty) {
				$_this2 = $this->buf;
				$_this2->b = ($_this2->b??'null') . "\x0A";
			}
			if ($this->pretty) {
				$v1 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
				$this->buf->add($v1);
			}
			$this->quote($f);
			$_this3 = $this->buf;
			$_this3->b = ($_this3->b??'null') . ":";

			if ($this->pretty) {
				$_this4 = $this->buf;
				$_this4->b = ($_this4->b??'null') . " ";
			}
			$this->write($f, $value);
			if ($i === $last) {
				$this->nind--;
				if ($this->pretty) {
					$_this5 = $this->buf;
					$_this5->b = ($_this5->b??'null') . "\x0A";
				}
				if ($this->pretty) {
					$v2 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
					$this->buf->add($v2);
				}
			}
		}

		$_this6 = $this->buf;
		$_this6->b = ($_this6->b??'null') . "}";

	}


	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function quote ($s) {
		if (strlen($s) !== Utf8::length($s)) {
			$this->quoteUtf8($s);
			return;
		}
		$_this = $this->buf;
		$_this->b = ($_this->b??'null') . "\"";

		$i = 0;
		while (true) {
			unset($_this1, $c, $index);
			$i = $i + 1;
			$index = $i - 1;
			$c = null;
			if (strlen($s) === $index) {
				$c = 0;
			} else {
				$c = ord($s[$index]);
			}
			if ($c === 0) {
				break;
			}
			switch ($c) {
				case 8:
					$this->buf->add("\\b");
					break;
				case 9:
					$this->buf->add("\\t");
					break;
				case 10:
					$this->buf->add("\\n");
					break;
				case 12:
					$this->buf->add("\\f");
					break;
				case 13:
					$this->buf->add("\\r");
					break;
				case 34:
					$this->buf->add("\\\"");
					break;
				case 92:
					$this->buf->add("\\\\");
					break;
				default:
					$_this1 = $this->buf;
					$_this1->b = ($_this1->b??'null') . (HxString::fromCharCode($c)??'null');
					break;
			}
		}
		$_this2 = $this->buf;
		$_this2->b = ($_this2->b??'null') . "\"";

	}


	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function quoteUtf8 ($s) {
		$u = new Utf8();
		Utf8::iter($s, function ($c)  use (&$u) {
			switch ($c) {
				case 8:
					$u->addChar(92);
					$u->addChar(98);
					break;
				case 9:
					$u->addChar(92);
					$u->addChar(116);
					break;
				case 10:
					$u->addChar(92);
					$u->addChar(110);
					break;
				case 12:
					$u->addChar(92);
					$u->addChar(102);
					break;
				case 13:
					$u->addChar(92);
					$u->addChar(114);
					break;
				case 34:
				case 92:
					$u->addChar(92);
					$u->addChar($c);
					break;
				default:
					$u->addChar($c);
					break;
			}
		});
		$this->buf->add("\"");
		$this->buf->add($u->toString());
		$this->buf->add("\"");
	}


	/**
	 * @param mixed $k
	 * @param mixed $v
	 * 
	 * @return void
	 */
	public function write ($k, $v) {
		if ($this->replacer !== null) {
			$v = ($this->replacer)($k, $v);
		}
		$_g = \Type::typeof($v);
		switch ($_g->index) {
			case 0:
				$this->buf->add("null");
				break;
			case 1:
				$this->buf->add($v);
				break;
			case 2:
				$v1 = null;
				if (is_finite($v)) {
					$v1 = $v;
				} else {
					$v1 = "null";
				}
				$this->buf->add($v1);
				break;
			case 3:
				$tmp = null;
				if ($v) {
					$tmp = "true";
				} else {
					$tmp = "false";
				}
				$this->buf->add($tmp);
				break;
			case 4:
				$this->fieldsString($v, \Reflect::fields($v));
				break;
			case 5:
				$this->buf->add("\"<fun>\"");
				break;
			case 6:
				$c = $_g->params[0];
				if ($c === Boot::getClass('String')) {
					$this->quote($v);
				} else if ($c === Boot::getClass(\Array_hx::class)) {
					$v2 = $v;
					$_this = $this->buf;
					$_this->b = ($_this->b??'null') . "[";

					$len = $v2->length;
					$last = $len - 1;
					$_g1 = 0;
					while ($_g1 < $len) {
						unset($_this1, $_this2, $i, $v3, $v4, $_this3);
						$_g1 = $_g1 + 1;
						$i = $_g1 - 1;
						if ($i > 0) {
							$_this1 = $this->buf;
							$_this1->b = ($_this1->b??'null') . ",";
						} else {
							$this->nind++;
						}
						if ($this->pretty) {
							$_this2 = $this->buf;
							$_this2->b = ($_this2->b??'null') . "\x0A";
						}
						if ($this->pretty) {
							$v3 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
							$this->buf->add($v3);
						}
						$this->write($i, ($v2->arr[$i] ?? null));
						if ($i === $last) {
							$this->nind--;
							if ($this->pretty) {
								$_this3 = $this->buf;
								$_this3->b = ($_this3->b??'null') . "\x0A";
							}
							if ($this->pretty) {
								$v4 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
								$this->buf->add($v4);
							}
						}
					}

					$_this4 = $this->buf;
					$_this4->b = ($_this4->b??'null') . "]";

				} else if ($c === Boot::getClass(StringMap::class)) {
					$v5 = $v;
					$o = new HxAnon();
					$k1 = new NativeArrayIterator(array_map("strval", array_keys($v5->data)));
					while ($k1->hasNext()) {
						unset($k2);
						$k2 = $k1->next();
						\Reflect::setField($o, $k2, ($v5->data[$k2] ?? null));
					}

					$this->fieldsString($o, \Reflect::fields($o));
				} else if ($c === Boot::getClass(\Date::class)) {
					$this->quote($v->toString());
				} else {
					$this->fieldsString($v, \Reflect::fields($v));
				}
				break;
			case 7:
				$this->buf->add($v->index);
				break;
			case 8:
				$this->buf->add("\"???\"");
				break;
		}

	}
}


Boot::registerClass(JsonPrinter::class, 'haxe.format.JsonPrinter');
