<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\_BytesData\Container;

class Output {
	/**
	 * @return void
	 */
	public function close () {
	}


	/**
	 * @param int $c
	 * 
	 * @return void
	 */
	public function writeByte ($c) {
		throw new HxException("Not implemented");
	}


	/**
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function writeBytes ($s, $pos, $len) {
		$tmp = null;
		$tmp1 = null;
		if ($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if (!$tmp1) {
			$tmp = ($pos + $len) > $s->length;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			throw new HxException(Error::OutsideBounds());
		}
		$b = $s->b;
		$k = $len;
		while ($k > 0) {
			$this->writeByte(ord($b->s[$pos]));
			$pos = $pos + 1;
			$k = $k - 1;
		}
		return $len;
	}


	/**
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return void
	 */
	public function writeFullBytes ($s, $pos, $len) {
		while ($len > 0) {
			unset($k);
			$k = $this->writeBytes($s, $pos, $len);
			$pos = $pos + $k;
			$len = $len - $k;
		}
	}


	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function writeString ($s) {
		$b = new Bytes(strlen($s), new Container($s));
		$this->writeFullBytes($b, 0, $b->length);
	}
}


Boot::registerClass(Output::class, 'haxe.io.Output');
