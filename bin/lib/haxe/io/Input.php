<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxException;

class Input {
	/**
	 * @return void
	 */
	public function close () {
	}


	/**
	 * @return int
	 */
	public function readByte () {
		throw new HxException("Not implemented");
	}


	/**
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		$k = $len;
		$b = $s->b;
		$tmp = null;
		$tmp1 = null;
		if ($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if (!$tmp1) {
			$tmp = ($pos + $len) > $s->length;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			throw new HxException(Error::OutsideBounds());
		}
		try {
			while ($k > 0) {
				unset($val);
				$val = $this->readByte();
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				$pos = $pos + 1;
				$k = $k - 1;
			}
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		return $len - $k;
	}
}


Boot::registerClass(Input::class, 'haxe.io.Input');
