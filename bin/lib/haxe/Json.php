<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe;

use \php\_Boot\HxException;
use \php\Boot;
use \haxe\format\JsonPrinter;
use \php\_Boot\HxAnon;

class Json {
	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function convertBeforeEncode ($value) {
		$tmp = $value;
		$tmp1 = Boot::getClass(\Array_hx::class);
		if ($tmp instanceof $tmp1->phpClassName) {
			$result = [];
			foreach (($value->arr) as $index => $item) {
				$val = Json::convertBeforeEncode($item);
				$result[$index] = $val;
			};
			return $result;
		}
		if (is_object($value)) {
			$result1 = new HxAnon();
			foreach ($value as $fieldName => $fieldValue) {
				$tmp2 = $result1;
				$tmp3 = $fieldName;
				$tmp2->{$tmp3} = Json::convertBeforeEncode($fieldValue);
			};
			return $result1;
		}
		$tmp4 = null;
		if (is_float($value)) {
			$tmp4 = !is_finite($value);
		} else {
			$tmp4 = false;
		}
		if ($tmp4) {
			return null;
		}
		return $value;
	}


	/**
	 * @param mixed $value
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return string
	 */
	static public function phpJsonEncode ($value, $replacer = null, $space = null) {
		$tmp = null;
		if (null === $replacer) {
			$tmp = null !== $space;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			return JsonPrinter::print($value, $replacer, $space);
		}
		$json = json_encode(Json::convertBeforeEncode($value));
		if (json_last_error() !== JSON_ERROR_NONE) {
			throw (is_object($__hx__throw = json_last_error_msg()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
		return $json;
	}
}


Boot::registerClass(Json::class, 'haxe.Json');
