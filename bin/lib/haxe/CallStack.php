<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxString;

class CallStack {
	/**
	 * @var mixed
	 */
	static public $lastExceptionTrace;


	/**
	 * @return \Array_hx
	 */
	static public function callStack () {
		return CallStack::makeStack(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));
	}


	/**
	 * @param mixed $native
	 * 
	 * @return \Array_hx
	 */
	static public function makeStack ($native) {
		$result = new \Array_hx();
		$count = count($native);
		$_g1 = 0;
		while ($_g1 < $count) {
			unset($item, $next, $tmp, $i, $entry);
			$_g1 = $_g1 + 1;
			$i = $_g1 - 1;
			$entry = $native[$i];
			$item = null;
			if (($i + 1) < $count) {
				$next = $native[$i + 1];
				if (!isset($next["function"])) {
					$next["function"] = "";
				}
				if (!isset($next["class"])) {
					$next["class"] = "";
				}
				if (HxString::indexOf($next["function"], "{closure}") >= 0) {
					$item = StackItem::LocalFunction();
				} else {
					$tmp = null;
					if (strlen($next["class"]) > 0) {
						$tmp = strlen($next["function"]) > 0;
					} else {
						$tmp = false;
					}
					if ($tmp) {
						$item = StackItem::Method(Boot::getClassName($next["class"]), $next["function"]);
					}
				}
			}
			if (isset($entry["file"])) {
				$result->push(StackItem::FilePos($item, $entry["file"], $entry["line"]));
			} else if ($item !== null) {
				$result->push($item);
			}
		}

		return $result;
	}


	/**
	 * @param \Throwable $e
	 * 
	 * @return void
	 */
	static public function saveExceptionTrace ($e) {
		CallStack::$lastExceptionTrace = $e->getTrace();
		$currentTrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
		$_g = -(count($currentTrace) - 1);
		while ($_g < 1) {
			unset($exceptionEntry, $tmp, $i);
			$_g = $_g + 1;
			$i = $_g - 1;
			$exceptionEntry = end(CallStack::$lastExceptionTrace);
			if (!isset($exceptionEntry["file"])) {
				array_pop(CallStack::$lastExceptionTrace);
			} else {
				$tmp = null;
				if (Boot::equal($currentTrace[-$i]["file"], $exceptionEntry["file"])) {
					$tmp = Boot::equal($currentTrace[-$i]["line"], $exceptionEntry["line"]);
				} else {
					$tmp = false;
				}
				if ($tmp) {
					array_pop(CallStack::$lastExceptionTrace);
				} else {
					break;
				}
			}
		}

		$count = count(CallStack::$lastExceptionTrace);
		$_g1 = 0;
		while ($_g1 < $count) {
			$_g1 = $_g1 + 1;
			CallStack::$lastExceptionTrace[$_g1 - 1]["args"] = [];
		}

		$thrownAt = [];
		$thrownAt["function"] = "";
		$thrownAt["line"] = $e->getLine();
		$thrownAt["file"] = $e->getFile();
		$thrownAt["class"] = "";
		$thrownAt["args"] = [];
		array_unshift(CallStack::$lastExceptionTrace, $thrownAt);
	}
}


Boot::registerClass(CallStack::class, 'haxe.CallStack');
