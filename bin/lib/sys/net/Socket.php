<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace sys\net;

use \sys\io\FileInput;
use \haxe\io\Output;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Input;
use \sys\io\FileOutput;
use \haxe\io\Error;

class Socket {
	/**
	 * @var mixed
	 */
	public $__s;
	/**
	 * @var Input
	 */
	public $input;
	/**
	 * @var Output
	 */
	public $output;
	/**
	 * @var string
	 */
	public $protocol;


	/**
	 * @param bool $r
	 * @param int $code
	 * @param string $msg
	 * 
	 * @return void
	 */
	static public function checkError ($r, $code, $msg) {
		if ($r !== false) {
			return;
		}
		throw new HxException(Error::Custom("Error [" . ($code??'null') . "]: " . ($msg??'null')));
	}


	/**
	 * @return void
	 */
	public function __construct () {
		$this->input = new FileInput(null);
		$this->output = new FileOutput(null);
		$this->protocol = "tcp";
	}


	/**
	 * @return void
	 */
	public function assignHandler () {
		$this->input->__f = $this->__s;
		$this->output->__f = $this->__s;
	}


	/**
	 * @return void
	 */
	public function close () {
		fclose($this->__s);
		$this->input->__f = null;
		$this->output->__f = null;
		$this->input->close();
		$this->output->close();
	}


	/**
	 * @param Host $host
	 * @param int $port
	 * 
	 * @return void
	 */
	public function connect ($host, $port) {
		$errs = null;
		$errn = null;
		$r = stream_socket_client(($this->protocol??'null') . "://" . ($host->host??'null') . ":" . ($port??'null'), $errn, $errs);
		Socket::checkError($r, $errn, $errs);
		$this->__s = $r;
		$this->assignHandler();
	}


	/**
	 * @param float $timeout
	 * 
	 * @return void
	 */
	public function setTimeout ($timeout) {
		$s = (int)$timeout;
		$ms = (int)(($timeout - $s) * 1000000);
		Socket::checkError(stream_set_timeout($this->__s, $s, $ms), 0, "Unable to set timeout");
	}


	/**
	 * @param bool $read
	 * @param bool $write
	 * 
	 * @return void
	 */
	public function shutdown ($read, $write) {
		$rw = null;
		$rw1 = null;
		if ($read) {
			$rw1 = $write;
		} else {
			$rw1 = false;
		}
		if ($rw1) {
			$rw = 2;
		} else if ($write) {
			$rw = 1;
		} else if ($read) {
			$rw = 0;
		} else {
			$rw = 2;
		}
		Socket::checkError(stream_socket_shutdown($this->__s, $rw), 0, "Unable to Shutdown");
	}


	/**
	 * @param string $content
	 * 
	 * @return void
	 */
	public function write ($content) {
		fwrite($this->__s, $content);
	}
}


Boot::registerClass(Socket::class, 'sys.net.Socket');
