<?php
/**
 * Generated by Haxe 3.4.0
 */

use \_Array\ArrayIterator;
use \php\_Boot\HxException;
use \php\Boot;

final class Array_hx implements \ArrayAccess {
	/**
	 * @var mixed
	 */
	public $arr;
	/**
	 * @var int
	 */
	public $length;


	/**
	 * @param mixed $arr
	 * 
	 * @return Array_hx
	 */
	static public function wrap ($arr) {
		$a = new Array_hx();
		$a->arr = $arr;
		$a->length = count($arr);
		return $a;
	}


	/**
	 * @return void
	 */
	public function __construct () {
		$this->arr = [];
		$this->length = 0;
	}


	/**
	 * @param Array_hx $a
	 * 
	 * @return Array_hx
	 */
	public function concat ($a) {
		return Array_hx::wrap(array_merge($this->arr, $a->arr));
	}


	/**
	 * @return Array_hx
	 */
	public function copy () {
		return Array_hx::wrap($this->arr);
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return Array_hx
	 */
	public function filter ($f) {
		return Array_hx::wrap(array_values(array_filter($this->arr, $f)));
	}


	/**
	 * @param mixed $x
	 * @param int $fromIndex
	 * 
	 * @return int
	 */
	public function indexOf ($x, $fromIndex = null) {
		if ($fromIndex === null) {
			$index = array_search($x, $this->arr, true);
			if ($index === false) {
				return -1;
			} else {
				return $index;
			}
		}
		if ($fromIndex < 0) {
			$fromIndex = $fromIndex + $this->length;
		}
		if ($fromIndex < 0) {
			$fromIndex = 0;
		}
		while ($fromIndex < $this->length) {
			if (Boot::equal($this->arr[$fromIndex], $x)) {
				return $fromIndex;
			}
			$fromIndex = $fromIndex + 1;
		}
		return -1;
	}


	/**
	 * @param int $pos
	 * @param mixed $x
	 * 
	 * @return void
	 */
	public function insert ($pos, $x) {
		$this->length++;
		array_splice($this->arr, $pos, 0, [$x]);
	}


	/**
	 * @return object
	 */
	public function iterator () {
		return new ArrayIterator($this);
	}


	/**
	 * @param string $sep
	 * 
	 * @return string
	 */
	public function join ($sep) {
		return implode($sep, array_map("strval", $this->arr));
	}


	/**
	 * @param mixed $x
	 * @param int $fromIndex
	 * 
	 * @return int
	 */
	public function lastIndexOf ($x, $fromIndex = null) {
		$tmp = null;
		if ($fromIndex !== null) {
			$tmp = $fromIndex >= $this->length;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			$fromIndex = $this->length - 1;
		}
		if ($fromIndex < 0) {
			$fromIndex = $fromIndex + $this->length;
		}
		while ($fromIndex >= 0) {
			if (Boot::equal($this->arr[$fromIndex], $x)) {
				return $fromIndex;
			}
			$fromIndex = $fromIndex - 1;
		}
		return -1;
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return Array_hx
	 */
	public function map ($f) {
		return Array_hx::wrap(array_map($f, $this->arr));
	}


	/**
	 * @param int $offset
	 * 
	 * @return bool
	 */
	public function offsetExists ($offset) {
		return $offset < $this->length;
	}


	/**
	 * @param int $offset
	 * 
	 * @return mixed
	 */
	public function &offsetGet ($offset) {
		try {
			return $this->arr[$offset];
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			return null;
		}
	}


	/**
	 * @param int $offset
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function offsetSet ($offset, $value) {
		if ($this->length <= $offset) {
			$this->arr = array_merge($this->arr, array_fill(0, $offset + 1 - $this->length, null));
			$this->length = $offset + 1;
		}
		$this->arr[$offset] = $value;
	}


	/**
	 * @param int $offset
	 * 
	 * @return void
	 */
	public function offsetUnset ($offset) {
		$tmp = null;
		if ($offset >= 0) {
			$tmp = $offset < $this->length;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			array_splice($this->arr, $offset, 1);
			$this->length--;
		}
	}


	/**
	 * @return mixed
	 */
	public function pop () {
		if ($this->length > 0) {
			$this->length--;
		}
		return array_pop($this->arr);
	}


	/**
	 * @param mixed $x
	 * 
	 * @return int
	 */
	public function push ($x) {
		return $this->length = array_push($this->arr, $x);
	}


	/**
	 * @param mixed $x
	 * 
	 * @return bool
	 */
	public function remove ($x) {
		$_g1 = 0;
		$_g = $this->length;
		while ($_g1 < $_g) {
			unset($i);
			$_g1 = $_g1 + 1;
			$i = $_g1 - 1;
			if (Boot::equal($this->arr[$i], $x)) {
				array_splice($this->arr, $i, 1);
				$this->length--;
				return true;
			}
		}

		return false;
	}


	/**
	 * @return void
	 */
	public function reverse () {
		$this->arr = array_reverse($this->arr);
	}


	/**
	 * @return mixed
	 */
	public function shift () {
		if ($this->length > 0) {
			$this->length--;
		}
		return array_shift($this->arr);
	}


	/**
	 * @param int $pos
	 * @param int $end
	 * 
	 * @return Array_hx
	 */
	public function slice ($pos, $end = null) {
		if ($pos < 0) {
			$pos = $pos + $this->length;
		}
		if ($pos < 0) {
			$pos = 0;
		}
		if ($end === null) {
			return Array_hx::wrap(array_slice($this->arr, $pos));
		} else {
			if ($end < 0) {
				$end = $end + $this->length;
			}
			if ($end <= $pos) {
				return new Array_hx();
			} else {
				return Array_hx::wrap(array_slice($this->arr, $pos, $end - $pos));
			}
		}
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	public function sort ($f) {
		usort($this->arr, $f);
	}


	/**
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return Array_hx
	 */
	public function splice ($pos, $len) {
		if ($len < 0) {
			return new Array_hx();
		}
		$result = Array_hx::wrap(array_splice($this->arr, $pos, $len));
		$tmp = $this;
		$tmp->length = $tmp->length - $result->length;
		return $result;
	}


	/**
	 * @return string
	 */
	public function toString () {
		$strings = [];
		foreach (($this->arr) as $index => $value) {
			$val = Boot::stringify($value);
			$strings[$index] = $val;
		};
		return "[" . (implode(",", $strings)??'null') . "]";
	}


	/**
	 * @param mixed $x
	 * 
	 * @return void
	 */
	public function unshift ($x) {
		$this->length = array_unshift($this->arr, $x);
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Array_hx::class, 'Array');
