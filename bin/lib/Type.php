<?php
/**
 * Generated by Haxe 3.4.0
 */

use \php\Boot;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class Type {
	/**
	 * @param mixed $o
	 * 
	 * @return Class
	 */
	static public function getClass ($o) {
		$tmp = null;
		$tmp1 = null;
		if (is_object($o)) {
			$tmp1 = !Boot::isClass($o);
		} else {
			$tmp1 = false;
		}
		if ($tmp1) {
			$tmp = !Boot::isEnumValue($o);
		} else {
			$tmp = false;
		}
		if ($tmp) {
			$cls = Boot::getClass(get_class($o));
			if ($cls === Boot::getClass(HxAnon::class)) {
				return null;
			} else {
				return $cls;
			}
		} else if (is_string($o)) {
			return Boot::getClass('String');
		} else {
			return null;
		}
	}


	/**
	 * @param Class $c
	 * 
	 * @return string
	 */
	static public function getClassName ($c) {
		if ($c === null) {
			return null;
		}
		return Boot::getHaxeName($c);
	}


	/**
	 * @param Class $c
	 * 
	 * @return \Array_hx
	 */
	static public function getInstanceFields ($c) {
		if ($c === null) {
			return null;
		}
		if ($c === Boot::getClass('String')) {
			return \Array_hx::wrap([
				"substr",
				"charAt",
				"charCodeAt",
				"indexOf",
				"lastIndexOf",
				"split",
				"toLowerCase",
				"toUpperCase",
				"toString",
				"length",
			]);
		}
		$phpName = Type::getPhpName($c);
		if ($phpName === null) {
			return null;
		}
		$reflection = new \ReflectionClass($phpName);
		$this1 = [];
		$_g_hasMore = null;
		$this2 = $reflection->getMethods();
		$_g_hasMore = reset($this2) !== false;
		while ($_g_hasMore) {
			unset($m, $name, $tmp, $result);
			$result = current($this2);
			$_g_hasMore = next($this2) !== false;
			$m = $result;
			if (!$m->isStatic()) {
				$name = $m->getName();
				$tmp = null;
				if ($name !== "__construct") {
					$tmp = HxString::indexOf($name, "__hx__") === 0;
				} else {
					$tmp = true;
				}
				if (!$tmp) {
					array_push($this1, $name);
				}
			}
		}

		$this3 = [];
		$properties = $this3;
		$_g_hasMore1 = null;
		$this4 = $reflection->getProperties();
		$_g_hasMore1 = reset($this4) !== false;
		while ($_g_hasMore1) {
			unset($name1, $result1, $tmp1, $p);
			$result1 = current($this4);
			$_g_hasMore1 = next($this4) !== false;
			$p = $result1;
			if (!$p->isStatic()) {
				$name1 = $p->getName();
				$tmp1 = null;
				if ($name1 !== "__construct") {
					$tmp1 = HxString::indexOf($name1, "__hx__") === 0;
				} else {
					$tmp1 = true;
				}
				if (!$tmp1) {
					array_push($this3, $name1);
				}
			}
		}

		$properties = array_diff($this3, $this1);
		return \Array_hx::wrap(array_merge($properties, $this1));
	}


	/**
	 * @param mixed $type
	 * 
	 * @return string
	 */
	static public function getPhpName ($type) {
		$haxeName = Boot::getHaxeName($type);
		if ($haxeName === null) {
			return null;
		} else {
			return Boot::getPhpName($haxeName);
		}
	}


	/**
	 * @param string $name
	 * 
	 * @return Class
	 */
	static public function resolveClass ($name) {
		if ($name === null) {
			return null;
		}
		switch ($name) {
			case "Bool":
				return Boot::getClass('Bool');
				break;
			case "Class":
				return Boot::getClass('Class');
				break;
			case "Dynamic":
				return Boot::getClass('Dynamic');
				break;
			case "Enum":
				return Boot::getClass('Enum');
				break;
			case "Float":
				return Boot::getClass('Float');
				break;
			case "Int":
				return Boot::getClass('Int');
				break;
			case "String":
				return Boot::getClass('String');
				break;
		}
		$phpClass = Boot::getPhpName($name);
		$tmp = null;
		if (!class_exists($phpClass)) {
			$tmp = !interface_exists($phpClass);
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return null;
		}
		return Boot::getClass($phpClass);
	}


	/**
	 * @param mixed $v
	 * 
	 * @return \ValueType
	 */
	static public function typeof ($v) {
		if ($v === null) {
			return \ValueType::TNull();
		}
		if (is_object($v)) {
			if (\Reflect::isFunction($v)) {
				return \ValueType::TFunction();
			}
			$tmp = $v;
			$tmp1 = Boot::getClass(\StdClass::class);
			if ($tmp instanceof $tmp1->phpClassName) {
				return \ValueType::TObject();
			}
			if (Boot::isClass($v)) {
				return \ValueType::TObject();
			}
			$hxClass = Boot::getClass(get_class($v));
			if (Boot::isEnumValue($v)) {
				return \ValueType::TEnum($hxClass);
			}
			return \ValueType::TClass($hxClass);
		}
		if (is_bool($v)) {
			return \ValueType::TBool();
		}
		if (is_int($v)) {
			return \ValueType::TInt();
		}
		if (is_float($v)) {
			return \ValueType::TFloat();
		}
		if (is_string($v)) {
			return \ValueType::TClass(Boot::getClass('String'));
		}
		return \ValueType::TUnknown();
	}
}


Boot::registerClass(Type::class, 'Type');
