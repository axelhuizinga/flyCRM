<?php
/**
 * Generated by Haxe 3.4.0
 */

use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

final class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var string
	 */
	public $re;


	/**
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		$this->pattern = $r;
		$a = HxString::split($opt, "g");
		$this->global = $a->length > 1;
		if ($this->global) {
			$opt = $a->join("");
		}
		$this->options = $opt;
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($opt??'null');
	}


	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		if ($p > 0) {
			$this->last = $s;
		} else {
			$this->last = null;
		}
		return $p > 0;
	}


	/**
	 * @param int $n
	 * 
	 * @return string
	 */
	public function matched ($n) {
		$tmp = null;
		if ($this->matches !== null) {
			$tmp = $n < 0;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			throw new HxException("EReg::matched");
		}
		if ($n >= count($this->matches)) {
			return null;
		}
		if ($this->matches[$n][1] < 0) {
			return null;
		}
		return $this->matches[$n][0];
	}


	/**
	 * @return object
	 */
	public function matchedPos () {
		$tmp = $this->matches[0][1];
		return new HxAnon([
			"pos" => $tmp,
			"len" => strlen($this->matches[0][0]),
		]);
	}


	/**
	 * @return string
	 */
	public function matchedRight () {
		if (count($this->matches) === 0) {
			throw new HxException("No string matched");
		}
		$x = $this->matches[0][1] + strlen($this->matches[0][0]);
		return HxString::substr($this->last, $x);
	}
}


Boot::registerClass(EReg::class, 'EReg');
