<?php
/**
 * Generated by Haxe 3.4.0
 */

use \me\cunity\php\db\MySQLi_Result;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \php\Lib;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class Model {
	/**
	 * @var StringMap
	 */
	static public $KEYWORDS;


	/**
	 * @var object
	 */
	public $data;
	/**
	 * @var string
	 */
	public $db;
	/**
	 * @var mixed
	 */
	public $globals;
	/**
	 * @var string
	 */
	public $joinTable;
	/**
	 * @var int
	 */
	public $num_rows;
	/**
	 * @var StringMap
	 */
	public $param;
	/**
	 * @var string
	 */
	public $primary;
	/**
	 * @var string
	 */
	public $table;


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	static public function dispatch ($param) {
		$cl = \Type::resolveClass("model." . (\Std::string(($param->data["className"] ?? null))??'null'));
		if ($cl === null) {
			(Log::$trace)("model." . (\Std::string(($param->data["className"] ?? null))??'null') . " ???", new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 66,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			return false;
		}
		$fl = \Reflect::field($cl, "create");
		if ($fl === null) {
			(Log::$trace)((\Std::string($cl)??'null') . "create is null", new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 73,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			return false;
		}
		if (\Lambda::has(\Type::getInstanceFields($cl), ($param->data["action"] ?? null))) {
			(Log::$trace)("calling create " . (\Std::string($cl)??'null'), new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 80,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			return \Reflect::callMethod($cl, $fl, \Array_hx::wrap([$param]));
		} else {
			(Log::$trace)("not calling create ", new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 85,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			return false;
		}
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		$this->param = $param;
		$tmp = null;
		if ($param !== null) {
			$tmp = ($param->data["firstLoad"] ?? null) === "true";
		} else {
			$tmp = false;
		}
		if ($tmp) {
			(Log::$trace)("firstLoad", new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 483,
				"className" => "Model",
				"methodName" => "new",
			]));
			$this->globals = new HxAnon();
			$this->globals->users = $this->query("SELECT full_name, user, active, user_group FROM vicidial_users");
		}
	}


	/**
	 * @param string $whereParam
	 * @param \StringBuf $sob
	 * @param \Array_hx $phValues
	 * @param bool $first
	 * 
	 * @return bool
	 */
	public function buildCond ($whereParam, $sob, $phValues, $first = true) {
		if ($first === null) {
			$first = true;
		}
		$sb = new \StringBuf();
		$where = HxString::split($whereParam, ",");
		if ($where->length === 0) {
			return false;
		}
		$_g = 0;
		while ($_g < $where->length) {
			unset($wData, $filter_tables, $tmp3, $eR, $tmp, $w, $tmp1, $values, $tmp2, $val);
			$w = ($where->arr[$_g] ?? null);
			$_g = $_g + 1;
			$wData = HxDynamicStr::wrap($w)->split("|");
			$values = $wData->slice(2);
			$filter_tables = null;
			$tmp = null;
			$tmp1 = null;
			if (\Util::any2bool($this->param)) {
				$tmp1 = array_key_exists("filter_tables", $this->param->data);
			} else {
				$tmp1 = false;
			}
			if ($tmp1) {
				$tmp = \Util::any2bool(($this->param->data["filter_tables"] ?? null));
			} else {
				$tmp = false;
			}
			if ($tmp) {
				$filter_tables = HxString::split(($this->param->data["filter_tables"] ?? null), ",");
			}
			(Log::$trace)((\Std::string($wData)??'null') . ":" . ($this->joinTable??'null') . ":" . (\Std::string($filter_tables)??'null'), new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 386,
				"className" => "Model",
				"methodName" => "buildCond",
			]));
			$tmp2 = null;
			if ((new \EReg("^pay_[a-zA-Z_]+\\.", ""))->match(($wData->arr[0] ?? null))) {
				$tmp2 = (HxString::split(($wData->arr[0] ?? null), ".")->arr[0] ?? null) !== $this->joinTable;
			} else {
				$tmp2 = false;
			}
			if ($tmp2) {
				continue;
			}
			if ($first) {
				$sb->add(" WHERE ");
			} else {
				$sb->add(" AND ");
			}
			$first = false;
			switch (HxString::toUpperCase(($wData->arr[1] ?? null))) {
				case "BETWEEN":
					$tmp3 = null;
					if ($values->length !== 2) {
						$tmp3 = \Lambda::foreach($values, function ($s) {
							return \Util::any2bool($s);
						});
					} else {
						$tmp3 = false;
					}
					if ($tmp3) {
						\S::exit("BETWEEN needs 2 values - got only:" . ($values->join(",")??'null'));
					}
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" BETWEEN ? AND ?");
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[0] ?? null),
					]));
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($values->arr[1] ?? null),
					]));
					break;
				case "IN":
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" IN(");
					$sb->add($values->map(function ($s1)  use (&$wData, &$phValues, &$values) {
						$wData1 = ($wData->arr[0] ?? null);
						$tmp4 = $values->shift();
						$phValues->push(\Array_hx::wrap([
							$wData1,
							$tmp4,
						]));
						return "?";
					})->join(","));
					$sb->add(")");
					break;
				case "LIKE":
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					$sb->add(" LIKE ?");
					$phValues->push(\Array_hx::wrap([
						($wData->arr[0] ?? null),
						($wData->arr[2] ?? null),
					]));
					break;
				default:
					$sb->add($this->quoteField(($wData->arr[0] ?? null)));
					if ((new \EReg("^(<|>)", ""))->match(($wData->arr[1] ?? null))) {
						$eR = new \EReg("^(<|>)", "");
						$eR->match(($wData->arr[1] ?? null));
						$val = \Std::parseFloat($eR->matchedRight());
						$sb->add(($eR->matched(0)??'null') . "?");
						$phValues->push(\Array_hx::wrap([
							($wData->arr[0] ?? null),
							$val,
						]));
						continue 2;
					}
					if (($wData->arr[1] ?? null) === "NULL") {
						$sb->add(" IS NULL");
					} else {
						$sb->add(" = ?");
						$phValues->push(\Array_hx::wrap([
							($wData->arr[0] ?? null),
							($wData->arr[1] ?? null),
						]));
					}
					break;
			}
		}

		$sob->add($sb->b);
		return true;
	}


	/**
	 * @param string $groupParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildGroup ($groupParam, $sb) {
		$_gthis = $this;
		$fields = HxString::split($groupParam, ",");
		if ($fields->length === 0) {
			return false;
		}
		$sb->add(" GROUP BY ");
		$sb->add($fields->map(function ($g)  use (&$_gthis) {
			return $_gthis->quoteField($g);
		})->join(","));
		return true;
	}


	/**
	 * @param string $limitParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildLimit ($limitParam, $sb) {
		$tmp = null;
		if (HxString::indexOf($limitParam, ",") > -1) {
			$tmp = HxString::split($limitParam, ",")->map(function ($s) {
				return \Std::parseInt($s);
			})->join(",");
		} else {
			$tmp = \Std::string(\Std::parseInt($limitParam));
		}
		$sb->add(" LIMIT " . ($tmp??'null'));
		return true;
	}


	/**
	 * @param string $orderParam
	 * @param \StringBuf $sb
	 * 
	 * @return bool
	 */
	public function buildOrder ($orderParam, $sb) {
		$_gthis = $this;
		$fields = HxString::split($orderParam, ",");
		if ($fields->length === 0) {
			return false;
		}
		$sb->add(" ORDER BY ");
		$sb->add($fields->map(function ($f)  use (&$_gthis) {
			$g = HxString::split($f, "|");
			$tmp = $_gthis->quoteField(($g->arr[0] ?? null));
			$tmp1 = null;
			$tmp2 = null;
			if ($g->length === 2) {
				$tmp2 = ($g->arr[1] ?? null) === "DESC";
			} else {
				$tmp2 = false;
			}
			if ($tmp2) {
				$tmp1 = " DESC";
			} else {
				$tmp1 = "";
			}
			return ($tmp??'null') . ($tmp1??'null');
		})->join(","));
		return true;
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return int
	 */
	public function count ($q, $sb, $phValues) {
		($q->data["fields"] ?? null);
		$tmp = Log::$trace;
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		$tmp2 = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$tmp2 = ($q->data["table"] ?? null);
		} else {
			$tmp2 = $this->table;
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 93,
			"className" => "Model",
			"methodName" => "count",
		]));
		$sb->add("SELECT COUNT(*) AS count");
		$qTable = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$qTable = ($q->data["table"] ?? null);
		} else {
			$qTable = $this->table;
		}
		if (\Util::any2bool(($q->data["joincond"] ?? null))) {
			($q->data["joincond"] ?? null);
		}
		if (\Util::any2bool(($q->data["jointable"] ?? null))) {
			($q->data["jointable"] ?? null);
		}
		$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		$where = ($q->data["where"] ?? null);
		if ($where !== null) {
			$this->buildCond($where, $sb, $phValues);
		}
		return (Lib::hashOfAssociativeArray($this->execute($sb->b, $phValues)[0])->data["count"] ?? null);
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return int
	 */
	public function countJoin ($q, $sb, $phValues) {
		($q->data["fields"] ?? null);
		$tmp = Log::$trace;
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		$tmp2 = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$tmp2 = ($q->data["table"] ?? null);
		} else {
			$tmp2 = $this->table;
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 114,
			"className" => "Model",
			"methodName" => "countJoin",
		]));
		$sb->add("SELECT COUNT(*) AS count");
		$qTable = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$qTable = ($q->data["table"] ?? null);
		} else {
			$qTable = $this->table;
		}
		$joinCond = null;
		if (\Util::any2bool(($q->data["joincond"] ?? null))) {
			$joinCond = ($q->data["joincond"] ?? null);
		} else {
			$joinCond = null;
		}
		$tmp3 = null;
		if (\Util::any2bool(($q->data["jointable"] ?? null))) {
			$tmp3 = ($q->data["jointable"] ?? null);
		} else {
			$tmp3 = null;
		}
		$this->joinTable = $tmp3;
		$filterTables = "";
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$filterTables = HxString::split(($q->data["filter_tables"] ?? null), ",")->map(function ($f) {
				return "fly_crm." . (\S::$my->real_escape_string($f)??'null');
			})->join(",");
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		if ($this->joinTable !== null) {
			$sb->add(" INNER JOIN " . ($this->joinTable??'null'));
		}
		if ($joinCond !== null) {
			$sb->add(" ON " . ($joinCond??'null'));
		}
		$where = ($q->data["where"] ?? null);
		if ($where !== null) {
			$this->buildCond($where, $sb, $phValues);
		}
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$this->buildCond(HxString::split(($q->data["filter"] ?? null), ",")->map(function ($f1) {
				return "fly_crm." . (\S::$my->real_escape_string($f1)??'null');
			})->join(","), $sb, $phValues, false);
			if ($this->joinTable === "vicidial_users") {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f2) {
					return "AND " . ($f2??'null') . ".client_id=vicidial_list.vendor_lead_code";
				})->join(" ")??'null'));
			} else {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f3) {
					return "AND " . ($f3??'null') . ".client_id=clients.client_id";
				})->join(" ")??'null'));
			}
		}
		return (Lib::hashOfAssociativeArray($this->execute($sb->b, $phValues)[0])->data["count"] ?? null);
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doJoin ($q, $sb, $phValues) {
		$fields = ($q->data["fields"] ?? null);
		$tmp = Log::$trace;
		$tmp1 = "table:" . (($q->data["table"] ?? null)??'null') . ":";
		$tmp2 = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$tmp2 = ($q->data["table"] ?? null);
		} else {
			$tmp2 = $this->table;
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 156,
			"className" => "Model",
			"methodName" => "doJoin",
		]));
		$tmp3 = null;
		if ($fields !== null) {
			$tmp3 = $this->fieldFormat(HxString::split($fields, ",")->map(function ($f) {
				return \S::$my->real_escape_string($f);
			})->join(","));
		} else {
			$tmp3 = "*";
		}
		$sb->add("SELECT " . ($tmp3??'null'));
		$qTable = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$qTable = ($q->data["table"] ?? null);
		} else {
			$qTable = $this->table;
		}
		$joinCond = null;
		if (\Util::any2bool(($q->data["joincond"] ?? null))) {
			$joinCond = ($q->data["joincond"] ?? null);
		} else {
			$joinCond = null;
		}
		$joinTable = null;
		if (\Util::any2bool(($q->data["jointable"] ?? null))) {
			$joinTable = ($q->data["jointable"] ?? null);
		} else {
			$joinTable = null;
		}
		$filterTables = "";
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$filterTables = HxString::split(($q->data["filter_tables"] ?? null), ",")->map(function ($f1) {
				return "fly_crm." . (\S::$my->real_escape_string($f1)??'null');
			})->join(",");
			$sb->add(" FROM " . ($filterTables??'null') . "," . (\S::$my->real_escape_string($qTable)??'null'));
		} else {
			$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		}
		if ($joinTable !== null) {
			$sb->add(" INNER JOIN " . ($joinTable??'null'));
		}
		if ($joinCond !== null) {
			$sb->add(" ON " . ($joinCond??'null'));
		}
		$where = ($q->data["where"] ?? null);
		if ($where !== null) {
			$this->buildCond($where, $sb, $phValues);
		}
		if (\Util::any2bool(($q->data["filter"] ?? null))) {
			$this->buildCond(HxString::split(($q->data["filter"] ?? null), ",")->map(function ($f2) {
				return "fly_crm." . (\S::$my->real_escape_string($f2)??'null');
			})->join(","), $sb, $phValues, false);
			if ($joinTable === "vicidial_users") {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f3) {
					return "AND " . ($f3??'null') . ".client_id=vicidial_list.vendor_lead_code";
				})->join(" ")??'null'));
			} else {
				$sb->add(" " . (HxString::split($filterTables, ",")->map(function ($f4) {
					return "AND " . ($f4??'null') . ".client_id=clients.client_id";
				})->join(" ")??'null'));
			}
		}
		$groupParam = ($q->data["group"] ?? null);
		if ($groupParam !== null) {
			$this->buildGroup($groupParam, $sb);
		}
		$order = ($q->data["order"] ?? null);
		if ($order !== null) {
			$this->buildOrder($order, $sb);
		}
		$limit = ($q->data["limit"] ?? null);
		$tmp4 = null;
		if ($limit === null) {
			$tmp4 = "15";
		} else {
			$tmp4 = $limit;
		}
		$this->buildLimit($tmp4, $sb);
		return $this->execute($sb->b, $phValues);
	}


	/**
	 * @param StringMap $q
	 * @param \StringBuf $sb
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function doSelect ($q, $sb, $phValues) {
		$fields = ($q->data["fields"] ?? null);
		$tmp = Log::$trace;
		$tmp1 = "table:" . (\Std::string(($q->data["table"] ?? null))??'null') . ":";
		$tmp2 = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$tmp2 = ($q->data["table"] ?? null);
		} else {
			$tmp2 = $this->table;
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 207,
			"className" => "Model",
			"methodName" => "doSelect",
		]));
		$tmp3 = null;
		if ($fields !== null) {
			$tmp3 = $this->fieldFormat($fields);
		} else {
			$tmp3 = "*";
		}
		$sb->add("SELECT " . ($tmp3??'null'));
		$qTable = null;
		if (\Util::any2bool(($q->data["table"] ?? null))) {
			$qTable = ($q->data["table"] ?? null);
		} else {
			$qTable = $this->table;
		}
		$sb->add(" FROM " . (\S::$my->real_escape_string($qTable)??'null'));
		$where = ($q->data["where"] ?? null);
		if ($where !== null) {
			$this->buildCond($where, $sb, $phValues);
		}
		$groupParam = ($q->data["group"] ?? null);
		if ($groupParam !== null) {
			$this->buildGroup($groupParam, $sb);
		}
		$order = ($q->data["order"] ?? null);
		if ($order !== null) {
			$this->buildOrder($order, $sb);
		}
		$limit = ($q->data["limit"] ?? null);
		$tmp4 = null;
		if ($limit === null) {
			$tmp4 = "15";
		} else {
			$tmp4 = $limit;
		}
		$this->buildLimit($tmp4, $sb);
		return $this->execute($sb->b, $phValues);
	}


	/**
	 * @param string $sql
	 * @param \Array_hx $phValues
	 * 
	 * @return mixed
	 */
	public function execute ($sql, $phValues = null) {
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 280,
			"className" => "Model",
			"methodName" => "execute",
		]));
		$stmt = \S::$my->stmt_init();
		$success = $stmt->prepare($sql);
		(Log::$trace)($success, new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 284,
			"className" => "Model",
			"methodName" => "execute",
		]));
		if (!$success) {
			(Log::$trace)($stmt->error, new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 287,
				"className" => "Model",
				"methodName" => "execute",
			]));
			return null;
		}
		$bindTypes = "";
		$values2bind = null;
		$dbFieldTypes = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbFieldTypes"] ?? null)));
		$qObj = new HxAnon();
		$i = 0;
		$_g = 0;
		while ($_g < $phValues->length) {
			unset($ph, $bindTypes1, $type);
			$ph = ($phValues->arr[$_g] ?? null);
			$_g = $_g + 1;
			$type = ($dbFieldTypes->data[($ph->arr[0] ?? null)] ?? null);
			$bindTypes1 = null;
			if (\Util::any2bool($type)) {
				$bindTypes1 = $type;
			} else {
				$bindTypes1 = "s";
			}
			$bindTypes = ($bindTypes??'null') . ($bindTypes1??'null');
			$i = $i + 1;
			$values2bind[$i - 1] = ($ph->arr[1] ?? null);
		}

		(Log::$trace)(\Std::string($values2bind), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 304,
			"className" => "Model",
			"methodName" => "execute",
		]));
		if ($phValues->length > 0) {
			$success = myBindParam($stmt, $values2bind, $bindTypes);
			(Log::$trace)("success:" . (\Std::string($success)??'null'), new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 308,
				"className" => "Model",
				"methodName" => "execute",
			]));
			if ($success) {
				$data = null;
				$success = $stmt->execute();
				if (!$success) {
					(Log::$trace)($stmt->error, new HxAnon([
						"fileName" => "Model.hx",
						"lineNumber" => 316,
						"className" => "Model",
						"methodName" => "execute",
					]));
					return null;
				}
				$result = $stmt->get_result();
				if ($result) {
					$this->num_rows = (Boot::typedCast(Boot::getClass(MySQLi_Result::class), $result))->num_rows;
					$data = (Boot::typedCast(Boot::getClass(MySQLi_Result::class), $result))->fetch_all(1);
				}
				return $data;
			}
		} else {
			$data1 = null;
			$success = $stmt->execute();
			if (!$success) {
				(Log::$trace)($stmt->error, new HxAnon([
					"fileName" => "Model.hx",
					"lineNumber" => 334,
					"className" => "Model",
					"methodName" => "execute",
				]));
				return array("ERROR", $stmt->error);
			}
			$result1 = $stmt->get_result();
			if ($result1) {
				$res = Boot::typedCast(Boot::getClass(MySQLi_Result::class), $result1);
				$this->num_rows = $res->num_rows;
				$data1 = $res->fetch_all(1);
			}
			return $data1;
		}
		return array("ERROR", $stmt->error);
	}


	/**
	 * @param string $fields
	 * 
	 * @return string
	 */
	public function fieldFormat ($fields) {
		$fieldsWithFormat = new \Array_hx();
		$sF = HxString::split($fields, ",");
		$dbQueryFormats = Lib::hashOfAssociativeArray((array)((\S::$conf->data["dbQueryFormats"] ?? null)));
		$qKeys = new \Array_hx();
		$it = new NativeArrayIterator(array_map("strval", array_keys($dbQueryFormats->data)));
		while ($it->hasNext()) {
			$qKeys->push($it->next());
		}
		$_g = 0;
		while ($_g < $sF->length) {
			unset($f, $format);
			$f = ($sF->arr[$_g] ?? null);
			$_g = $_g + 1;
			if (\Lambda::has($qKeys, $f)) {
				$format = ($dbQueryFormats->data[$f] ?? null);
				$fieldsWithFormat->push((($format->arr[0] ?? null)??'null') . "(" . (\S::$my->real_escape_string($f)??'null') . ", \"" . (($format->arr[1] ?? null)??'null') . "\") AS `" . ($f??'null') . "`");
			} else {
				$fieldsWithFormat->push(\S::$my->real_escape_string($f));
			}
		}

		return $fieldsWithFormat->join(",");
	}


	/**
	 * @param StringMap $param
	 * 
	 * @return mixed
	 */
	public function find ($param) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$count = $this->countJoin($param, $sb, $phValues);
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$tmp = Log::$trace;
		$tmp1 = "count:" . ($count??'null') . " page:" . (($param->data["page"] ?? null)??'null') . ": ";
		$tmp2 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp2 = "Y";
		} else {
			$tmp2 = "N";
		}
		$tmp(($tmp1??'null') . ($tmp2??'null'), new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 268,
			"className" => "Model",
			"methodName" => "find",
		]));
		$tmp3 = null;
		if (array_key_exists("page", $param->data)) {
			$tmp3 = \Std::parseInt(($param->data["page"] ?? null));
		} else {
			$tmp3 = 1;
		}
		$this->data = new HxAnon([
			"count" => $count,
			"page" => $tmp3,
			"rows" => $this->doSelect($param, $sb, $phValues),
		]);
		return $this->json_encode();
	}


	/**
	 * @param string $table_name
	 * 
	 * @return StringMap
	 */
	public function getEditorFields ($table_name = null) {
		$sb = new \StringBuf();
		$phValues = new \Array_hx();
		$param = new StringMap();
		$param->data["table"] = "fly_crm.editor_fields";
		$value = null;
		if ($table_name !== null) {
			$value = ",table_name|" . (\S::$my->real_escape_string($table_name)??'null');
		} else {
			$value = "";
		}
		$param->data["where"] = "field_cost|>-2" . ($value??'null');

		$param->data["fields"] = "field_name,field_label,field_type,field_options,table_name";
		$param->data["order"] = "table_name,field_rank,field_order";
		$param->data["limit"] = "100";
		$eFields = \Array_hx::wrap($this->doSelect($param, $sb, $phValues));
		$ret = new StringMap();
		$_g = 0;
		while ($_g < $eFields->length) {
			unset($table, $ef, $a);
			$ef = ($eFields->arr[$_g] ?? null);
			$_g = $_g + 1;
			$table = $ef["table_name"];
			if (!array_key_exists($table, $ret->data)) {
				$ret->data[$table] = new \Array_hx();
			}
			$a = ($ret->data[$table] ?? null);
			$a->push(Lib::hashOfAssociativeArray($ef));
			$ret->data[$table] = $a;
		}

		return $ret;
	}


	/**
	 * @return mixed
	 */
	public function json_encode () {
		$this->data->agent = \S::$user;
		$this->data->globals = $this->globals;
		return json_encode($this->data, 320);
	}


	/**
	 * @param string $res
	 * 
	 * @return mixed
	 */
	public function json_response ($res) {
		return json_encode(new HxAnon([
			"response" => $res,
		]), 64);
	}


	/**
	 * @param string $sql
	 * 
	 * @return mixed
	 */
	public function query ($sql) {
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "Model.hx",
			"lineNumber" => 352,
			"className" => "Model",
			"methodName" => "query",
		]));
		$res = \S::$my->query($sql, 1);
		$tmp = null;
		if ($res) {
			$tmp = HxString::indexOf($sql, "UPDATE") === -1;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return (Boot::typedCast(Boot::getClass(MySQLi_Result::class), $res))->fetch_all(1);
		} else {
			(Log::$trace)((\Std::string($res)??'null') . ":" . (\S::$my->error??'null'), new HxAnon([
				"fileName" => "Model.hx",
				"lineNumber" => 361,
				"className" => "Model",
				"methodName" => "query",
			]));
		}
		return null;
	}


	/**
	 * @param string $f
	 * 
	 * @return string
	 */
	public function quoteField ($f) {
		$_this = Model::$KEYWORDS;
		if (array_key_exists(HxString::toLowerCase($f), $_this->data)) {
			return "`" . ($f??'null') . "`";
		} else {
			return $f;
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		$h = new StringMap();
		{
			$_g = 0;
			$_g1 = HxString::split("ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE", "|");
			while ($_g < $_g1->length) {
				unset($k, $key);
				$k = ($_g1->arr[$_g] ?? null);
				$_g = $_g + 1;
				$key = HxString::toLowerCase($k);
				$h->data[$key] = true;

			}
		};
		self::$KEYWORDS = $h;
	}
}


Boot::registerClass(Model::class, 'Model');
Model::__hx__init();
