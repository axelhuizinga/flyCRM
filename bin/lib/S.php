<?php
/**
 * Generated by Haxe 3.4.0
 */

use \me\cunity\php\Debug;
use \me\cunity\php\db\MySQLi;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxDynamicStr;
use \haxe\Log;
use \php\Lib;
use \php\Web;
use \haxe\Json;
use \php\_Boot\HxAnon;
use \php\Session;

class S {
	/**
	 * @var bool
	 */
	const debug = true;


	/**
	 * @var StringMap
	 */
	static public $conf;
	/**
	 * @var string
	 */
	static public $db;
	/**
	 * @var string
	 */
	static public $dbPass;
	/**
	 * @var string
	 */
	static public $dbUser;
	/**
	 * @var bool
	 */
	static public $headerSent = false;
	/**
	 * @var string
	 */
	static public $host;
	/**
	 * @var MySQLi
	 */
	static public $my;
	/**
	 * @var string
	 */
	static public $user;
	/**
	 * @var string
	 */
	static public $vicidialPass;
	/**
	 * @var string
	 */
	static public $vicidialUser;


	/**
	 * @return bool
	 */
	static public function checkAuth () {
		S::$user = Session::get("PHP_AUTH_USER");
		(Log::$trace)(S::$user, new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 98,
			"className" => "S",
			"methodName" => "checkAuth",
		]));
		if (S::$user === null) {
			return false;
		}
		$pass = Session::get("PHP_AUTH_PW");
		if ($pass === null) {
			return false;
		}
		$res = Lib::hashOfAssociativeArray((new \Model())->query("SELECT use_non_latin,webroot_writable,pass_hash_enabled,pass_key,pass_cost,hosted_settings FROM system_settings"));
		if ((Lib::hashOfAssociativeArray(($res->data["0"] ?? null))->data["pass_hash_enabled"] ?? null) === "1") {
			S::exit("ENCRYPTED PASSWORDS NOT IMPLEMENTED");
		}
		$res = Lib::hashOfAssociativeArray((new \Model())->query("SELECT count(*) AS cnt FROM vicidial_users WHERE user=\"" . (S::$user??'null') . "\" and pass=\"" . ($pass??'null') . "\" and user_level > 7 and active=\"Y\""));
		if (array_key_exists("0", $res->data)) {
			return (Lib::hashOfAssociativeArray(($res->data["0"] ?? null))->data["cnt"] ?? null) === "1";
		} else {
			return false;
		}
	}


	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function dump ($d) {
		if (!S::$headerSent) {
			header("Content-Type" . ": " . "application/json");
			S::$headerSent = true;
		}
		Lib::println(Json::phpJsonEncode($d, null, null));
	}


	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function edump ($d) {
		edump($d);
	}


	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	static public function exit ($d) {
		if (!S::$headerSent) {
			header("Content-Type" . ": " . "application/json");
			S::$headerSent = true;
		}
		$exitValue = json_encode(new HxAnon([
			"ERROR" => $d,
		]));
		exit($exitValue);
		return;
	}


	/**
	 * @return void
	 */
	static public function main () {
		Log::$trace = function($v, $i = null) { return Debug::_trace($v, $i); };
		S::$conf = \Config::load("appData.js");
		Session::start();
		$pd = Web::getPostData();
		(Log::$trace)($pd, new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 54,
			"className" => "S",
			"methodName" => "main",
		]));
		$params = Web::getParams();
		if (($params->data["debug"] ?? null) === "1") {
			header("Content-Type" . ": " . "text/html; charset=utf-8");
			S::$headerSent = true;
			Lib::println("<div><pre>");
			Lib::println($params);
		}
		(Log::$trace)(\Date::now()->toString(), new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 63,
			"className" => "S",
			"methodName" => "main",
		]));
		(Log::$trace)($params, new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 64,
			"className" => "S",
			"methodName" => "main",
		]));
		$action = ($params->data["action"] ?? null);
		$tmp = null;
		if (strlen($action) !== 0) {
			$tmp = ($params->data["className"] ?? null) === null;
		} else {
			$tmp = true;
		}
		if ($tmp) {
			S::dump(new HxAnon([
				"error" => "required params missing",
			]));
			return;
		}
		S::$my = new MySQLi("localhost", S::$dbUser, S::$dbPass, S::$db);
		$auth = S::checkAuth();
		(Log::$trace)(($action??'null') . ":" . (\Std::string($auth)??'null'), new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 77,
			"className" => "S",
			"methodName" => "main",
		]));
		if (!$auth) {
			S::exit("AUTH FAILURE");
			return;
		}
		$result = \Model::dispatch($params);
		(Log::$trace)($result, new HxAnon([
			"fileName" => "S.hx",
			"lineNumber" => 85,
			"className" => "S",
			"methodName" => "main",
		]));
		if (!S::$headerSent) {
			header("Content-Type" . ": " . "application/json");
			S::$headerSent = true;
		}
		Lib::println($result);
	}


	/**
	 * @return int
	 */
	static public function newMemberID () {
		$res = S::$my->query("SELECT  MAX(CAST(vendor_lead_code AS UNSIGNED)) FROM vicidial_list WHERE list_id=10000");
		if ($res->num_rows === 0) {
			return 1;
		} else {
			return \Std::parseInt($res->fetch_array(2)[0]) + 1;
		}
	}


	/**
	 * @param string $table
	 * @param string $db
	 * 
	 * @return \Array_hx
	 */
	static public function tableFields ($table, $db = "asterisk") {
		if ($db === null) {
			$db = "asterisk";
		}
		$res = S::$my->query("SELECT GROUP_CONCAT(COLUMN_NAME) FROM information_schema.columns WHERE table_schema = \"" . ($db??'null') . "\" AND table_name = \"" . ($table??'null') . "\";");
		$tmp = null;
		if (\Util::any2bool($res)) {
			$tmp = $res->num_rows === 1;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return HxDynamicStr::wrap($res->fetch_array(2)[0])->split(",");
		}
		return null;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		require_once("/srv/www/htdocs/flyCRM/php/functions.php");
		require_once("../../config/flyCRM.db.php");
		Debug::$logFile = $GLOBALS["appLog"];
		S::$db = $GLOBALS["VARDB"];
		S::$dbUser = $GLOBALS["VARDB_user"];
		S::$dbPass = $GLOBALS["VARDB_pass"];
		S::$host = $_SERVER['SERVER_NAME'];
		S::$vicidialUser = $GLOBALS["user"];
		S::$vicidialPass = $GLOBALS["pass"];

	}
}


Boot::registerClass(S::class, 'S');
S::__hx__init();
