<?php

<<<<<<< HEAD
// Generated by Haxe 3.4.0
=======
// Generated by Haxe 3.4.0 (git build development @ e08d018)
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
class Lambda {
	public function __construct(){}
	static function harray($it) {
		$a = new _hx_array(array());
		{
			$i = $it->iterator();
			while($i->hasNext()) {
<<<<<<< HEAD
				$i1 = $i->next();
				$a->push($i1);
				unset($i1);
=======
				$a->push($i->next());
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $a;
	}
	static function hlist($it) {
		$l = new HList();
		{
			$i = $it->iterator();
			while($i->hasNext()) {
<<<<<<< HEAD
				$i1 = $i->next();
				$l->add($i1);
				unset($i1);
=======
				$l->add($i->next());
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $l;
	}
	static function map($it, $f) {
		$l = new HList();
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				$l->add(call_user_func_array($f, array($x1)));
				unset($x1);
=======
				$l->add(call_user_func_array($f, array($x->next())));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $l;
	}
	static function mapi($it, $f) {
		$l = new HList();
		$i = 0;
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				$i = $i + 1;
				$l->add(call_user_func_array($f, array($i - 1, $x1)));
				unset($x1);
=======
				$i = $i + 1;
				$l->add(call_user_func_array($f, array($i - 1, $x->next())));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $l;
	}
	static function has($it, $elt) {
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				if((is_object($_t = $x1) && ($_t instanceof Enum) ? $_t == $elt : _hx_equal($_t, $elt))) {
					return true;
				}
				unset($x1,$_t);
=======
				if((is_object($_t = $x->next()) && ($_t instanceof Enum) ? $_t == $elt : _hx_equal($_t, $elt))) {
					return true;
				}
				unset($_t);
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return false;
	}
	static function exists($it, $f) {
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				if(call_user_func_array($f, array($x1))) {
					return true;
				}
				unset($x1);
=======
				if(call_user_func_array($f, array($x->next()))) {
					return true;
				}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return false;
	}
	static function hforeach($it, $f) {
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				if(!call_user_func_array($f, array($x1))) {
					return false;
				}
				unset($x1);
=======
				if(!call_user_func_array($f, array($x->next()))) {
					return false;
				}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return true;
	}
	static function forone($it, $f) {
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				if(call_user_func_array($f, array($x1))) {
					return true;
				}
				unset($x1);
=======
				if(call_user_func_array($f, array($x->next()))) {
					return true;
				}
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return false;
	}
	static function iter($it, $f) {
		$x = $it->iterator();
		while($x->hasNext()) {
<<<<<<< HEAD
			$x1 = $x->next();
			call_user_func_array($f, array($x1));
			unset($x1);
=======
			call_user_func_array($f, array($x->next()));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
		}
	}
	static function filter($it, $f) {
		$l = new HList();
		{
			$x = $it->iterator();
			while($x->hasNext()) {
				$x1 = $x->next();
				if(call_user_func_array($f, array($x1))) {
					$l->add($x1);
				}
				unset($x1);
			}
		}
		return $l;
	}
	static function fold($it, $f, $first) {
		{
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				$first = call_user_func_array($f, array($x1, $first));
				unset($x1);
=======
				$first = call_user_func_array($f, array($x->next(), $first));
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $first;
	}
	static function count($it, $pred = null) {
		$n = 0;
		if($pred === null) {
			$_ = $it->iterator();
			while($_->hasNext()) {
<<<<<<< HEAD
				$_1 = $_->next();
				$n = $n + 1;
				unset($_1);
=======
				$_->next();
				$n = $n + 1;
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		} else {
			$x = $it->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				if(call_user_func_array($pred, array($x1))) {
=======
				if(call_user_func_array($pred, array($x->next()))) {
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
					$n = $n + 1;
				}
				unset($x1);
			}
		}
		return $n;
	}
	static function hempty($it) {
		return !$it->iterator()->hasNext();
	}
	static function indexOf($it, $v) {
		$i = 0;
		{
			$v2 = $it->iterator();
			while($v2->hasNext()) {
<<<<<<< HEAD
				$v21 = $v2->next();
				if((is_object($_t = $v) && ($_t instanceof Enum) ? $_t == $v21 : _hx_equal($_t, $v21))) {
					return $i;
				}
				$i = $i + 1;
				unset($v21,$_t);
=======
				if((is_object($_t = $v) && ($_t instanceof Enum) ? $_t == $v2->next() : _hx_equal($_t, $v2->next()))) {
					return $i;
				}
				$i = $i + 1;
				unset($_t);
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return -1;
	}
	static function find($it, $f) {
		{
			$v = $it->iterator();
			while($v->hasNext()) {
				$v1 = $v->next();
				if(call_user_func_array($f, array($v1))) {
					return $v1;
				}
				unset($v1);
			}
		}
		return null;
	}
	static function concat($a, $b) {
		$l = new HList();
		{
			$x = $a->iterator();
			while($x->hasNext()) {
<<<<<<< HEAD
				$x1 = $x->next();
				$l->add($x1);
				unset($x1);
			}
		}
		{
			$x2 = $b->iterator();
			while($x2->hasNext()) {
				$x3 = $x2->next();
				$l->add($x3);
				unset($x3);
=======
				$l->add($x->next());
			}
		}
		{
			$x1 = $b->iterator();
			while($x1->hasNext()) {
				$l->add($x1->next());
>>>>>>> a32fff50bcc6512f1e0fbc14f62d7da0632f1c7d
			}
		}
		return $l;
	}
	function __toString() { return 'Lambda'; }
}
