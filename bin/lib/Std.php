<?php
/**
 * Generated by Haxe 3.4.0
 */

use \php\Boot;
use \php\_Boot\HxString;

class Std {
	/**
	 * @param mixed $value
	 * @param Class $c
	 * 
	 * @return mixed
	 */
	static public function instance ($value, $c) {
		if (Boot::is($value, $c)) {
			return $value;
		} else {
			return null;
		}
	}


	/**
	 * @param float $x
	 * 
	 * @return int
	 */
	static public function int ($x) {
		return (int)$x;
	}


	/**
	 * @param mixed $v
	 * @param mixed $t
	 * 
	 * @return bool
	 */
	static public function is ($v, $t) {
		return Boot::is($v, $t);
	}


	/**
	 * @param int $charCode
	 * 
	 * @return bool
	 */
	static public function isDigitCode ($charCode) {
		$tmp = null;
		if ($charCode !== null) {
			$tmp = $charCode >= 48;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return $charCode <= 57;
		} else {
			return false;
		}
	}


	/**
	 * @param string $x
	 * 
	 * @return float
	 */
	static public function parseFloat ($x) {
		$result = floatval($x);
		if (!Boot::equal($result, 0)) {
			return $result;
		}
		$x = ltrim($x);
		$firstCharIndex = null;
		if (HxString::charAt($x, 0) === "-") {
			$firstCharIndex = 1;
		} else {
			$firstCharIndex = 0;
		}
		$charCode = HxString::charCodeAt($x, $firstCharIndex);
		if ($charCode === 46) {
			$charCode = HxString::charCodeAt($x, $firstCharIndex + 1);
		}
		$tmp = null;
		$tmp1 = null;
		if ($charCode !== null) {
			$tmp1 = $charCode >= 48;
		} else {
			$tmp1 = false;
		}
		if ($tmp1) {
			$tmp = $charCode <= 57;
		} else {
			$tmp = false;
		}
		if ($tmp) {
			return 0.0;
		} else {
			return NAN;
		}
	}


	/**
	 * @param string $x
	 * 
	 * @return int
	 */
	static public function parseInt ($x) {
		if (is_numeric($x)) {
			return intval($x, 10);
		} else {
			$x = ltrim($x);
			$firstCharIndex = null;
			if (HxString::charAt($x, 0) === "-") {
				$firstCharIndex = 1;
			} else {
				$firstCharIndex = 0;
			}
			$firstCharCode = HxString::charCodeAt($x, $firstCharIndex);
			$tmp = null;
			$tmp1 = null;
			if ($firstCharCode !== null) {
				$tmp1 = $firstCharCode >= 48;
			} else {
				$tmp1 = false;
			}
			if ($tmp1) {
				$tmp = $firstCharCode <= 57;
			} else {
				$tmp = false;
			}
			if (!$tmp) {
				return null;
			}
			$secondChar = HxString::charAt($x, $firstCharIndex + 1);
			$tmp2 = null;
			if ($secondChar !== "x") {
				$tmp2 = $secondChar === "X";
			} else {
				$tmp2 = true;
			}
			if ($tmp2) {
				return intval($x, 0);
			} else {
				return intval($x, 10);
			}
		}
	}


	/**
	 * @param int $x
	 * 
	 * @return int
	 */
	static public function random ($x) {
		if ($x <= 1) {
			return 0;
		} else {
			return mt_rand(0, $x - 1);
		}
	}


	/**
	 * @param mixed $s
	 * 
	 * @return string
	 */
	static public function string ($s) {
		return Boot::stringify($s);
	}
}


Boot::registerClass(Std::class, 'Std');
