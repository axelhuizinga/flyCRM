<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace php\_Boot;

use \php\Boot;

class HxString {
	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return string
	 */
	static public function charAt ($str, $index) {
		$tmp = null;
		if ($index >= 0) {
			$tmp = $index >= strlen($str);
		} else {
			$tmp = true;
		}
		if ($tmp) {
			return "";
		} else {
			return $str[$index];
		}
	}


	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($str, $index) {
		$tmp = null;
		if ($index >= 0) {
			$tmp = $index >= strlen($str);
		} else {
			$tmp = true;
		}
		if ($tmp) {
			return null;
		} else {
			return ord($str[$index]);
		}
	}


	/**
	 * @param int $code
	 * 
	 * @return string
	 */
	static public function fromCharCode ($code) {
		return chr($code);
	}


	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function indexOf ($str, $search, $startIndex = 0) {
		if ($startIndex === null) {
			$startIndex = 0;
		}
		if ($startIndex < 0) {
			$startIndex = $startIndex + strlen($str);
		}
		$index = strpos($str, $search, $startIndex);
		if ($index === false) {
			return -1;
		} else {
			return $index;
		}
	}


	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function lastIndexOf ($str, $search, $startIndex = null) {
		$index = null;
		if ($startIndex === null) {
			$index = 0;
		} else {
			$index = $startIndex - strlen($str);
		}
		$index1 = strrpos($str, $search, $index);
		if ($index1 === false) {
			return -1;
		} else {
			return $index1;
		}
	}


	/**
	 * @param string $str
	 * @param string $delimiter
	 * 
	 * @return \Array_hx
	 */
	static public function split ($str, $delimiter) {
		if ($delimiter === "") {
			return \Array_hx::wrap(str_split($str));
		} else {
			return \Array_hx::wrap(explode($delimiter, $str));
		}
	}


	/**
	 * @param string $str
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function substr ($str, $pos, $len = null) {
		if ($pos < -strlen($str)) {
			$pos = 0;
		} else if ($pos >= strlen($str)) {
			return "";
		}
		if ($len === null) {
			return substr($str, $pos);
		} else {
			$result = substr($str, $pos, $len);
			if ($result === false) {
				return "";
			} else {
				return $result;
			}
		}
	}


	/**
	 * @param string $str
	 * @param int $startIndex
	 * @param int $endIndex
	 * 
	 * @return string
	 */
	static public function substring ($str, $startIndex, $endIndex = null) {
		if ($endIndex === null) {
			$endIndex = strlen($str);
		} else if ($endIndex < 0) {
			$endIndex = 0;
		}
		if ($startIndex < 0) {
			$startIndex = 0;
		}
		if ($startIndex > $endIndex) {
			$tmp = $endIndex;
			$endIndex = $startIndex;
			$startIndex = $tmp;
		}
		$result = substr($str, $startIndex, $endIndex - $startIndex);
		if ($result === false) {
			return "";
		} else {
			return $result;
		}
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toLowerCase ($str) {
		return strtolower($str);
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toString ($str) {
		return $str;
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toUpperCase ($str) {
		return strtoupper($str);
	}
}


Boot::registerClass(HxString::class, 'php._Boot.HxString');
