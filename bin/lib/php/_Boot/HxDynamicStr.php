<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace php\_Boot;

use \php\Boot;

class HxDynamicStr {
	/**
	 * @var string
	 */
	static public $hxString;


	/**
	 * @var string
	 */
	public $str;


	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function wrap ($value) {
		if (is_string($value)) {
			return new HxDynamicStr($value);
		} else {
			return $value;
		}
	}


	/**
	 * @param string $str
	 * 
	 * @return void
	 */
	public function __construct ($str) {
		$this->str = $str;
	}


	/**
	 * @param string $method
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function __call ($method, $args) {
		array_unshift($args, $this->str);
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * @param string $field
	 * 
	 * @return mixed
	 */
	public function __get ($field) {
		switch ($field) {
			case "charAt":
				$a1 = $this->str;
				return function ($a2)  use (&$a1) {
					return HxString::charAt($a1, $a2);
				};
				break;
			case "charCodeAt":
				$a11 = $this->str;
				return function ($a21)  use (&$a11) {
					return HxString::charCodeAt($a11, $a21);
				};
				break;
			case "indexOf":
				$a12 = $this->str;
				return function ($a22)  use (&$a12) {
					return HxString::indexOf($a12, $a22);
				};
				break;
			case "lastIndexOf":
				$a13 = $this->str;
				return function ($a23)  use (&$a13) {
					return HxString::lastIndexOf($a13, $a23);
				};
				break;
			case "length":
				return strlen($this->str);
				break;
			case "split":
				$a14 = $this->str;
				return function ($a24)  use (&$a14) {
					return HxString::split($a14, $a24);
				};
				break;
			case "substr":
				$a15 = $this->str;
				return function ($a25)  use (&$a15) {
					return HxString::substr($a15, $a25);
				};
				break;
			case "substring":
				$a16 = $this->str;
				return function ($a26)  use (&$a16) {
					return HxString::substring($a16, $a26);
				};
				break;
			case "toLowerCase":
				$a17 = $this->str;
				return function ()  use (&$a17) {
					return HxString::toLowerCase($a17);
				};
				break;
			case "toString":
				$a18 = $this->str;
				return function ()  use (&$a18) {
					return HxString::toString($a18);
				};
				break;
			case "toUpperCase":
				$a19 = $this->str;
				return function ()  use (&$a19) {
					return HxString::toUpperCase($a19);
				};
				break;
		}
		$tmp = $this->str;
		$tmp1 = $field;
		return $tmp->{$tmp1};
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$hxString = Boot::getClass(HxString::class)->phpClassName;
	}
}


Boot::registerClass(HxDynamicStr::class, 'php._Boot.HxDynamicStr');
HxDynamicStr::__hx__init();
