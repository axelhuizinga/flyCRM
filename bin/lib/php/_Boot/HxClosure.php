<?php
/**
 * Generated by Haxe 3.4.0
 */

namespace php\_Boot;

use \php\Boot;

class HxClosure {
	/**
	 * @var string
	 */
	public $func;
	/**
	 * @var mixed
	 */
	public $target;


	/**
	 * @param mixed $target
	 * @param string $func
	 * 
	 * @return void
	 */
	public function __construct ($target, $func) {
		$this->target = $target;
		$this->func = $func;
		if (is_null($target)) {
			throw new HxException("Unable to create closure on `null`");
		}
	}


	/**
	 * @return mixed
	 */
	public function __invoke () {
		return call_user_func_array($this->getCallback(), func_get_args());
	}


	/**
	 * @param mixed $newThis
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function callWith ($newThis, $args) {
		return call_user_func_array($this->getCallback($newThis), $args);
	}


	/**
	 * @param HxClosure $closure
	 * 
	 * @return bool
	 */
	public function equals ($closure) {
		if (Boot::equal($this->target, $closure->target)) {
			return $this->func === $closure->func;
		} else {
			return false;
		}
	}


	/**
	 * @param mixed $eThis
	 * 
	 * @return mixed
	 */
	public function getCallback ($eThis = null) {
		if ($eThis === null) {
			$eThis = $this->target;
		}
		$tmp = $eThis;
		$tmp1 = Boot::getClass(\StdClass::class);
		if ($tmp instanceof $tmp1->phpClassName) {
			$tmp2 = $eThis;
			$tmp3 = Boot::getClass(HxAnon::class);
			if ($tmp2 instanceof $tmp3->phpClassName) {
				$tmp4 = $eThis;
				$tmp5 = $this->func;
				return $tmp4->{$tmp5};
			}
		}
		return [$eThis, $this->func];
	}
}


Boot::registerClass(HxClosure::class, 'php._Boot.HxClosure');
